#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <unistd.h>
#include <cutil.h>
#include <cutil_inline.h>
#include <sys/time.h>

#define MAXDEV 32
static const double MEGA  = 1e6;
static const double MICRO = 1e-6;

static void
get_cputime(double *splittime, double *laptime)
{
    struct timeval x;

    gettimeofday(&x, NULL);

    *splittime = x.tv_sec + x.tv_usec/1000000.0 - *laptime;
    *laptime = x.tv_sec + x.tv_usec/1000000.0;
}

static void
bcastperf(int argc, char **argv)
{
    int maxsize = 1024 * 1024 * 10.0;
    int i, j;
    size_t size;
    double sized;
    double lt = 0.0, st = 0.0;
    double ratio = 2.5;
    double nloop = 2e8;
    char *src = (char *)malloc(sizeof(char) * maxsize);
    char *dst[MAXDEV];
    int ndev;
    cutilSafeCall(cudaGetDeviceCount(&ndev));
    printf("# %d device%s found.\n", ndev, ndev > 1 ? "s" : "");
    for (i = 0; i < ndev; i++) {
        cudaSetDevice(i);
        cutilSafeCall(cudaMalloc((void**) &dst[i], sizeof(char) * maxsize));
    }
    printf("\n#\n# cudaMemcpy (HostToDevice)\n");
    printf("# broadcast to %d servers.\n#\n", ndev);
    for (sized = 4096; sized < maxsize; sized *= ratio) {
        size = (size_t)sized;

	get_cputime(&lt, &st);
	for (j = 0; j < nloop/size; j++) {
	    for (i = 0; i < ndev; i++) {
  	        cudaSetDevice(i);
                cudaMemcpy(dst[i], src, size, cudaMemcpyHostToDevice);
	    }
	}
	get_cputime(&lt, &st);
	printf("%d byte    %f sec    %f MB/s\n",
               size, lt, nloop/MEGA/lt);
	fflush(stdout);
    }
}


static void
sendperf(int argc, char **argv)
{
    int maxsize = 1024 * 1024 * 10.0;
    int i, j;
    size_t size;
    double sized;
    double lt = 0.0, st = 0.0;
    double ratio = 2.5;
    // double nloop = 2e8;
    double nloop = 2e9; // !!!
    char *src[MAXDEV];
    char *dst[MAXDEV];
    int ndev;
    cutilSafeCall(cudaGetDeviceCount(&ndev));

    ndev = 1; // !!!

    printf("# %d device%s found.\n", ndev, ndev > 1 ? "s" : "");
    for (i = 0; i < ndev; i++) {
        cudaSetDevice(i);
        cutilSafeCall(cudaMalloc((void**) &dst[i], sizeof(char) * maxsize));
	src[i] = (char *)malloc(sizeof(char) * maxsize);
    }
    printf("\n#\n# cudaMemcpy (HostToDevice)\n#\n");

#if 1
    ratio = 1.0; // !!!
    for (sized = 4096; sized < maxsize; sized *= ratio) {
        size = (size_t)sized;

	get_cputime(&lt, &st);
	for (j = 0; j < nloop/size; j++) {
	    for (i = 0; i < ndev; i++) {
  	        cudaSetDevice(i);
                cudaMemcpy(dst[i], src[i], size, cudaMemcpyHostToDevice);
	    }
	}
	get_cputime(&lt, &st);

#if 0 // with estimated RPC overhead.
	double throughput = 1700.0; // MB/s
	double latency    = 60.0; // us
	double ibsec = nloop / (throughput * MEGA) + latency * MICRO * nloop / size;
	printf("%d byte    %f sec    %f MB/s    %f ib_sec  %f MB/s\n",
	       size, lt, nloop/MEGA/lt, ibsec, nloop/MEGA/(lt + ibsec));
#else
	  printf("%d byte    %f sec    %f MB/s\n",
	  size, lt, nloop/MEGA/lt);
#endif
	fflush(stdout);
    }

#else
          size = 40;
          for (i = 0; i < ndev; i++) {
              for (j = 0; j < size; j++) {
                  src[i][j] = j;
              }
          }
          for (i = 0; i < ndev; i++) {
              cudaSetDevice(i);
              cudaMemcpy(dst[i], src[i], size, cudaMemcpyHostToDevice);
          }
#endif
}

static void
receiveperf(int argc, char **argv)
{
    int maxsize = 1024 * 1024 * 10.0;
    int i, j;
    size_t size;
    double sized;
    double lt = 0.0, st = 0.0;
    double ratio = 2.5;
    double nloop = 2e9; // !!!
    char *src[MAXDEV];
    char *dst[MAXDEV];
    int ndev;
    cutilSafeCall(cudaGetDeviceCount(&ndev));

    ndev = 1; // !!!

    printf("# %d device%s found.\n", ndev, ndev > 1 ? "s" : "");
    for (i = 0; i < ndev; i++) {
        cudaSetDevice(i);
        cutilSafeCall(cudaMalloc((void**) &src[i], sizeof(char) * maxsize));
	dst[i] = (char *)malloc(sizeof(char) * maxsize);
    }
    printf("\n#\n# cudaMemcpy (DeviceToHost)\n#\n");
    ratio = 1.0; // !!!
    for (sized = 4096; sized < maxsize; sized *= ratio) {
        size = (size_t)sized;

	get_cputime(&lt, &st);
	for (j = 0; j < nloop/size; j++) {
	    for (i = 0; i < ndev; i++) {
  	        cudaSetDevice(i);
                cudaMemcpy(dst[i], src[i], size, cudaMemcpyDeviceToHost);
	    }
	}
	get_cputime(&lt, &st);
	printf("%d byte    %f sec    %f MB/s\n",
               size, lt, nloop/MEGA/lt);
	fflush(stdout);
    }
}

static void
theoretical_sendperf(int argc, char **argv)
{
    int maxsize = 1024 * 1024 * 10.0;
    double sized;
    double ratio = 2.5;
    int ndev;
    double throughput = 3100.0; // MB/s
    double latency    =   5.0; // us

    ndev = 1; // !!!

    printf("# theoretical model for %d device.\n", ndev, ndev > 1 ? "s" : "");
    printf("# throughput: %f  latency: %f\n", throughput, latency);
    printf("#\n# cudaMemcpy (HostToDevice)\n#\n");
    for (sized = 4096; sized < maxsize; sized *= ratio) {
        double usec = sized  / (throughput * MEGA) / MICRO + latency;

	printf("%d byte       %f MB/s\n",
               (size_t)sized, sized / usec);
	fflush(stdout);
    }
}


int
main(int argc, char **argv)
{
    int ndev;
    cutilSafeCall(cudaGetDeviceCount(&ndev));
    if (1 < ndev) {
        bcastperf(argc, argv);
    }
    //    sendperf(argc, argv);
    receiveperf(argc, argv);
//  theoretical_sendperf(argc, argv);

    fprintf(stderr, "going to quit...\n");
    sleep(1);
    exit(0);
}
