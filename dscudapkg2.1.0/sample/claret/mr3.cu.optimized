#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <cutil.h>

#define D2F_AND_COPY(n,host_mem,device_mem,float_mem) \
  for(int i=0;i<(n);i++) ((float *)(float_mem))[i]=(host_mem)[i];\
  CUDA_SAFE_CALL(cudaMemcpy((device_mem),(float_mem),sizeof(float)*(n),cudaMemcpyHostToDevice));

extern "C"
void MR3init(void)
{
}

extern "C"
void MR3free(void)
{
}

extern "C" __global__ 
void nacl_kernel(float *x, int n, int *atype, int nat, float *pol, float *sigm, float *ipotro,
		 float *pc, float *pd, float *zz, int tblno, float xmax, int periodicflag, 
		 float *force)
{
  int i,j,k,t;
  float xmax1,dn2,r,inr,inr2,inr4,inr8,d3,dr[3],fi[3], mf;
  float pb=0.338e-19/(14.39*1.60219e-19),dphir; 

#if 1

  if((periodicflag & 1)==0) xmax *= 2;
  xmax1 = 1.0f / xmax;
  i = blockIdx.x * blockDim.x + threadIdx.x;
  if(i<n){
    for(k=0; k<3; k++) fi[k] = 0.0f;
    for(j=0; j<n; j++){
      dn2 = 0.0f;
      for(k=0; k<3; k++){
	dr[k] =  x[i*3+k] - x[j*3+k];
	dr[k] -= rintf(dr[k] * xmax1) * xmax;
	dn2   += dr[k] * dr[k];
      }
      if(dn2 != 0.0){
	r     = sqrtf(dn2);
	inr   = 1.0f  / r;
	inr2  = inr  * inr;
	inr4  = inr2 * inr2;
	inr8  = inr4 * inr4;
	t     = atype[i] * nat + atype[j];
	d3    = pb * pol[t] * exp( (sigm[t] - r) * ipotro[t]);
	dphir = ( d3 * ipotro[t] * inr
		  - 6.0f * pc[t] * inr8
		  - 8.0f * pd[t] * inr8 * inr2
		  + inr2 * inr * zz[t] );
	for(k=0; k<3; k++) fi[k] += dphir * dr[k];
      }
    }
    for(k=0; k<3; k++) force[i*3+k] = fi[k];
  }

#else
  i = blockIdx.x * 64 + threadIdx.x;
  if (i < n) {
      for (k = 0; k < 3; k++) fi[k] = 0.0f;
      for (j = 0; j < n; j++) {
          for (k = 0; k < 3; k++) {
              dr[k] =  x[j*3+k] - x[i*3+k];
          }
          dn2 = 0.01f;
          for (k = 0; k < 3; k++) {
              dn2 += dr[k] * dr[k];
          }
          r = sqrtf(dn2);
          mf = 0.1f / (r * dn2);
          for (k = 0; k < 3; k++) {
              fi[k] += mf * dr[k];
          }
      }
      for (k = 0; k < 3; k++) force[i*3+k] = fi[k];
  }
#endif
}

extern "C"
void MR3calcnacl(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
    int i;
    float xmaxf=xmax;
    static int *d_atype;
    static float *d_x, *d_pol, *d_sigm, *d_ipotro, *d_pc, *d_pd, *d_zz, *d_force;
    static int firstcall = 1;

    // ensure force has enough size for temporary array
    if(sizeof(double)*n*3<sizeof(float)*nat*nat){
        fprintf(stderr,"** error : n*3<nat*nat **\n");
        exit(1);
    }

    //    fprintf(stderr, "n:%d  nat:%d\n", n, nat);

    // allocate global memory
    if (firstcall) {
        firstcall = 0;
        CUDA_SAFE_CALL(cudaMalloc((void**)&d_x,      sizeof(float)*n*3));
        CUDA_SAFE_CALL(cudaMalloc((void**)&d_pol,    sizeof(float)*nat*nat));
        CUDA_SAFE_CALL(cudaMalloc((void**)&d_sigm,   sizeof(float)*nat*nat));
        CUDA_SAFE_CALL(cudaMalloc((void**)&d_ipotro, sizeof(float)*nat*nat));
        CUDA_SAFE_CALL(cudaMalloc((void**)&d_pc,     sizeof(float)*nat*nat));
        CUDA_SAFE_CALL(cudaMalloc((void**)&d_pd,     sizeof(float)*nat*nat));
        CUDA_SAFE_CALL(cudaMalloc((void**)&d_zz,     sizeof(float)*nat*nat));
        CUDA_SAFE_CALL(cudaMalloc((void**)&d_atype,  sizeof(int)*n));
        CUDA_SAFE_CALL(cudaMalloc((void**)&d_force,  sizeof(float)*n*3));
    }

    // copy from host to GPU
    D2F_AND_COPY(n*3,x,d_x,force);
    D2F_AND_COPY(nat*nat,pol,d_pol,force);
    D2F_AND_COPY(nat*nat,sigm,d_sigm,force);
    D2F_AND_COPY(nat*nat,ipotro,d_ipotro,force);
    D2F_AND_COPY(nat*nat,pc,d_pc,force);
    D2F_AND_COPY(nat*nat,pd,d_pd,force);
    D2F_AND_COPY(nat*nat,zz,d_zz,force);
    CUDA_SAFE_CALL(cudaMemcpy(d_atype,atype,sizeof(int)*n,cudaMemcpyHostToDevice));

    // call GPU kernel
    //    dim3 threads(64, 1, 1);
    //    dim3 grid((n+63)/64, 1, 1);
    int nth = 64;
    dim3 threads(nth, 1, 1);
    dim3 grid((n+nth-1)/nth, 1, 1);
    nacl_kernel<<< grid, threads >>>(d_x,n,d_atype,nat,d_pol,d_sigm,d_ipotro,
                                     d_pc,d_pd,d_zz,tblno,xmaxf,periodicflag,d_force);
    CUT_CHECK_ERROR("Kernel execution failed");

    // copy GPU result to host, and convert it to double
    CUDA_SAFE_CALL(cudaMemcpy(force,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost));
    for(i=n*3-1;i>=0;i--) force[i]=((float *)force)[i];

#if 0
    static int cnt = 0;
    fprintf(stderr, "cnt : %d\n", cnt);
    for (i = 0; i < n; i++) {
        fprintf(stderr, "% 3d  %+5.3e %+5.3e %+5.3e\n",
                i, force[i*3+0], force[i*3+1], force[i*3+2]);
    }
    fprintf(stderr, "\n");
    if (cnt++ > 2) exit(0);
#endif
}
