#!/usr/bin/ruby -w

$LOAD_PATH.unshift("#{File.dirname($0)}/../lib/")

require 'English'
require 'optparse'

# DSCUDA modules
require 'utility'

include Utility

Dscudaincdir = "#{File.dirname($0)}/../include/"
Dscudalibdir = "#{File.dirname($0)}/../lib/"
Dscudatmpdir = './dscudatmp'
EndOfDscudaHeader = "#pragma dscuda endofheader\n"

Cudapath      = ENV['CUDAPATH'] ? ENV['CUDAPATH'] : '/usr/local/cuda'
Nvcc          = ENV['NVCC'] ? ENV['NVCC'] : "#{Cudapath}/bin/nvcc"
Cudaincdir    = "#{Cudapath}/include"
Cudasdkincdir4 = (ENV['CUDASDKPATH'] ? ENV['CUDASDKPATH'] : "#{Cudapath}/NVIDIA_GPU_Computing_SDK") + "/C/common/inc"
Cudasdkincdir5 = (ENV['CUDASDKPATH'] ? ENV['CUDASDKPATH'] : "#{Cudapath}/samples") + "/common/inc"

NvccPhaseOptsRe = %r[\A ( --cuda | --cubin | --ptx | --gpu | --preprocess | --generate-dependencies | --compile | --link | --lib | --run | -cuda | -cubin | -ptx | -gpu | -E | -M | -c | -link | -lib | -run) \z]x
Cxx           = ENV['CXX'] ? ENV['CXX'] : "g++"

# AttrRe = %r{ (?: __attribute__\(\( (?: (?! __attribute__) .)+ \)\) \s* ) }xm
AttrRe = %r{ (?: __attribute__\(\( [^\n]+ \)\) \s* ) }xm

# regexp to match CUDA kernel def/prototype preprocessed by 'nvcc -P'.
# e.g.  __attribute__((global)) void myKernel
#
CudaKernelPrcdRe = %r{
                      (?: (template \s* <[^>]*>) \s+)* #1 template <>
                      \b ( \s* extern \s+ "C" \s+)*    #2 extern "C"
                      \b ( \s* static \s+)*            #3 static
                      #{AttrRe}* # may have __attribute__(( )) tokens before __attribute__((global))
                      __attribute__\(\(global\)\) \s*
                      #{AttrRe}* # may have __attribute__(( )) tokens after __attribute__((global))
                      (?: \s* \w+ \b | \s* \* )* \s* 
}xm

# regexp to match CUDA kernel def/prototype.
# e.g.  __global__ void myKernel
#
CudaKernelRawRe  = %r{
                      (?: (template \s* <[^>]*>) \s+)* #1 template <>
                      \b ( \s* extern \s+ "C" \s+)*    #2 extern "C"
                      \b ( \s* static \s+)*            #3 static
                      #{AttrRe}* # may have __attribute__(( )) tokens before __global__
                      __global__ \s+
                      #{AttrRe}* # may have __attribute__(( )) tokens after __global__
                      (?: \s* \w+ \b | \s* \* )* \s* 
}xm

#
# parse command-line arguments and then update the application context
# according to the result.
#
def parse_commandline(ac)

    umsg = <<-"EOUMSG"
  usage: #{$0} [options] inputfile(s)...
  options:
      --infile <file>        : a .cu input file.
      -i <file>

      -o <file>              : an output file.

      --cpp                  : use C preprocessor 'cpp -E' to expand macros. by default use 'nvcc -E'.
                              intended for use in environment with no CUDA installed.

      --prm                  : prohibit auto renaming of the main() function when compiling the source
                               for the server.

      --verbose[=level]      : be verbose. the level can optionally be given. [2]
      -v[level]                the higher level gives the more verbose messages. level 0 for silence.

      --help                 : print this help.
      -h
  Note that all options not listed above are implicitly passed on to nvcc.

EOUMSG

  argsunused = []
  until $ARGV.empty?
    arg = $ARGV.shift
    case arg
      when /\A (?: --infile | -i ) \z/x
      ac[:infile] = ''
      while $ARGV[0] && $ARGV[0] !~ /\A -/x do # next arg is a filename.
        ac[:infile] += $ARGV.shift + ' '
      end

      when /\A -o \z/x
      ac[:outfile] = $ARGV.shift

      when /\A -I (.+) \z/x
      ac[:incpath]   += " -I" + $1

      when /\A -I \z/x
      hpath = $ARGV.shift
      ac[:incpath]   += " -I" + hpath

      when /\A -D (.+) \z/x
      ac[:cppdef]   += " -D" + $1

      when /\A -D \z/x
      defval = $ARGV.shift
      ac[:cppdef]   += " -D" + defval

      # verbose-option with level.
      when /\A (?: --verbose= | -v ) (\d+)\b/x
      ac[:verbose] = $1.to_i

      # compilation phase specifier not applicable.
      when /\A (?: -lib | --lib ) \z/x
      puts "  compilation phase '#{$1}' not supported."
      exit 1

      # compilation phase specifier
      when NvccPhaseOptsRe
      phase = $1
      if (ac[:phase] != '')
        puts "cannot specify multiple phase options ('#{ac[:phase]}' '#{phase}')."
        exit 1
      end
      ac[:phase] += phase

      # prohibit auto renaming main() function.
      when /\A (?: -prm | --prm ) \z/x
      ac[:prm] = true

      # verbose-option without level. use default+1.
      when /\A (?: --verbose | -v ) \z/x
      ac[:verbose] = 3

      when /\A (?: --help | -h ) \z/x
      puts umsg
      exit
      else
      argsunused.push arg
    end # case
  end

  ac[:argsunused] = argsunused

  unless ac[:infile]
    puts "No input file given."
    puts umsg
    exit 1
  end

  return ac
end

def execcmd(cmd)
  puts cmd
  unless system(cmd)
    raise "'#{cmd}' failed."
  end
end

#
# The main routine starts from here.
#
def toplevel
  app_context = {
    :infile      => nil,
    :outfile     => '',
    :incpath     => '',
    :cppdef      => '',
    :phase       => '',
    :prm         => false,
    :verbose     => 2,
  }
  app_context = parse_commandline(app_context)
  @verbose   = app_context[:verbose]
  infiles    = app_context[:infile].split(/\s+/)
  outfile    = app_context[:outfile]
  incpath    = app_context[:incpath]
  cppdef     = app_context[:cppdef]
  phase      = app_context[:phase]
  prm        = app_context[:prm]
  argsunused = app_context[:argsunused]
  vinfo("verbose:#{@verbose}")
  vinfo("infiles:" + infiles.join(' '))
  vinfo("phase:'#{phase}'")
  nvccarg = ' ' + argsunused.join(' ')
  nvccarg += " #{incpath} #{Dscudadef} "
  nvccarg = nvccarg[1..-1]
  vinfo("Args passed on to nvcc : #{nvccarg}")

  tcponly = false
  if cppdef =~ /-DTCP_ONLY=1\b/x
    tcponly = true
  end

  unless File.exist? Dscudatmpdir
    Dir.mkdir Dscudatmpdir
  end

  create_obj = false
  create_exe = false
  if phase =~ /\A (?: --compile\b | -c\b ) /x
    create_obj = true
    phase = '-c'
  end

  if phase == '' || (phase =~ / (?: --link | -link ) /x)
    create_exe = true
    phase = '-c'
  end

  if (1 < infiles.size && !create_exe)
    puts "  cannot specify multiple inputs (#{infiles.join(' ')}) for compilation phase '#{phase}'."
    exit 1
  end

  objs = []
  infiles.each { |f|
    if File.extname(f) == '.o'
      objs.push(f)
      next
    end

    is_cufile =  File.extname(f) == '.cu' ? true : false

    objbase = File.basename(outfile, '.*')
    if create_exe || (create_obj && outfile == '')
      objbase = File.basename(f, '.*')
    end

    nvobj = ''
    dsobj = ''
    if create_obj || create_exe
      nvobj = objbase + '.svr.o'
      dsobj = objbase + '.o'
      objs.push(dsobj)
    else
      nvobj = outfile
    end

    outopt = objbase == '' ? '' : '-o ' + nvobj
    if prm
      infile_scu = f
    else
      infile_scu = cufile2svrcufile(f)
    end
    cmd = "#{Nvcc} -D__DSCUDA_SERVER__=1 #{nvccarg} #{cppdef} #{phase} -I#{Dscudaincdir} -I#{Cudasdkincdir4} " +
          "-I#{Cudasdkincdir5} #{outopt} #{infile_scu}"
    execcmd(cmd)

    if (create_obj || create_exe)
      outopt = '-o ' + dsobj
 
      if is_cufile
        # append #include <dscuda.h> to .cu file.
        vinfo("generating temporal .cu...")
        infile_tmpcu = cufile2tmpcufile(f, incpath, cppdef)
        vinfo("#{infile_tmpcu} generation done.")

        # preprocess the temporal .cu file to generate .cup file.
        infile_cup = Dscudatmpdir + '/' + File.basename(infile_tmpcu, '.cu') + '.cup'
        cmd = "#{Nvcc} #{nvccarg} #{cppdef} -D__DSCUDA_CLIENT__=1  -E -I#{Dscudaincdir} -I#{Cudasdkincdir4} -I#{Cudasdkincdir5} " +
          " -o #{infile_cup} #{infile_tmpcu}"
        execcmd(cmd)
        vinfo("#{infile_cup} generation done.")

        # substitute CUDA C expressions with DS-CUDA wrappers.
        infile_dscup = cupfile2dscupfile(infile_cup, incpath, cppdef)

        # generate a host code.
        cmd = "#{Nvcc} #{nvccarg} #{cppdef} #{phase} -I#{Dscudaincdir} -I#{Cudasdkincdir4} -I#{Cudasdkincdir5} #{outopt} #{infile_dscup}"
        #      cmd = "nvcc #{phase} #{outopt} #{File.basename(f, '.cu')}.ds.cup"
        execcmd(cmd)
      else
        cmd = "#{Nvcc} #{nvccarg} #{cppdef} #{phase} -I#{Dscudaincdir} -I#{Cudasdkincdir4} -I#{Cudasdkincdir5} #{outopt} #{f}"
        execcmd(cmd)
      end
    end
  }

  if create_exe
    dsobjs = objs.join(' ')
    nvobjs = ''
    objs.each {|obj|
      nvobj = File.basename(obj, '.o') + '.svr.o'
      nvobjs += (File.exist?(nvobj) ? nvobj : obj) + ' '
    }
    exebase = outfile == '' ? 'a.out' : outfile

    puts "nvobjs:#{nvobjs}\n"
    puts "dsobjs:#{dsobjs}\n"

    outopt = outfile == '' ? '-o a.out.svr' : "-o #{outfile}_tcp.svr"
    cmd = "#{Nvcc} #{nvccarg} -L#{Dscudalibdir} #{outopt} #{nvobjs} -ldscudasvr_tcp -lcudadevrt -lcuda -lpthread"
    execcmd(cmd)

    if !tcponly
      outopt = outfile == '' ? '-o a.out.svr' : "-o #{outfile}_ibv.svr"
      cmd = "#{Nvcc} #{nvccarg} -L#{Dscudalibdir} #{outopt} #{nvobjs} -ldscudasvr -lcudadevrt -lcuda -lrdmacm -libverbs -lpthread"
      execcmd(cmd)
    end

    openmpopt = '-Xcompiler -fopenmp'
    outopt = '-o ' + exebase + '_tcp'
    cmd = "#{Nvcc} #{openmpopt} --cudart=shared #{nvccarg} -L#{Dscudalibdir} #{outopt} #{dsobjs} -ldscuda_tcp"
    execcmd(cmd)

    if !tcponly
      outopt = '-o ' + exebase + '_ibv'
      cmd = "#{Nvcc} #{openmpopt} --cudart=shared #{nvccarg} -L#{Dscudalibdir} #{outopt} #{dsobjs} -ldscuda_ibv -lrdmacm -libverbs -lpthread"
      execcmd(cmd)
    end
  end
end

#
# look for a file named 'fname' in 'searchpath'.
# returns full path name for it.
#
def locate_file(fname, searchpath)
  searchpath.each { |path|
    fullname = "#{path}/#{fname}"
    # "fullname:#{fullname}"
    return fullname if (File.exist? fullname) 
  }
  vwarn("file #{fname} not found.")
  return nil
end

#
# look for #pragma once directive inside a file.
# returns found_or_not & contents of the file.
# the #pragma once directive(s) found are not included
# in the returing contents.
#
def include_onlyonce? (file)
  found = false
  dststr = ''
  open(file, 'r').each_line { |line|
    if line =~ /\A \s* \#pragma \s+ once \s* \z/xs
      found = true 
    else
      dststr += line
    end
  }
  return found, dststr
end

#
# recursively expand #include "foo.h" directives in srcstr,
# while all other directives are remain unchanged.
# note that :
#   - #include <foo.h> directives are not expanded.
#   - #pragma once directives inside #include "foo.h" files are properly handled.
#
def expand_inclusion(srcstr, searchpath, parent, onlyonce_files, level = 0)
  dststr = ''
  srcstr.each_line { |line|
    if line =~ /\A \s* \#include \s* "(.*)" $/xms
      hname = $1
      if onlyonce_files.include? hname
        vinfo('  ' * level + "don't include #{hname} included from #{parent}. " +
              "it conains #pragma once, and already included.")
        next # omits the line.
      end
      child_srcstr = locate_file(hname, searchpath)
      if child_srcstr
        onlyonce, contents = include_onlyonce?(child_srcstr)
        onlyonce_files.push hname if onlyonce
        onlyoncemsg = onlyonce ? ' only once' : ''
        vinfo('  ' * level + "expand #{hname}#{onlyoncemsg}, included from #{parent}.")

        contents = "#pragma begin #{hname}\n" + contents + "#pragma end #{hname}\n"

        dststr += expand_inclusion(contents, searchpath, hname, onlyonce_files, level + 1)

      else
        raise "A file '#{hname}' included from #{parent} not found."
      end  
    else
      dststr += line
    end
  }
  dststr
end

def filter_cpp(srcstr, ipath, cppdef)
  instream = "| cpp -x c++ #{ipath} #{cppdef} <<END_OF_SRC\n#{srcstr}\nEND_OF_SRC\n"
  dststr = open(instream, 'r').read
  dststr
end

def filter_cpp_for_regions(srcstr, ipath, cppdef)

  dststr = ''
  bufstr = ''
  applycpp = false
  srcstr.each_line { |line|
    if line =~ /\#pragma \s+ dscuda \s+ cpp \s+ begin/xms
      applycpp = true
    end
    if line =~ /\#pragma \s+ dscuda \s+ cpp \s+ end/xms
      applycpp = false
      dststr += filter_cpp(bufstr, ipath, cppdef)
      bufstr = ''
    end
    if applycpp
      bufstr += line
    else
      dststr += line
    end
  }

  if applycpp
      dststr += filter_cpp(bufstr, ipath, cppdef)
  end


  dststr
end

# Substitute CUDA kernel calls with correspondent remote call stubs.
# Default shmem size & stream are added if necessary.
#
# eg)
#     mykernel<<<g, b>>>(a0, a1, a2);
#
#     => cudaConfigureCall(g, b , 0, NULL);
#        mykernel(a0, a1, a2);
#
# eg)
#     funcp = mykernel;
#     (*funcp)<<<g, b>>>(a0, a1, a2);
#
#     => cudaConfigureCall(g, b , 0, NULL);
#        (*funcp)(a0, a1, a2);
#
def wrap_kernelcalls(srcstr)
  dststr = ''
  srcstr, dststr = skip_dscuda_header(srcstr)

  begin
    nonlit, lit, left = srcstr.eat_a_c_literal()
    srcstr = left

    if nonlit =~ /\b ( (?: \w+ \:\:)*  \w+) \s* (?: < ( \s* [^<]*?) > )? \s* <<< \s* ( .*? ) >>> \s* \( /xms

      strpre = $`
      strmatched = $&
      strpost = $'
      kname = $1
      kts = $2
      kps = $3

      # capture the argumens of the CUDA API into arg0.
      (matched, dummy, args0, postmatch) = ("(" + strpost).balanced_c_exp('(', ')', true)
      unless matched # malformed function call. don't touch.
        dststr += nonlit + lit
        next
      end
      args0 = args0.split_c_exp_list
      postmatch = postmatch.gsub(/\A \s* ;/xms, '')  # remove the trailing semicolon.

      # generate a wrapper call.
      args0 = args0.join(', ')
      nkdir = kps.split_c_exp_list.size  # split kernel parameter list and count the number.
      if nkdir < 3
        kps += ', 0'  # append 3rd arg (shared mem size).
      end
      if nkdir < 4
        kps += ', 0'  # append 4th arg (stream id).
      end
      kts = kts ? "<#{kts}>" : ''
      args0 = (args0.size > 0 ? "#{args0}" : '')
      str  = "cudaConfigureCall(#{kps});\n"
      str += "        #{kname}#{kts}(#{args0});\n"
      vinfo("A kernel call found : #{strmatched.gsub(/\n/, ' ')[0..100]}...")
      vinfo("Substituted with    : #{str.gsub(/\n/, ' ')}")
      dststr += strpre + str
      srcstr = postmatch + lit + srcstr
    else
      dststr += nonlit + lit
    end

  end while srcstr.size > 0

  return dststr
end

#
# Eat 'srcstr' until the end of dscuda.h header.
# Returns eaten string and left string.
#
def skip_dscuda_header(srcstr)
  if srcstr =~ /^#{Regexp.escape(EndOfDscudaHeader)}/
    dststr = $` + $&
    srcstr = $'
  else
    vinfo("  dscuda header not found.\n")
    open('errlog', 'w') { |f|
      f.puts srcstr
    }
    exit 1
  end

  return srcstr, dststr
end

# substitute CUDA API calls with correspondent dscuda wrapper.
#
# eg) cudaMemcpyToSymbol(symbol, src, count, offset, kind)
#     => dscudaMemcpyToSymbolWrapper(moduleid, "symbol", src, count, offset, kind)
#
#     cudaBindTextureToArray(texture, array, desc)
#     => dscudaBindTextureToArrayWrapper(moduleid, "texture", texture, array, desc)
#
def wrap_cuda_apicalls(apinames, srcstr)
  dststr = srcstr
  apinames.each { |apiname|
    srcstr = dststr

    srcstr, dststr = skip_dscuda_header(srcstr)
    substituter = "substituter_#{apiname}".intern

    begin
      nonlit, lit, left = srcstr.eat_a_c_literal()
      srcstr = left

      case nonlit
      when / \b #{apiname} \b \s* \( /xms
        strpre = $`
        strmatched = $&
        strpost = $'

        # capture the argumens of the CUDA API into arg0.
        (matched, dummy, args0, postmatch) = ("(" + strpost).balanced_c_exp('(', ')', true)
        unless matched # malformed function call. don't touch.
          dststr += nonlit + lit
          next
        end
        args0 = args0.split_c_exp_list

        # substitute the apicall.
        dststr += strpre + send(substituter, args0)
        srcstr = postmatch + lit + srcstr

      else # no more API call.
        dststr += nonlit + lit
      end # case

    end while left.size > 0
  } # apiname

  return dststr
end

def substituter_cudaFuncGetAttributes(args)
  strtmp = <<-"END_OF_TMP"
    dscudaFuncGetAttributesWrapper(dscudaLoadModule(0, 0), %args%)
END_OF_TMP

  args[1] = args[1].double_quote
  args = args.join(', ')

  # generate a wrapper call.
  str = strtmp.gsub(/\n/, '')
  str = str.gsub(/%args%/, args)
  str
end

def substituter_cudaMemcpyToSymbol(args)
  strtmp = <<-"END_OF_TMP"
    dscudaMemcpyToSymbolWrapper(0, %args%)
END_OF_TMP

  args[0] = args[0].double_quote
  args = args.join(', ')

  # generate a wrapper call.
  str = strtmp.gsub(/\n/, '')
  str = str.gsub(/%args%/, args)
  str
end

def substituter_cudaMemcpyToSymbolAsync(args)
  strtmp = <<-"END_OF_TMP"
    dscudaMemcpyToSymbolAsyncWrapper(0, %args%)
END_OF_TMP

  args[0] = args[0].double_quote
  args = args.join(', ')

  # generate a wrapper call.
  str = strtmp.gsub(/\n/, '')
  str = str.gsub(/%args%/, args)
  str
end

def substituter_cudaMemcpyFromSymbol(args)
  strtmp = <<-"END_OF_TMP"
    dscudaMemcpyFromSymbolWrapper(0, %args%)
END_OF_TMP

  args[1] = args[1].double_quote
  args = args.join(', ')

  # generate a wrapper call.
  str = strtmp.gsub(/\n/, '')
  str = str.gsub(/%args%/, args)
  str
end

def substituter_cudaMemcpyFromSymbolAsync(args)
  strtmp = <<-"END_OF_TMP"
    dscudaMemcpyFromSymbolAsyncWrapper(0, %args%)
END_OF_TMP

  args[1] = args[1].double_quote
  args = args.join(', ')

  # generate a wrapper call.
  str = strtmp.gsub(/\n/, '')
  str = str.gsub(/%args%/, args)
  str
end

def substituter_cudaBindTexture(args)
  strtmp = <<-"END_OF_TMP"
    dscudaBindTextureWrapper(0, %args%)
END_OF_TMP
  arg1q = args[1].double_quote
  args = args.join(', ')

  # generate a wrapper call.
  str = strtmp.gsub(/\n/, '')
  str = str.gsub(/%args%/, "#{arg1q}, #{args}")
  str
end

def substituter_cudaBindTexture2D(args)
  strtmp = <<-"END_OF_TMP"
    dscudaBindTexture2DWrapper(0, %args%)
END_OF_TMP
  arg1q = args[1].double_quote
  args = args.join(', ')

  # generate a wrapper call.
  str = strtmp.gsub(/\n/, '')
  str = str.gsub(/%args%/, "#{arg1q}, #{args}")
  str
end

def substituter_cudaBindTextureToArray(args)
  strtmp = <<-"END_OF_TMP"
    dscudaBindTextureToArrayWrapper(0, %args%)
END_OF_TMP
  arg0q = args[0].double_quote
  args = args.join(', ')

  # generate a wrapper call.
  str = strtmp.gsub(/\n/, '')
  str = str.gsub(/%args%/, "#{arg0q}, #{args}")
  str
end

def cufile2svrcufile(cufile)
#  tmpcufile = Dscudatmpdir + '/' + File.basename(cufile, '.*') + '.svr.cu'
  tmpcufile = File.basename(cufile, '.*') + '.svr.cu'

  cutxt = open(cufile, 'r').read
  cutxt = cutxt.gsub(/\b main\(/x, '_unused_main(')
  dststr = cutxt

  open(tmpcufile, "w") { |f|
    f.puts dststr
  }
  vinfo("wrote '#{tmpcufile}'.")

  return tmpcufile

end

def cufile2tmpcufile(cufile, incpath, cppdef)
  tmpcufile = Dscudatmpdir + '/' + File.basename(cufile)

  dststr = %Q[#include "dscuda.h"\n]
  dststr += EndOfDscudaHeader

  cutxt = open(cufile, 'r').read
  dststr += cutxt

  open(tmpcufile, "w") { |f|
    f.puts dststr
  }
  vinfo("wrote '#{tmpcufile}'.")

  return tmpcufile

end

def cupfile2dscupfile(cupfile, incpath, cppdef)
  dscupfile = Dscudatmpdir + '/' + File.basename(cupfile, '.cup') + '.ds.cup'

  dststr = ''

=begin
  open(cupfile, 'r').each_line { |line|
    dststr += line
  }
=end
  dststr = open(cupfile, 'r').read

  dststr = substitute_apicalls(dststr, CudaKernelPrcdRe)

  open(dscupfile, "w") { |f|
    f.puts dststr
  }
  vinfo("wrote '#{dscupfile}'.")

  return dscupfile
end

def substitute_apicalls(srccode, kernel_re)

  # generate DSCUDA-kernel stubs.
  vinfo('parsing kernel definitions...')
  kernels, srccode = parse_kernel_def(srccode, kernel_re)

  # substitute CUDA-kernel calls with DSCUDA-kernel stub calls.
  vinfo('wrapping kernel calls...')
  srccode = wrap_kernelcalls(srccode)

  # substitute some CUDA API calls with correspondent dscuda wrapper.
  apinames = ["cudaMemcpyToSymbol",
              "cudaMemcpyToSymbolAsync",
              "cudaMemcpyFromSymbol",
              "cudaMemcpyFromSymbolAsync",
              "cudaBindTexture",
              "cudaBindTexture2D",
              "cudaBindTextureToArray",
              "cudaFuncGetAttributes",
             ]

  vinfo('wrapping CUDA API calls...')
  srccode = wrap_cuda_apicalls(apinames, srccode)

end

# kernel definitions in srcstr are parsed.
# info for each kernel are returned as kdef.
# original defs in srcstr are replaced with dummy ones and returned as dststr.
#
# eg) __global__ void myKernel(float *a, float *b) {
#         int i = threadIdx.x;
#         b[i] = a[i] * 2;
#     }
#
#     => kdefs, dststr
#        where kdefs = [ [:name=myKernel, :arg=[a,b], ...], ]
#              dststr = "__global__ void myKernel(float *a, float *b) { /* nop */ }"
#
def parse_kernel_def(srcstr, kernel_re)

  cudaKernelRe = %r{ #{kernel_re} (\w+) \s* #4 kernel name }xm

  kdefs = []
  dststr = ''
  strleft = srcstr

  kid = 0
  until srcstr.empty?
    if srcstr !~ cudaKernelRe
      dststr += srcstr
      break
    end
    strpre  = $`
    strbody = $&
    strleft = $'
    kdef = {}
    kdef[:template] = $1
    kdef[:extc] = $2
    kdef[:static] = $3
    kdef[:name] = $4
    kdef[:id] = kid
    kdef[:arg] = ''
    kdef[:argtypes] = []
    kdef[:argnames] = []

    (matched, pre, args, strleft) = strleft.balanced_c_exp('(', ')', true)

    raise "No arg list found for kernel #{kdef[:name]}." unless matched

    if strleft =~ /\A \s* ; /xms  # skip prototype. we are interested in function definition, but not in prototype.
      vinfo("A kernel prototype found : #{strbody.gsub(/\n/, ' ')[0..100]}...")
      srcstr = strleft
      dststr += strpre + strbody + pre + '(' + args + ')'
      next
    end
    vinfo("A kernel definition found : #{strbody.gsub(/\n/, ' ')[0..100]}...")

    kid += 1
    args = args.strip
    kdef[:arg] = args
    args = args.split(/\s*,\s*/xms)
    vinfo("kernel '#{kdef[:template]} #{kdef[:name]}' diagnostics:")
    args.each_with_index { |arg, i|
      arg = arg.gsub(/ = \s* .* \z /xms, '') # remove a default argument.

      vinfo("  arg#{i}      : #{arg}")

      decorator = /(?:\w+::)*\w\s*/
      unless arg =~ /\A (
                          (?:
                            (?:
                              # type name with optional C-template arg <>
                              #{decorator} \s* (?:
                                         <#{decorator}+ (?: \s*,\s*#{decorator})* >
                                      )? \s* |
                              # dereference operator
                              \* \s* 
                            )+
                            # the last word may or may not be decorated with *, [], or ().
                            # eg) (*x)[3]
                            [^\w]* (\w+)
                          )* 
                        ) /xms
        raise "arg (#{arg}) could not parsed."
      end
      tokens = $1.split(/(?:\s+|\b)/).collect { |token| token.strip}.compact
      # puts tokens.inject("token: "){ |buf, token| buf << token + '|'}
      type = tokens[0..-2].join(' ')
      name = tokens[-1]
      isptr = (arg =~ /\*/) ? true : false
      type = '*' if isptr
      kdef[:argnames].push name
      case type
      when / \*  /x                  # any pointer.
        kdef[:argtypes].push 'dscudaArgTypeP'

      when /\b float \z/x            # float.
        kdef[:argtypes].push 'dscudaArgTypeF'

      when /\b (?: long \b | short \b ) (\s+ int)? \z/x # non 32-bit int variant.
        kdef[:argtypes].push type
        vwarn "CUDA kernel '#{kdef[:name]}' argument '#{name}'  custom type '#{type}'."

      when /\A (\w*\s+)* int \s* \z/x       # int, maybe decorated with const or unsigned.
        kdef[:argtypes].push 'dscudaArgTypeI'
        vwarn "CUDA kernel '#{kdef[:name]}' argument '#{name}' of type '#{type}', treated as int." if $1

      else                           # anything not matched above, including long/short int, char, double, struct etc.
        kdef[:argtypes].push type
        vwarn "CUDA kernel '#{kdef[:name]}' argument '#{name}'  custom type '#{type}'."
      end
    }
    vinfo("  id        : #{kdef[:id]}")
    vinfo("  arg types : #{kdef[:argtypes].join('|')}")
    vinfo("  arg names : #{kdef[:argnames].inject{ |sum,a|sum+=sprintf("%14s",'|'+a)}}")

    (matched, pre, body, strleft) = strleft.balanced_c_exp('{', '}', true) # skip decl body.

    kdefs.push kdef
    srcstr = strleft
    dskernel = kernel_stub_def(kdef)
    dststr += strpre + strbody + "(#{kdef[:arg]})\n{\n#{dskernel}\n}\n\n"

  end

  # remove __global__ modifier. otherwise nvcc try to setup code for kernel launch,
  # causing unwanted reference to cudaSetUpArgument etc.
  dststr = dststr.gsub(/__global__/) { '' }
  dststr = dststr.gsub(/__attribute__\(\(global\)\)/) { '' }

  return kdefs, dststr
end

#
# generate the body of the stub for a given CUDA kernel.
#
def kernel_stub_def(kdef)
  pretmp = <<-'END_OF_PRETMP'
    static void *_kadr = 0;
    int _off = 0;
    void *_uva;
    char _key[1024];

    _key[0] = 0;
    if (!_kadr) {
        strncpy(_key, __PRETTY_FUNCTION__, strlen(__PRETTY_FUNCTION__));
        _key[strlen(__PRETTY_FUNCTION__)] = 0;
    }
END_OF_PRETMP

  argitmp = <<-'END_OF_ARGITMP'
    // push arg%nargs%.
    _off = dscudaAlignUp(_off, __alignof(int));
    ::cudaSetupArgument(&%argname%, sizeof(%argname%), _off);
    _off += sizeof(%argname%);

END_OF_ARGITMP

  argftmp = <<-'END_OF_ARGFTMP'
    // push arg%nargs%.
    _off = dscudaAlignUp(_off, __alignof(float));
    ::cudaSetupArgument(&%argname%, sizeof(%argname%), _off);
    _off += sizeof(%argname%);

END_OF_ARGFTMP

  argvtmp = <<-'END_OF_ARGVTMP'
    // push arg%nargs%.
    _off = dscudaAlignUp(_off, __alignof(%argname%));
    ::cudaSetupArgument(&%argname%, sizeof(%argname%), _off);
    _off += sizeof(%argname%);

END_OF_ARGVTMP

  argptmp = <<-'END_OF_ARGPTMP'
    // push arg%nargs%.
    _off = dscudaAlignUp(_off, 8);
    ::cudaSetupArgumentOfTypeP(%argname%, sizeof(_uva), _off);
    _off += sizeof(_uva);

END_OF_ARGPTMP

  posttmp = <<-'END_OF_POSTTMP'
    dscudaLaunchWrapper(&_kadr, _key);
END_OF_POSTTMP

  dststr  = pretmp
  argtypes = kdef[:argtypes].dup
  kdef[:argnames].each_with_index { |argname, i|
    argtype = argtypes.shift

    case argtype
    when /\A dscudaArgTypeP \z/x
      str = argptmp.dup
    when /\A dscudaArgTypeI \z/x
      str = argitmp.dup
    when /\A dscudaArgTypeF \z/x
      str = argftmp.dup
    else # custom type
      str = argvtmp.dup
    end
    str = str.gsub(/%nargs%/, "#{i}")
    str = str.gsub(/%argname%/, argname)

    dststr += str;
  }
  dststr += posttmp
  return dststr
end

#
# substitute original kernel defs with DSCUDA-kernel defs.
#
def append_kernel_stub(srcstr, kdefs, kernel_re)
  pretmp = <<-'END_OF_PRETMP'
void
%kname%(%kargs%)
{
    int _narg = %kargc%;
    int _grid[3], _block[3];
    RCArg _arg[%kargc%], *_argp;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (%mangle%) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, 0);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
//        WARN(3, "mangled name : %s\n", mangledname_);
    }

END_OF_PRETMP

  posttmp = <<-'END_OF_POSTTMP'
        _grid[0] = _gdim.x; _grid[1] = _gdim.y; _grid[2] = _gdim.z;
        _block[0] = _bdim.x; _block[1] = _bdim.y; _block[2] = _gdim.z;
        dscudaLaunchKernelWrapper(dscudaLoadModule(0, 0), %kid%, mangledname_,
                                 _grid, _block, _smemsize, (RCstream)_stream,
                                 _narg, _arg);
    }
END_OF_POSTTMP

  argptmp = <<-'END_OF_ARGPTMP'

    // a pointer to a device-address '%argname%'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)%argname%;
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;

END_OF_ARGPTMP

  argftmp = <<-'END_OF_ARGFTMP'

    // a float '%argname%'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(float));
    _argp->type = dscudaArgTypeF;
    _argp->offset = _off;
    _argp->val.floatval = %argname%;
    _argp->size = sizeof(float);
    _off += _argp->size;

END_OF_ARGFTMP

  argitmp = <<-'END_OF_ARGITMP'

    // an integer '%argname%'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = %argname%;
    _argp->size = sizeof(int);
    _off += _argp->size;

END_OF_ARGITMP

  argvtmp = <<-'END_OF_ARGVTMP'

    // a variable '%argname%' of type '%argtype%'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(%argtype%));
    _argp->type = dscudaArgTypeV;
    _argp->offset = _off;

    memcpy(_argp->val.customval, (char*)&%argname%, sizeof(%argtype%));
    _argp->size = sizeof(%argtype%);
    _off += _argp->size;

END_OF_ARGVTMP

  srcstr, dststr = skip_dscuda_header(srcstr)

  kdefs.each { |kdef|
    vinfo("append a stub for remote call to #{kdef[:name]}.")
    kstr = ''
    # preamble
    kstr << "\n"
    kstr << "/*\n"
    kstr << " * stub for remote call to #{kdef[:name]}.\n"
    kstr << " */\n"
    template = kdef[:template] ? kdef[:template] + ' ' : ''
    str = template
    str += pretmp
    str = str.gsub(/%kname%/, "#{kdef[:name]}")
#    if kdef[:arg] =~ / \A \s* \z /xms
    if kdef[:arg] =~ / \A \s* \z /xms or kdef[:arg] =~ / \A \s* void \s* \z /xms
      str = str.gsub(/%kargs%/, '') # kernel has no arg.
    else
      str = str.gsub(/%kargs%/, "#{kdef[:arg]}")
    end
    str = str.gsub(/%kargc%/, "#{kdef[:argnames].size}")
    str = str.gsub(/%mangle%/, kdef[:extc] ? '0' : '1')

    kstr << str

    # arguments for IB Verb
    argtypes = kdef[:argtypes].dup
    kdef[:argnames].each { |argname|
      argtype = argtypes.shift
      case argtype
      when /\A dscudaArgTypeP \z/x
        str = argptmp
        str = str.gsub(/%argname%/, "dscudaAdrOfUva((void *)#{argname})")
      when /\A dscudaArgTypeF \z/x
        str = argftmp
        str = str.gsub(/%argname%/, argname)
      when /\A dscudaArgTypeI \z/x
        str = argitmp
        str = str.gsub(/%argname%/, argname)
      else # custom type
        str = argvtmp
        str = str.gsub(/%argname%/, argname)
        str = str.gsub(/%argtype%/, argtype)
      end
      kstr << str
    }

    # postamble for IB Verb
    str = posttmp
    str = str.gsub(/%kname%/, "#{kdef[:name]}")
    str = str.gsub(/%kid%/, "#{kdef[:id]}")
    kstr << str

    # insert it just before the original prototype or the original definition.
    cudaKernelRe2 = %r{ #{kernel_re} #{kdef[:name]} \s* }xm

    vinfo("inserting a stub for kernel #{kdef[:name]}...")

    # note that it should be inserted only once, and thus do not use #gsub method but #sub.
#    srcstr = srcstr.sub(cudaKernelRe2) { "#{$1} #{kstr}\n"}

    srcstr = srcstr.sub(cudaKernelRe2) { "!!!!! #{kstr} #{$&} "}

  } # kdefs.each

  # remove __global__ modifier. otherwise nvcc try to setup code for kernel launch,
  # causing unwanted reference to cudaSetUpArgument etc.
  srcstr = srcstr.gsub(/__global__/) { '' }
  srcstr = srcstr.gsub(/__attribute__\(\(global\)\)/) { '' }
  

  dststr += srcstr

  return dststr
end

toplevel
