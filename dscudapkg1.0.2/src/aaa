# 1 "libdscuda.cu"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "libdscuda.cu"
# 1 "/usr/include/stdio.h" 1 3 4
# 28 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 361 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 365 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 366 "/usr/include/sys/cdefs.h" 2 3 4
# 362 "/usr/include/features.h" 2 3 4
# 385 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/gnu/stubs.h" 2 3 4




# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 2 3 4
# 386 "/usr/include/features.h" 2 3 4
# 29 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 1 3 4
# 211 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 35 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/bits/types.h" 1 3 4
# 28 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 131 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 132 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

typedef long int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 37 "/usr/include/stdio.h" 2 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 83 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 53 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/libio.h" 2 3 4
# 170 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 180 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 203 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 271 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 319 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 328 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 364 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 416 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 460 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__));
# 490 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__));
# 76 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 91 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 103 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;




# 161 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 162 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;









extern int remove (__const char *__filename) __attribute__ ((__nothrow__));

extern int rename (__const char *__old, __const char *__new) __attribute__ ((__nothrow__));




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) __attribute__ ((__nothrow__));








extern FILE *tmpfile (void) ;
# 208 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__)) ;





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__)) ;
# 226 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 251 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 265 "/usr/include/stdio.h" 3 4






extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 294 "/usr/include/stdio.h" 3 4

# 305 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, __const char *__modes) __attribute__ ((__nothrow__)) ;
# 318 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  __attribute__ ((__nothrow__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__)) ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__));








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));

# 416 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) __attribute__ ((__nothrow__));
# 447 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, __const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (__const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (__const char *__restrict __s, __const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__))

                      ;
# 467 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 498 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (__const char *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 526 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 554 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 565 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 598 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 660 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s) ;

# 732 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream) ;








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 768 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 787 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 810 "/usr/include/stdio.h" 3 4

# 819 "/usr/include/stdio.h" 3 4


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__)) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;








extern void perror (__const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];
# 849 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;
# 868 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__));
# 908 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__));
# 938 "/usr/include/stdio.h" 3 4

# 2 "libdscuda.cu" 2
# 1 "/usr/include/string.h" 1 3 4
# 29 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 1 3 4
# 35 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 95 "/usr/include/string.h" 3 4
extern void *memchr (__const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 126 "/usr/include/string.h" 3 4


extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));






# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 163 "/usr/include/string.h" 2 3 4


extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 210 "/usr/include/string.h" 3 4

# 235 "/usr/include/string.h" 3 4
extern char *strchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 262 "/usr/include/string.h" 3 4
extern char *strrchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 281 "/usr/include/string.h" 3 4



extern size_t strcspn (__const char *__s, __const char *__reject)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 314 "/usr/include/string.h" 3 4
extern char *strpbrk (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 342 "/usr/include/string.h" 3 4
extern char *strstr (__const char *__haystack, __const char *__needle)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
# 397 "/usr/include/string.h" 3 4


extern size_t strlen (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__));

# 427 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__))

                        __attribute__ ((__nonnull__ (2)));
# 445 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 489 "/usr/include/string.h" 3 4
extern char *index (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 517 "/usr/include/string.h" 3 4
extern char *rindex (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__)) __attribute__ ((__const__));
# 536 "/usr/include/string.h" 3 4
extern int strcasecmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 559 "/usr/include/string.h" 3 4
extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__));


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 646 "/usr/include/string.h" 3 4

# 3 "libdscuda.cu" 2
# 1 "/usr/include/netdb.h" 1 3 4
# 28 "/usr/include/netdb.h" 3 4
# 1 "/usr/include/netinet/in.h" 1 3 4
# 24 "/usr/include/netinet/in.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stdint.h" 1 3 4


# 1 "/usr/include/stdint.h" 1 3 4
# 27 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/wchar.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 37 "/usr/include/stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;

typedef long int int64_t;







typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 66 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 91 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 104 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 120 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 135 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 4 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stdint.h" 2 3 4
# 25 "/usr/include/netinet/in.h" 2 3 4
# 1 "/usr/include/sys/socket.h" 1 3 4
# 26 "/usr/include/sys/socket.h" 3 4


# 1 "/usr/include/sys/uio.h" 1 3 4
# 24 "/usr/include/sys/uio.h" 3 4
# 1 "/usr/include/sys/types.h" 1 3 4
# 28 "/usr/include/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 61 "/usr/include/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 99 "/usr/include/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 116 "/usr/include/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 133 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 58 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 74 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 92 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 104 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 134 "/usr/include/sys/types.h" 2 3 4
# 147 "/usr/include/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 1 3 4
# 148 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 201 "/usr/include/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 217 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 61 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 28 "/usr/include/bits/byteswap.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/byteswap.h" 2 3 4
# 62 "/usr/include/endian.h" 2 3 4
# 218 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 23 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/select.h" 2 3 4
# 32 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 24 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 45 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 75 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 47 "/usr/include/sys/select.h" 2 3 4


typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 67 "/usr/include/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 99 "/usr/include/sys/select.h" 3 4

# 109 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 121 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);



# 221 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 30 "/usr/include/sys/sysmacros.h" 3 4
__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__));
# 224 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 271 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4
# 50 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[56];
  long int __align;
} pthread_attr_t;



typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 76 "/usr/include/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    int __spins;
    __pthread_list_t __list;
# 101 "/usr/include/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;


    unsigned int __flags;
  } __data;
# 187 "/usr/include/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 272 "/usr/include/sys/types.h" 2 3 4



# 25 "/usr/include/sys/uio.h" 2 3 4




# 1 "/usr/include/bits/uio.h" 1 3 4
# 44 "/usr/include/bits/uio.h" 3 4
struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 30 "/usr/include/sys/uio.h" 2 3 4
# 40 "/usr/include/sys/uio.h" 3 4
extern ssize_t readv (int __fd, __const struct iovec *__iovec, int __count)
  ;
# 51 "/usr/include/sys/uio.h" 3 4
extern ssize_t writev (int __fd, __const struct iovec *__iovec, int __count)
  ;
# 66 "/usr/include/sys/uio.h" 3 4
extern ssize_t preadv (int __fd, __const struct iovec *__iovec, int __count,
         __off_t __offset) ;
# 78 "/usr/include/sys/uio.h" 3 4
extern ssize_t pwritev (int __fd, __const struct iovec *__iovec, int __count,
   __off_t __offset) ;
# 121 "/usr/include/sys/uio.h" 3 4

# 29 "/usr/include/sys/socket.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 1 3 4
# 31 "/usr/include/sys/socket.h" 2 3 4
# 40 "/usr/include/sys/socket.h" 3 4
# 1 "/usr/include/bits/socket.h" 1 3 4
# 29 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 1 3 4
# 30 "/usr/include/bits/socket.h" 2 3 4





typedef __socklen_t socklen_t;




enum __socket_type
{
  SOCK_STREAM = 1,


  SOCK_DGRAM = 2,


  SOCK_RAW = 3,

  SOCK_RDM = 4,

  SOCK_SEQPACKET = 5,


  SOCK_DCCP = 6,

  SOCK_PACKET = 10,







  SOCK_CLOEXEC = 02000000,


  SOCK_NONBLOCK = 04000


};
# 171 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/include/bits/sockaddr.h" 1 3 4
# 29 "/usr/include/bits/sockaddr.h" 3 4
typedef unsigned short int sa_family_t;
# 172 "/usr/include/bits/socket.h" 2 3 4


struct sockaddr
  {
    sa_family_t sa_family;
    char sa_data[14];
  };
# 187 "/usr/include/bits/socket.h" 3 4
struct sockaddr_storage
  {
    sa_family_t ss_family;
    unsigned long int __ss_align;
    char __ss_padding[(128 - (2 * sizeof (unsigned long int)))];
  };



enum
  {
    MSG_OOB = 0x01,

    MSG_PEEK = 0x02,

    MSG_DONTROUTE = 0x04,






    MSG_CTRUNC = 0x08,

    MSG_PROXY = 0x10,

    MSG_TRUNC = 0x20,

    MSG_DONTWAIT = 0x40,

    MSG_EOR = 0x80,

    MSG_WAITALL = 0x100,

    MSG_FIN = 0x200,

    MSG_SYN = 0x400,

    MSG_CONFIRM = 0x800,

    MSG_RST = 0x1000,

    MSG_ERRQUEUE = 0x2000,

    MSG_NOSIGNAL = 0x4000,

    MSG_MORE = 0x8000,

    MSG_WAITFORONE = 0x10000,


    MSG_CMSG_CLOEXEC = 0x40000000



  };




struct msghdr
  {
    void *msg_name;
    socklen_t msg_namelen;

    struct iovec *msg_iov;
    size_t msg_iovlen;

    void *msg_control;
    size_t msg_controllen;




    int msg_flags;
  };
# 274 "/usr/include/bits/socket.h" 3 4
struct cmsghdr
  {
    size_t cmsg_len;




    int cmsg_level;
    int cmsg_type;

    __extension__ unsigned char __cmsg_data [];

  };
# 304 "/usr/include/bits/socket.h" 3 4
extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
          struct cmsghdr *__cmsg) __attribute__ ((__nothrow__));
# 331 "/usr/include/bits/socket.h" 3 4
enum
  {
    SCM_RIGHTS = 0x01





  };
# 377 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/include/asm/socket.h" 1 3 4
# 1 "/usr/include/asm-generic/socket.h" 1 3 4



# 1 "/usr/include/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4
# 1 "/usr/include/asm/sockios.h" 2 3 4
# 5 "/usr/include/asm-generic/socket.h" 2 3 4
# 1 "/usr/include/asm/socket.h" 2 3 4
# 378 "/usr/include/bits/socket.h" 2 3 4
# 411 "/usr/include/bits/socket.h" 3 4
struct linger
  {
    int l_onoff;
    int l_linger;
  };









extern int recvmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags,
       __const struct timespec *__tmo);


# 41 "/usr/include/sys/socket.h" 2 3 4




struct osockaddr
  {
    unsigned short int sa_family;
    unsigned char sa_data[14];
  };




enum
{
  SHUT_RD = 0,

  SHUT_WR,

  SHUT_RDWR

};
# 105 "/usr/include/sys/socket.h" 3 4
extern int socket (int __domain, int __type, int __protocol) __attribute__ ((__nothrow__));





extern int socketpair (int __domain, int __type, int __protocol,
         int __fds[2]) __attribute__ ((__nothrow__));


extern int bind (int __fd, __const struct sockaddr * __addr, socklen_t __len)
     __attribute__ ((__nothrow__));


extern int getsockname (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__));
# 129 "/usr/include/sys/socket.h" 3 4
extern int connect (int __fd, __const struct sockaddr * __addr, socklen_t __len);



extern int getpeername (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__));






extern ssize_t send (int __fd, __const void *__buf, size_t __n, int __flags);






extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);






extern ssize_t sendto (int __fd, __const void *__buf, size_t __n,
         int __flags, __const struct sockaddr * __addr,
         socklen_t __addr_len);
# 166 "/usr/include/sys/socket.h" 3 4
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
    int __flags, struct sockaddr *__restrict __addr,
    socklen_t *__restrict __addr_len);







extern ssize_t sendmsg (int __fd, __const struct msghdr *__message,
   int __flags);






extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);





extern int getsockopt (int __fd, int __level, int __optname,
         void *__restrict __optval,
         socklen_t *__restrict __optlen) __attribute__ ((__nothrow__));




extern int setsockopt (int __fd, int __level, int __optname,
         __const void *__optval, socklen_t __optlen) __attribute__ ((__nothrow__));





extern int listen (int __fd, int __n) __attribute__ ((__nothrow__));
# 214 "/usr/include/sys/socket.h" 3 4
extern int accept (int __fd, struct sockaddr *__restrict __addr,
     socklen_t *__restrict __addr_len);
# 232 "/usr/include/sys/socket.h" 3 4
extern int shutdown (int __fd, int __how) __attribute__ ((__nothrow__));




extern int sockatmark (int __fd) __attribute__ ((__nothrow__));







extern int isfdtype (int __fd, int __fdtype) __attribute__ ((__nothrow__));
# 254 "/usr/include/sys/socket.h" 3 4

# 26 "/usr/include/netinet/in.h" 2 3 4






enum
  {
    IPPROTO_IP = 0,

    IPPROTO_HOPOPTS = 0,

    IPPROTO_ICMP = 1,

    IPPROTO_IGMP = 2,

    IPPROTO_IPIP = 4,

    IPPROTO_TCP = 6,

    IPPROTO_EGP = 8,

    IPPROTO_PUP = 12,

    IPPROTO_UDP = 17,

    IPPROTO_IDP = 22,

    IPPROTO_TP = 29,

    IPPROTO_DCCP = 33,

    IPPROTO_IPV6 = 41,

    IPPROTO_ROUTING = 43,

    IPPROTO_FRAGMENT = 44,

    IPPROTO_RSVP = 46,

    IPPROTO_GRE = 47,

    IPPROTO_ESP = 50,

    IPPROTO_AH = 51,

    IPPROTO_ICMPV6 = 58,

    IPPROTO_NONE = 59,

    IPPROTO_DSTOPTS = 60,

    IPPROTO_MTP = 92,

    IPPROTO_ENCAP = 98,

    IPPROTO_PIM = 103,

    IPPROTO_COMP = 108,

    IPPROTO_SCTP = 132,

    IPPROTO_UDPLITE = 136,

    IPPROTO_RAW = 255,

    IPPROTO_MAX
  };



typedef uint16_t in_port_t;


enum
  {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,

    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,


    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,


    IPPORT_BIFFUDP = 512,
    IPPORT_WHOSERVER = 513,
    IPPORT_ROUTESERVER = 520,


    IPPORT_RESERVED = 1024,


    IPPORT_USERRESERVED = 5000
  };



typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };
# 198 "/usr/include/netinet/in.h" 3 4
struct in6_addr
  {
    union
      {
 uint8_t __u6_addr8[16];

 uint16_t __u6_addr16[8];
 uint32_t __u6_addr32[4];

      } __in6_u;





  };

extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
# 225 "/usr/include/netinet/in.h" 3 4
struct sockaddr_in
  {
    sa_family_t sin_family;
    in_port_t sin_port;
    struct in_addr sin_addr;


    unsigned char sin_zero[sizeof (struct sockaddr) -
      (sizeof (unsigned short int)) -
      sizeof (in_port_t) -
      sizeof (struct in_addr)];
  };


struct sockaddr_in6
  {
    sa_family_t sin6_family;
    in_port_t sin6_port;
    uint32_t sin6_flowinfo;
    struct in6_addr sin6_addr;
    uint32_t sin6_scope_id;
  };




struct ip_mreq
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;
  };

struct ip_mreq_source
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;


    struct in_addr imr_sourceaddr;
  };




struct ipv6_mreq
  {

    struct in6_addr ipv6mr_multiaddr;


    unsigned int ipv6mr_interface;
  };




struct group_req
  {

    uint32_t gr_interface;


    struct sockaddr_storage gr_group;
  };

struct group_source_req
  {

    uint32_t gsr_interface;


    struct sockaddr_storage gsr_group;


    struct sockaddr_storage gsr_source;
  };



struct ip_msfilter
  {

    struct in_addr imsf_multiaddr;


    struct in_addr imsf_interface;


    uint32_t imsf_fmode;


    uint32_t imsf_numsrc;

    struct in_addr imsf_slist[1];
  };





struct group_filter
  {

    uint32_t gf_interface;


    struct sockaddr_storage gf_group;


    uint32_t gf_fmode;


    uint32_t gf_numsrc;

    struct sockaddr_storage gf_slist[1];
};
# 356 "/usr/include/netinet/in.h" 3 4
# 1 "/usr/include/bits/in.h" 1 3 4
# 98 "/usr/include/bits/in.h" 3 4
struct ip_opts
  {
    struct in_addr ip_dst;
    char ip_opts[40];
  };


struct ip_mreqn
  {
    struct in_addr imr_multiaddr;
    struct in_addr imr_address;
    int imr_ifindex;
  };


struct in_pktinfo
  {
    int ipi_ifindex;
    struct in_addr ipi_spec_dst;
    struct in_addr ipi_addr;
  };
# 357 "/usr/include/netinet/in.h" 2 3 4
# 365 "/usr/include/netinet/in.h" 3 4
extern uint32_t ntohl (uint32_t __netlong) __attribute__ ((__nothrow__)) __attribute__ ((__const__));
extern uint16_t ntohs (uint16_t __netshort)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__));
extern uint32_t htonl (uint32_t __hostlong)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__));
extern uint16_t htons (uint16_t __hostshort)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__));




# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 377 "/usr/include/netinet/in.h" 2 3 4
# 440 "/usr/include/netinet/in.h" 3 4
extern int bindresvport (int __sockfd, struct sockaddr_in *__sock_in) __attribute__ ((__nothrow__));


extern int bindresvport6 (int __sockfd, struct sockaddr_in6 *__sock_in)
     __attribute__ ((__nothrow__));
# 565 "/usr/include/netinet/in.h" 3 4

# 29 "/usr/include/netdb.h" 2 3 4




# 1 "/usr/include/rpc/netdb.h" 1 3 4
# 42 "/usr/include/rpc/netdb.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 1 3 4
# 43 "/usr/include/rpc/netdb.h" 2 3 4



struct rpcent
{
  char *r_name;
  char **r_aliases;
  int r_number;
};

extern void setrpcent (int __stayopen) __attribute__ ((__nothrow__));
extern void endrpcent (void) __attribute__ ((__nothrow__));
extern struct rpcent *getrpcbyname (__const char *__name) __attribute__ ((__nothrow__));
extern struct rpcent *getrpcbynumber (int __number) __attribute__ ((__nothrow__));
extern struct rpcent *getrpcent (void) __attribute__ ((__nothrow__));


extern int getrpcbyname_r (__const char *__name, struct rpcent *__result_buf,
      char *__buffer, size_t __buflen,
      struct rpcent **__result) __attribute__ ((__nothrow__));

extern int getrpcbynumber_r (int __number, struct rpcent *__result_buf,
        char *__buffer, size_t __buflen,
        struct rpcent **__result) __attribute__ ((__nothrow__));

extern int getrpcent_r (struct rpcent *__result_buf, char *__buffer,
   size_t __buflen, struct rpcent **__result) __attribute__ ((__nothrow__));



# 34 "/usr/include/netdb.h" 2 3 4
# 43 "/usr/include/netdb.h" 3 4
# 1 "/usr/include/bits/netdb.h" 1 3 4
# 27 "/usr/include/bits/netdb.h" 3 4
struct netent
{
  char *n_name;
  char **n_aliases;
  int n_addrtype;
  uint32_t n_net;
};
# 44 "/usr/include/netdb.h" 2 3 4
# 54 "/usr/include/netdb.h" 3 4








extern int *__h_errno_location (void) __attribute__ ((__nothrow__)) __attribute__ ((__const__));
# 93 "/usr/include/netdb.h" 3 4
extern void herror (__const char *__str) __attribute__ ((__nothrow__));


extern __const char *hstrerror (int __err_num) __attribute__ ((__nothrow__));




struct hostent
{
  char *h_name;
  char **h_aliases;
  int h_addrtype;
  int h_length;
  char **h_addr_list;



};






extern void sethostent (int __stay_open);





extern void endhostent (void);






extern struct hostent *gethostent (void);






extern struct hostent *gethostbyaddr (__const void *__addr, __socklen_t __len,
          int __type);





extern struct hostent *gethostbyname (__const char *__name);
# 156 "/usr/include/netdb.h" 3 4
extern struct hostent *gethostbyname2 (__const char *__name, int __af);
# 168 "/usr/include/netdb.h" 3 4
extern int gethostent_r (struct hostent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct hostent **__restrict __result,
    int *__restrict __h_errnop);

extern int gethostbyaddr_r (__const void *__restrict __addr, __socklen_t __len,
       int __type,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname_r (__const char *__restrict __name,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname2_r (__const char *__restrict __name, int __af,
        struct hostent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct hostent **__restrict __result,
        int *__restrict __h_errnop);
# 199 "/usr/include/netdb.h" 3 4
extern void setnetent (int __stay_open);





extern void endnetent (void);






extern struct netent *getnetent (void);






extern struct netent *getnetbyaddr (uint32_t __net, int __type);





extern struct netent *getnetbyname (__const char *__name);
# 238 "/usr/include/netdb.h" 3 4
extern int getnetent_r (struct netent *__restrict __result_buf,
   char *__restrict __buf, size_t __buflen,
   struct netent **__restrict __result,
   int *__restrict __h_errnop);

extern int getnetbyaddr_r (uint32_t __net, int __type,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);

extern int getnetbyname_r (__const char *__restrict __name,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);




struct servent
{
  char *s_name;
  char **s_aliases;
  int s_port;
  char *s_proto;
};






extern void setservent (int __stay_open);





extern void endservent (void);






extern struct servent *getservent (void);






extern struct servent *getservbyname (__const char *__name,
          __const char *__proto);






extern struct servent *getservbyport (int __port, __const char *__proto);
# 310 "/usr/include/netdb.h" 3 4
extern int getservent_r (struct servent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct servent **__restrict __result);

extern int getservbyname_r (__const char *__restrict __name,
       __const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);

extern int getservbyport_r (int __port, __const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);




struct protoent
{
  char *p_name;
  char **p_aliases;
  int p_proto;
};






extern void setprotoent (int __stay_open);





extern void endprotoent (void);






extern struct protoent *getprotoent (void);





extern struct protoent *getprotobyname (__const char *__name);





extern struct protoent *getprotobynumber (int __proto);
# 376 "/usr/include/netdb.h" 3 4
extern int getprotoent_r (struct protoent *__restrict __result_buf,
     char *__restrict __buf, size_t __buflen,
     struct protoent **__restrict __result);

extern int getprotobyname_r (__const char *__restrict __name,
        struct protoent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct protoent **__restrict __result);

extern int getprotobynumber_r (int __proto,
          struct protoent *__restrict __result_buf,
          char *__restrict __buf, size_t __buflen,
          struct protoent **__restrict __result);
# 397 "/usr/include/netdb.h" 3 4
extern int setnetgrent (__const char *__netgroup);







extern void endnetgrent (void);
# 414 "/usr/include/netdb.h" 3 4
extern int getnetgrent (char **__restrict __hostp,
   char **__restrict __userp,
   char **__restrict __domainp);
# 425 "/usr/include/netdb.h" 3 4
extern int innetgr (__const char *__netgroup, __const char *__host,
      __const char *__user, __const char *__domain);







extern int getnetgrent_r (char **__restrict __hostp,
     char **__restrict __userp,
     char **__restrict __domainp,
     char *__restrict __buffer, size_t __buflen);
# 453 "/usr/include/netdb.h" 3 4
extern int rcmd (char **__restrict __ahost, unsigned short int __rport,
   __const char *__restrict __locuser,
   __const char *__restrict __remuser,
   __const char *__restrict __cmd, int *__restrict __fd2p);
# 465 "/usr/include/netdb.h" 3 4
extern int rcmd_af (char **__restrict __ahost, unsigned short int __rport,
      __const char *__restrict __locuser,
      __const char *__restrict __remuser,
      __const char *__restrict __cmd, int *__restrict __fd2p,
      sa_family_t __af);
# 481 "/usr/include/netdb.h" 3 4
extern int rexec (char **__restrict __ahost, int __rport,
    __const char *__restrict __name,
    __const char *__restrict __pass,
    __const char *__restrict __cmd, int *__restrict __fd2p);
# 493 "/usr/include/netdb.h" 3 4
extern int rexec_af (char **__restrict __ahost, int __rport,
       __const char *__restrict __name,
       __const char *__restrict __pass,
       __const char *__restrict __cmd, int *__restrict __fd2p,
       sa_family_t __af);
# 507 "/usr/include/netdb.h" 3 4
extern int ruserok (__const char *__rhost, int __suser,
      __const char *__remuser, __const char *__locuser);
# 517 "/usr/include/netdb.h" 3 4
extern int ruserok_af (__const char *__rhost, int __suser,
         __const char *__remuser, __const char *__locuser,
         sa_family_t __af);
# 530 "/usr/include/netdb.h" 3 4
extern int iruserok (uint32_t __raddr, int __suser,
       __const char *__remuser, __const char *__locuser);
# 541 "/usr/include/netdb.h" 3 4
extern int iruserok_af (__const void *__raddr, int __suser,
   __const char *__remuser, __const char *__locuser,
   sa_family_t __af);
# 553 "/usr/include/netdb.h" 3 4
extern int rresvport (int *__alport);
# 562 "/usr/include/netdb.h" 3 4
extern int rresvport_af (int *__alport, sa_family_t __af);






struct addrinfo
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  socklen_t ai_addrlen;
  struct sockaddr *ai_addr;
  char *ai_canonname;
  struct addrinfo *ai_next;
};
# 664 "/usr/include/netdb.h" 3 4
extern int getaddrinfo (__const char *__restrict __name,
   __const char *__restrict __service,
   __const struct addrinfo *__restrict __req,
   struct addrinfo **__restrict __pai);


extern void freeaddrinfo (struct addrinfo *__ai) __attribute__ ((__nothrow__));


extern __const char *gai_strerror (int __ecode) __attribute__ ((__nothrow__));





extern int getnameinfo (__const struct sockaddr *__restrict __sa,
   socklen_t __salen, char *__restrict __host,
   socklen_t __hostlen, char *__restrict __serv,
   socklen_t __servlen, unsigned int __flags);
# 715 "/usr/include/netdb.h" 3 4

# 4 "libdscuda.cu" 2

# 1 "/usr/include/rpc/rpc.h" 1 3 4
# 38 "/usr/include/rpc/rpc.h" 3 4
# 1 "/usr/include/rpc/types.h" 1 3 4
# 37 "/usr/include/rpc/types.h" 3 4
typedef int bool_t;
typedef int enum_t;

typedef unsigned long rpcprog_t;
typedef unsigned long rpcvers_t;
typedef unsigned long rpcproc_t;
typedef unsigned long rpcprot_t;
typedef unsigned long rpcport_t;
# 60 "/usr/include/rpc/types.h" 3 4
# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 1 3 4
# 323 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 3 4
typedef int wchar_t;
# 34 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 43 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 67 "/usr/include/bits/waitstatus.h" 3 4
union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 44 "/usr/include/stdlib.h" 2 3 4
# 68 "/usr/include/stdlib.h" 3 4
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__)) ;




extern double atof (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

# 311 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__)) ;


extern long int a64l (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 327 "/usr/include/stdlib.h" 3 4
extern long int random (void) __attribute__ ((__nothrow__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__));







extern double drand48 (void) __attribute__ ((__nothrow__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__));



# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__));






# 498 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 531 "/usr/include/stdlib.h" 3 4





extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));
# 554 "/usr/include/stdlib.h" 3 4






extern void _Exit (int __status) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__));
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 620 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 642 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 663 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 712 "/usr/include/stdlib.h" 3 4





extern int system (__const char *__command) ;

# 734 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__)) ;






typedef int (*__compar_fn_t) (__const void *, __const void *);
# 752 "/usr/include/stdlib.h" 3 4



extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 771 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;

# 808 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) __attribute__ ((__nothrow__)) ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__)) ;


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__)) ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__));

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__));








extern int rpmatch (__const char *__response) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 896 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 948 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 964 "/usr/include/stdlib.h" 3 4

# 61 "/usr/include/rpc/types.h" 2 3 4
# 88 "/usr/include/rpc/types.h" 3 4
# 1 "/usr/include/sys/time.h" 1 3 4
# 27 "/usr/include/sys/time.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 28 "/usr/include/sys/time.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 30 "/usr/include/sys/time.h" 2 3 4
# 39 "/usr/include/sys/time.h" 3 4

# 57 "/usr/include/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 73 "/usr/include/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int settimeofday (__const struct timeval *__tv,
    __const struct timezone *__tz)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int adjtime (__const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__));




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__));




extern int setitimer (__itimer_which_t __which,
        __const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__));




extern int utimes (__const char *__file, __const struct timeval __tvp[2])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int lutimes (__const char *__file, __const struct timeval __tvp[2])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, __const struct timeval __tvp[2]) __attribute__ ((__nothrow__));
# 191 "/usr/include/sys/time.h" 3 4

# 89 "/usr/include/rpc/types.h" 2 3 4
# 1 "/usr/include/sys/param.h" 1 3 4
# 26 "/usr/include/sys/param.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/limits.h" 1 3 4
# 169 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 145 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 157 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 39 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 40 "/usr/include/bits/local_lim.h" 2 3 4
# 158 "/usr/include/bits/posix1_lim.h" 2 3 4
# 146 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 150 "/usr/include/limits.h" 2 3 4
# 170 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/limits.h" 2 3 4
# 27 "/usr/include/sys/param.h" 2 3 4

# 1 "/usr/include/linux/param.h" 1 3 4



# 1 "/usr/include/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 1 "/usr/include/asm/param.h" 2 3 4
# 5 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/sys/param.h" 2 3 4
# 90 "/usr/include/rpc/types.h" 2 3 4
# 39 "/usr/include/rpc/rpc.h" 2 3 4



# 1 "/usr/include/rpc/xdr.h" 1 3 4
# 44 "/usr/include/rpc/xdr.h" 3 4

# 81 "/usr/include/rpc/xdr.h" 3 4
enum xdr_op {
  XDR_ENCODE = 0,
  XDR_DECODE = 1,
  XDR_FREE = 2
};
# 109 "/usr/include/rpc/xdr.h" 3 4
typedef struct XDR XDR;
struct XDR
  {
    enum xdr_op x_op;
    struct xdr_ops
      {
 bool_t (*x_getlong) (XDR *__xdrs, long *__lp);

 bool_t (*x_putlong) (XDR *__xdrs, __const long *__lp);

 bool_t (*x_getbytes) (XDR *__xdrs, caddr_t __addr, u_int __len);

 bool_t (*x_putbytes) (XDR *__xdrs, __const char *__addr, u_int __len);

 u_int (*x_getpostn) (__const XDR *__xdrs);

 bool_t (*x_setpostn) (XDR *__xdrs, u_int __pos);

 int32_t *(*x_inline) (XDR *__xdrs, u_int __len);

 void (*x_destroy) (XDR *__xdrs);

 bool_t (*x_getint32) (XDR *__xdrs, int32_t *__ip);

 bool_t (*x_putint32) (XDR *__xdrs, __const int32_t *__ip);

      }
     *x_ops;
    caddr_t x_public;
    caddr_t x_private;
    caddr_t x_base;
    u_int x_handy;
  };
# 152 "/usr/include/rpc/xdr.h" 3 4
typedef bool_t (*xdrproc_t) (XDR *, void *,...);
# 232 "/usr/include/rpc/xdr.h" 3 4
struct xdr_discrim
{
  int value;
  xdrproc_t proc;
};
# 285 "/usr/include/rpc/xdr.h" 3 4
extern bool_t xdr_void (void) __attribute__ ((__nothrow__));
extern bool_t xdr_short (XDR *__xdrs, short *__sp) __attribute__ ((__nothrow__));
extern bool_t xdr_u_short (XDR *__xdrs, u_short *__usp) __attribute__ ((__nothrow__));
extern bool_t xdr_int (XDR *__xdrs, int *__ip) __attribute__ ((__nothrow__));
extern bool_t xdr_u_int (XDR *__xdrs, u_int *__up) __attribute__ ((__nothrow__));
extern bool_t xdr_long (XDR *__xdrs, long *__lp) __attribute__ ((__nothrow__));
extern bool_t xdr_u_long (XDR *__xdrs, u_long *__ulp) __attribute__ ((__nothrow__));
extern bool_t xdr_hyper (XDR *__xdrs, quad_t *__llp) __attribute__ ((__nothrow__));
extern bool_t xdr_u_hyper (XDR *__xdrs, u_quad_t *__ullp) __attribute__ ((__nothrow__));
extern bool_t xdr_longlong_t (XDR *__xdrs, quad_t *__llp) __attribute__ ((__nothrow__));
extern bool_t xdr_u_longlong_t (XDR *__xdrs, u_quad_t *__ullp) __attribute__ ((__nothrow__));
extern bool_t xdr_int8_t (XDR *__xdrs, int8_t *__ip) __attribute__ ((__nothrow__));
extern bool_t xdr_uint8_t (XDR *__xdrs, uint8_t *__up) __attribute__ ((__nothrow__));
extern bool_t xdr_int16_t (XDR *__xdrs, int16_t *__ip) __attribute__ ((__nothrow__));
extern bool_t xdr_uint16_t (XDR *__xdrs, uint16_t *__up) __attribute__ ((__nothrow__));
extern bool_t xdr_int32_t (XDR *__xdrs, int32_t *__ip) __attribute__ ((__nothrow__));
extern bool_t xdr_uint32_t (XDR *__xdrs, uint32_t *__up) __attribute__ ((__nothrow__));
extern bool_t xdr_int64_t (XDR *__xdrs, int64_t *__ip) __attribute__ ((__nothrow__));
extern bool_t xdr_uint64_t (XDR *__xdrs, uint64_t *__up) __attribute__ ((__nothrow__));
extern bool_t xdr_quad_t (XDR *__xdrs, quad_t *__ip) __attribute__ ((__nothrow__));
extern bool_t xdr_u_quad_t (XDR *__xdrs, u_quad_t *__up) __attribute__ ((__nothrow__));
extern bool_t xdr_bool (XDR *__xdrs, bool_t *__bp) __attribute__ ((__nothrow__));
extern bool_t xdr_enum (XDR *__xdrs, enum_t *__ep) __attribute__ ((__nothrow__));
extern bool_t xdr_array (XDR * _xdrs, caddr_t *__addrp, u_int *__sizep,
    u_int __maxsize, u_int __elsize, xdrproc_t __elproc)
     __attribute__ ((__nothrow__));
extern bool_t xdr_bytes (XDR *__xdrs, char **__cpp, u_int *__sizep,
    u_int __maxsize) __attribute__ ((__nothrow__));
extern bool_t xdr_opaque (XDR *__xdrs, caddr_t __cp, u_int __cnt) __attribute__ ((__nothrow__));
extern bool_t xdr_string (XDR *__xdrs, char **__cpp, u_int __maxsize) __attribute__ ((__nothrow__));
extern bool_t xdr_union (XDR *__xdrs, enum_t *__dscmp, char *__unp,
    __const struct xdr_discrim *__choices,
    xdrproc_t __dfault) __attribute__ ((__nothrow__));
extern bool_t xdr_char (XDR *__xdrs, char *__cp) __attribute__ ((__nothrow__));
extern bool_t xdr_u_char (XDR *__xdrs, u_char *__cp) __attribute__ ((__nothrow__));
extern bool_t xdr_vector (XDR *__xdrs, char *__basep, u_int __nelem,
     u_int __elemsize, xdrproc_t __xdr_elem) __attribute__ ((__nothrow__));
extern bool_t xdr_float (XDR *__xdrs, float *__fp) __attribute__ ((__nothrow__));
extern bool_t xdr_double (XDR *__xdrs, double *__dp) __attribute__ ((__nothrow__));
extern bool_t xdr_reference (XDR *__xdrs, caddr_t *__xpp, u_int __size,
        xdrproc_t __proc) __attribute__ ((__nothrow__));
extern bool_t xdr_pointer (XDR *__xdrs, char **__objpp,
      u_int __obj_size, xdrproc_t __xdr_obj) __attribute__ ((__nothrow__));
extern bool_t xdr_wrapstring (XDR *__xdrs, char **__cpp) __attribute__ ((__nothrow__));
extern u_long xdr_sizeof (xdrproc_t, void *) __attribute__ ((__nothrow__));






struct netobj
{
  u_int n_len;
  char *n_bytes;
};
typedef struct netobj netobj;
extern bool_t xdr_netobj (XDR *__xdrs, struct netobj *__np) __attribute__ ((__nothrow__));







extern void xdrmem_create (XDR *__xdrs, __const caddr_t __addr,
      u_int __size, enum xdr_op __xop) __attribute__ ((__nothrow__));


extern void xdrstdio_create (XDR *__xdrs, FILE *__file, enum xdr_op __xop)
     __attribute__ ((__nothrow__));


extern void xdrrec_create (XDR *__xdrs, u_int __sendsize,
      u_int __recvsize, caddr_t __tcp_handle,
      int (*__readit) (char *, char *, int),
      int (*__writeit) (char *, char *, int)) __attribute__ ((__nothrow__));


extern bool_t xdrrec_endofrecord (XDR *__xdrs, bool_t __sendnow) __attribute__ ((__nothrow__));


extern bool_t xdrrec_skiprecord (XDR *__xdrs) __attribute__ ((__nothrow__));


extern bool_t xdrrec_eof (XDR *__xdrs) __attribute__ ((__nothrow__));


extern void xdr_free (xdrproc_t __proc, char *__objp) __attribute__ ((__nothrow__));


# 43 "/usr/include/rpc/rpc.h" 2 3 4


# 1 "/usr/include/rpc/auth.h" 1 3 4
# 44 "/usr/include/rpc/auth.h" 3 4








enum auth_stat {
 AUTH_OK=0,



 AUTH_BADCRED=1,
 AUTH_REJECTEDCRED=2,
 AUTH_BADVERF=3,
 AUTH_REJECTEDVERF=4,
 AUTH_TOOWEAK=5,



 AUTH_INVALIDRESP=6,
 AUTH_FAILED=7
};

union des_block {
 struct {
  u_int32_t high;
  u_int32_t low;
 } key;
 char c[8];
};
typedef union des_block des_block;
extern bool_t xdr_des_block (XDR *__xdrs, des_block *__blkp) __attribute__ ((__nothrow__));




struct opaque_auth {
 enum_t oa_flavor;
 caddr_t oa_base;
 u_int oa_length;
};




typedef struct AUTH AUTH;
struct AUTH {
  struct opaque_auth ah_cred;
  struct opaque_auth ah_verf;
  union des_block ah_key;
  struct auth_ops {
    void (*ah_nextverf) (AUTH *);
    int (*ah_marshal) (AUTH *, XDR *);
    int (*ah_validate) (AUTH *, struct opaque_auth *);

    int (*ah_refresh) (AUTH *);
    void (*ah_destroy) (AUTH *);
  } *ah_ops;
  caddr_t ah_private;
};
# 142 "/usr/include/rpc/auth.h" 3 4
extern struct opaque_auth _null_auth;
# 158 "/usr/include/rpc/auth.h" 3 4
extern AUTH *authunix_create (char *__machname, __uid_t __uid, __gid_t __gid,
         int __len, __gid_t *__aup_gids);
extern AUTH *authunix_create_default (void);
extern AUTH *authnone_create (void) __attribute__ ((__nothrow__));
extern AUTH *authdes_create (const char *__servername, u_int __window,
        struct sockaddr *__syncaddr, des_block *__ckey)
     __attribute__ ((__nothrow__));
extern AUTH *authdes_pk_create (const char *, netobj *, u_int,
    struct sockaddr *, des_block *) __attribute__ ((__nothrow__));
# 182 "/usr/include/rpc/auth.h" 3 4
extern int getnetname (char *) __attribute__ ((__nothrow__));
extern int host2netname (char *, __const char *, __const char *) __attribute__ ((__nothrow__));
extern int user2netname (char *, __const uid_t, __const char *) __attribute__ ((__nothrow__));
extern int netname2user (__const char *, uid_t *, gid_t *, int *, gid_t *)
     __attribute__ ((__nothrow__));
extern int netname2host (__const char *, char *, __const int) __attribute__ ((__nothrow__));






extern int key_decryptsession (char *, des_block *);
extern int key_decryptsession_pk (char *, netobj *, des_block *);
extern int key_encryptsession (char *, des_block *);
extern int key_encryptsession_pk (char *, netobj *, des_block *);
extern int key_gendes (des_block *);
extern int key_setsecret (char *);
extern int key_secretkey_is_set (void);
extern int key_get_conv (char *, des_block *);




extern bool_t xdr_opaque_auth (XDR *, struct opaque_auth *) __attribute__ ((__nothrow__));


# 46 "/usr/include/rpc/rpc.h" 2 3 4


# 1 "/usr/include/rpc/clnt.h" 1 3 4
# 41 "/usr/include/rpc/clnt.h" 3 4
# 1 "/usr/include/sys/un.h" 1 3 4
# 27 "/usr/include/sys/un.h" 3 4



struct sockaddr_un
  {
    sa_family_t sun_family;
    char sun_path[108];
  };
# 45 "/usr/include/sys/un.h" 3 4

# 42 "/usr/include/rpc/clnt.h" 2 3 4








enum clnt_stat {
 RPC_SUCCESS=0,



 RPC_CANTENCODEARGS=1,
 RPC_CANTDECODERES=2,
 RPC_CANTSEND=3,
 RPC_CANTRECV=4,
 RPC_TIMEDOUT=5,



 RPC_VERSMISMATCH=6,
 RPC_AUTHERROR=7,
 RPC_PROGUNAVAIL=8,
 RPC_PROGVERSMISMATCH=9,
 RPC_PROCUNAVAIL=10,
 RPC_CANTDECODEARGS=11,
 RPC_SYSTEMERROR=12,
 RPC_NOBROADCAST = 21,



 RPC_UNKNOWNHOST=13,
 RPC_UNKNOWNPROTO=17,
 RPC_UNKNOWNADDR = 19,




 RPC_RPCBFAILURE=14,

 RPC_PROGNOTREGISTERED=15,
 RPC_N2AXLATEFAILURE = 22,



 RPC_FAILED=16,
 RPC_INTR=18,
 RPC_TLIERROR=20,
 RPC_UDERROR=23,



        RPC_INPROGRESS = 24,
        RPC_STALERACHANDLE = 25
};





struct rpc_err {
  enum clnt_stat re_status;
  union {
    int RE_errno;
    enum auth_stat RE_why;
    struct {
      u_long low;
      u_long high;
    } RE_vers;
    struct {
      long s1;
      long s2;
    } RE_lb;
  } ru;




};







typedef struct CLIENT CLIENT;
struct CLIENT {
  AUTH *cl_auth;
  struct clnt_ops {
    enum clnt_stat (*cl_call) (CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t,
          caddr_t, struct timeval);

    void (*cl_abort) (void);
    void (*cl_geterr) (CLIENT *, struct rpc_err *);

    bool_t (*cl_freeres) (CLIENT *, xdrproc_t, caddr_t);

    void (*cl_destroy) (CLIENT *);
    bool_t (*cl_control) (CLIENT *, int, char *);

  } *cl_ops;
  caddr_t cl_private;
};
# 277 "/usr/include/rpc/clnt.h" 3 4
extern CLIENT *clntraw_create (__const u_long __prog, __const u_long __vers)
     __attribute__ ((__nothrow__));
# 291 "/usr/include/rpc/clnt.h" 3 4
extern CLIENT *clnt_create (__const char *__host, __const u_long __prog,
       __const u_long __vers, __const char *__prot)
     __attribute__ ((__nothrow__));
# 307 "/usr/include/rpc/clnt.h" 3 4
extern CLIENT *clnttcp_create (struct sockaddr_in *__raddr, u_long __prog,
          u_long __version, int *__sockp, u_int __sendsz,
          u_int __recvsz) __attribute__ ((__nothrow__));
# 332 "/usr/include/rpc/clnt.h" 3 4
extern CLIENT *clntudp_create (struct sockaddr_in *__raddr, u_long __program,
          u_long __version, struct timeval __wait_resend,
          int *__sockp) __attribute__ ((__nothrow__));
extern CLIENT *clntudp_bufcreate (struct sockaddr_in *__raddr,
      u_long __program, u_long __version,
      struct timeval __wait_resend, int *__sockp,
      u_int __sendsz, u_int __recvsz) __attribute__ ((__nothrow__));
# 354 "/usr/include/rpc/clnt.h" 3 4
extern CLIENT *clntunix_create (struct sockaddr_un *__raddr, u_long __program,
     u_long __version, int *__sockp,
     u_int __sendsz, u_int __recvsz) __attribute__ ((__nothrow__));


extern int callrpc (__const char *__host, __const u_long __prognum,
      __const u_long __versnum, __const u_long __procnum,
      __const xdrproc_t __inproc, __const char *__in,
      __const xdrproc_t __outproc, char *__out) __attribute__ ((__nothrow__));
extern int _rpc_dtablesize (void) __attribute__ ((__nothrow__));




extern void clnt_pcreateerror (__const char *__msg);
extern char *clnt_spcreateerror(__const char *__msg) __attribute__ ((__nothrow__));




extern void clnt_perrno (enum clnt_stat __num);




extern void clnt_perror (CLIENT *__clnt, __const char *__msg);

extern char *clnt_sperror (CLIENT *__clnt, __const char *__msg) __attribute__ ((__nothrow__));





struct rpc_createerr {
 enum clnt_stat cf_stat;
 struct rpc_err cf_error;
};

extern struct rpc_createerr rpc_createerr;






extern char *clnt_sperrno (enum clnt_stat __num) __attribute__ ((__nothrow__));




extern int getrpcport (__const char * __host, u_long __prognum,
         u_long __versnum, u_int __proto) __attribute__ ((__nothrow__));





extern void get_myaddress (struct sockaddr_in *) __attribute__ ((__nothrow__));





# 49 "/usr/include/rpc/rpc.h" 2 3 4


# 1 "/usr/include/rpc/rpc_msg.h" 1 3 4
# 46 "/usr/include/rpc/rpc_msg.h" 3 4








enum msg_type {
 CALL=0,
 REPLY=1
};

enum reply_stat {
 MSG_ACCEPTED=0,
 MSG_DENIED=1
};

enum accept_stat {
 SUCCESS=0,
 PROG_UNAVAIL=1,
 PROG_MISMATCH=2,
 PROC_UNAVAIL=3,
 GARBAGE_ARGS=4,
 SYSTEM_ERR=5
};

enum reject_stat {
 RPC_MISMATCH=0,
 AUTH_ERROR=1
};
# 87 "/usr/include/rpc/rpc_msg.h" 3 4
struct accepted_reply {
 struct opaque_auth ar_verf;
 enum accept_stat ar_stat;
 union {
  struct {
   u_long low;
   u_long high;
  } AR_versions;
  struct {
   caddr_t where;
   xdrproc_t proc;
  } AR_results;

 } ru;


};




struct rejected_reply {
 enum reject_stat rj_stat;
 union {
  struct {
   u_long low;
   u_long high;
  } RJ_versions;
  enum auth_stat RJ_why;
 } ru;


};




struct reply_body {
 enum reply_stat rp_stat;
 union {
  struct accepted_reply RP_ar;
  struct rejected_reply RP_dr;
 } ru;


};




struct call_body {
 u_long cb_rpcvers;
 u_long cb_prog;
 u_long cb_vers;
 u_long cb_proc;
 struct opaque_auth cb_cred;
 struct opaque_auth cb_verf;
};




struct rpc_msg {
 u_long rm_xid;
 enum msg_type rm_direction;
 union {
  struct call_body RM_cmb;
  struct reply_body RM_rmb;
 } ru;


};
# 169 "/usr/include/rpc/rpc_msg.h" 3 4
extern bool_t xdr_callmsg (XDR *__xdrs, struct rpc_msg *__cmsg) __attribute__ ((__nothrow__));







extern bool_t xdr_callhdr (XDR *__xdrs, struct rpc_msg *__cmsg) __attribute__ ((__nothrow__));







extern bool_t xdr_replymsg (XDR *__xdrs, struct rpc_msg *__rmsg) __attribute__ ((__nothrow__));







extern void _seterr_reply (struct rpc_msg *__msg, struct rpc_err *__error)
     __attribute__ ((__nothrow__));


# 52 "/usr/include/rpc/rpc.h" 2 3 4
# 1 "/usr/include/rpc/auth_unix.h" 1 3 4
# 50 "/usr/include/rpc/auth_unix.h" 3 4

# 61 "/usr/include/rpc/auth_unix.h" 3 4
struct authunix_parms
  {
    u_long aup_time;
    char *aup_machname;
    __uid_t aup_uid;
    __gid_t aup_gid;
    u_int aup_len;
    __gid_t *aup_gids;
  };

extern bool_t xdr_authunix_parms (XDR *__xdrs, struct authunix_parms *__p)
     __attribute__ ((__nothrow__));






struct short_hand_verf
  {
    struct opaque_auth new_cred;
  };


# 53 "/usr/include/rpc/rpc.h" 2 3 4
# 1 "/usr/include/rpc/auth_des.h" 1 3 4
# 25 "/usr/include/rpc/auth_des.h" 3 4



enum authdes_namekind
  {
    ADN_FULLNAME,
    ADN_NICKNAME
  };



struct authdes_fullname
  {
    char *name;
    des_block key;
    uint32_t window;
  };


struct authdes_cred
  {
    enum authdes_namekind adc_namekind;
    struct authdes_fullname adc_fullname;
    uint32_t adc_nickname;
  };


struct rpc_timeval
  {
    uint32_t tv_sec;
    uint32_t tv_usec;
  };


struct authdes_verf
  {
    union
      {
 struct rpc_timeval adv_ctime;
 des_block adv_xtime;
      }
    adv_time_u;
    uint32_t adv_int_u;
  };
# 89 "/usr/include/rpc/auth_des.h" 3 4
extern int authdes_getucred (__const struct authdes_cred * __adc,
        uid_t * __uid, gid_t * __gid,
        short *__grouplen, gid_t * __groups) __attribute__ ((__nothrow__));




extern int getpublickey (__const char *__name, char *__key) __attribute__ ((__nothrow__));






extern int getsecretkey (__const char *__name, char *__key,
    __const char *__passwd) __attribute__ ((__nothrow__));

extern int rtime (struct sockaddr_in *__addrp, struct rpc_timeval *__timep,
    struct rpc_timeval *__timeout) __attribute__ ((__nothrow__));


# 54 "/usr/include/rpc/rpc.h" 2 3 4


# 1 "/usr/include/rpc/svc.h" 1 3 4
# 40 "/usr/include/rpc/svc.h" 3 4

# 64 "/usr/include/rpc/svc.h" 3 4
enum xprt_stat {
 XPRT_DIED,
 XPRT_MOREREQS,
 XPRT_IDLE
};




typedef struct SVCXPRT SVCXPRT;
struct SVCXPRT {
  int xp_sock;
  u_short xp_port;
  const struct xp_ops {
    bool_t (*xp_recv) (SVCXPRT *__xprt, struct rpc_msg *__msg);

    enum xprt_stat (*xp_stat) (SVCXPRT *__xprt);

    bool_t (*xp_getargs) (SVCXPRT *__xprt, xdrproc_t __xdr_args,
          caddr_t __args_ptr);
    bool_t (*xp_reply) (SVCXPRT *__xprt, struct rpc_msg *__msg);

    bool_t (*xp_freeargs) (SVCXPRT *__xprt, xdrproc_t __xdr_args,
    caddr_t __args_ptr);

    void (*xp_destroy) (SVCXPRT *__xprt);

  } *xp_ops;
  int xp_addrlen;
  struct sockaddr_in xp_raddr;
  struct opaque_auth xp_verf;
  caddr_t xp_p1;
  caddr_t xp_p2;
  char xp_pad [256];
};
# 147 "/usr/include/rpc/svc.h" 3 4
struct svc_req {
  rpcprog_t rq_prog;
  rpcvers_t rq_vers;
  rpcproc_t rq_proc;
  struct opaque_auth rq_cred;
  caddr_t rq_clntcred;
  SVCXPRT *rq_xprt;
};



typedef void (*__dispatch_fn_t) (struct svc_req*, SVCXPRT*);
# 171 "/usr/include/rpc/svc.h" 3 4
extern bool_t svc_register (SVCXPRT *__xprt, rpcprog_t __prog,
       rpcvers_t __vers, __dispatch_fn_t __dispatch,
       rpcprot_t __protocol) __attribute__ ((__nothrow__));
# 182 "/usr/include/rpc/svc.h" 3 4
extern void svc_unregister (rpcprog_t __prog, rpcvers_t __vers) __attribute__ ((__nothrow__));







extern void xprt_register (SVCXPRT *__xprt) __attribute__ ((__nothrow__));







extern void xprt_unregister (SVCXPRT *__xprt) __attribute__ ((__nothrow__));
# 227 "/usr/include/rpc/svc.h" 3 4
extern bool_t svc_sendreply (SVCXPRT *__xprt, xdrproc_t __xdr_results,
          caddr_t __xdr_location) __attribute__ ((__nothrow__));

extern void svcerr_decode (SVCXPRT *__xprt) __attribute__ ((__nothrow__));

extern void svcerr_weakauth (SVCXPRT *__xprt) __attribute__ ((__nothrow__));

extern void svcerr_noproc (SVCXPRT *__xprt) __attribute__ ((__nothrow__));

extern void svcerr_progvers (SVCXPRT *__xprt, rpcvers_t __low_vers,
     rpcvers_t __high_vers) __attribute__ ((__nothrow__));

extern void svcerr_auth (SVCXPRT *__xprt, enum auth_stat __why) __attribute__ ((__nothrow__));

extern void svcerr_noprog (SVCXPRT *__xprt) __attribute__ ((__nothrow__));

extern void svcerr_systemerr (SVCXPRT *__xprt) __attribute__ ((__nothrow__));
# 261 "/usr/include/rpc/svc.h" 3 4
extern struct pollfd *svc_pollfd;
extern int svc_max_pollfd;
extern fd_set svc_fdset;






extern void svc_getreq (int __rdfds) __attribute__ ((__nothrow__));
extern void svc_getreq_common (const int __fd) __attribute__ ((__nothrow__));
extern void svc_getreqset (fd_set *__readfds) __attribute__ ((__nothrow__));
extern void svc_getreq_poll (struct pollfd *, const int) __attribute__ ((__nothrow__));
extern void svc_exit (void) __attribute__ ((__nothrow__));
extern void svc_run (void) __attribute__ ((__nothrow__));
# 289 "/usr/include/rpc/svc.h" 3 4
extern SVCXPRT *svcraw_create (void) __attribute__ ((__nothrow__));




extern SVCXPRT *svcudp_create (int __sock) __attribute__ ((__nothrow__));
extern SVCXPRT *svcudp_bufcreate (int __sock, u_int __sendsz, u_int __recvsz)
     __attribute__ ((__nothrow__));




extern SVCXPRT *svctcp_create (int __sock, u_int __sendsize, u_int __recvsize)
     __attribute__ ((__nothrow__));




extern SVCXPRT *svcfd_create (int __sock, u_int __sendsize, u_int __recvsize)
     __attribute__ ((__nothrow__));




extern SVCXPRT *svcunix_create (int __sock, u_int __sendsize, u_int __recvsize,
    char *__path) __attribute__ ((__nothrow__));



# 57 "/usr/include/rpc/rpc.h" 2 3 4
# 1 "/usr/include/rpc/svc_auth.h" 1 3 4
# 40 "/usr/include/rpc/svc_auth.h" 3 4





extern enum auth_stat _authenticate (struct svc_req *__rqst,
         struct rpc_msg *__msg) __attribute__ ((__nothrow__));


# 58 "/usr/include/rpc/rpc.h" 2 3 4
# 67 "/usr/include/rpc/rpc.h" 3 4



extern fd_set *__rpc_thread_svc_fdset (void) __attribute__ ((__const__));


extern struct rpc_createerr *__rpc_thread_createerr (void)
     __attribute__ ((__const__));
# 85 "/usr/include/rpc/rpc.h" 3 4
extern struct pollfd **__rpc_thread_svc_pollfd (void)
     __attribute__ ((__const__));


extern int *__rpc_thread_svc_max_pollfd (void) __attribute__ ((__const__));



# 6 "libdscuda.cu" 2
# 1 "/usr/include/time.h" 1 3 4
# 30 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 1 3 4
# 39 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 43 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 180 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) __attribute__ ((__nothrow__));

# 217 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__));
# 230 "/usr/include/time.h" 3 4



extern struct tm *gmtime (__const time_t *__timer) __attribute__ ((__nothrow__));



extern struct tm *localtime (__const time_t *__timer) __attribute__ ((__nothrow__));





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__));



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__));





extern char *asctime (__const struct tm *__tp) __attribute__ ((__nothrow__));


extern char *ctime (__const time_t *__timer) __attribute__ ((__nothrow__));







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__));


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__));



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) __attribute__ ((__nothrow__));
# 313 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__));


extern int dysize (int __year) __attribute__ ((__nothrow__)) __attribute__ ((__const__));
# 328 "/usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__));


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     __attribute__ ((__nothrow__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__));


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__));
# 417 "/usr/include/time.h" 3 4

# 7 "libdscuda.cu" 2

# 1 "/usr/include/unistd.h" 1 3 4
# 28 "/usr/include/unistd.h" 3 4

# 203 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 204 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 23 "/usr/include/bits/environments.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/environments.h" 2 3 4
# 208 "/usr/include/unistd.h" 2 3 4
# 227 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 1 3 4
# 228 "/usr/include/unistd.h" 2 3 4
# 256 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;
# 288 "/usr/include/unistd.h" 3 4
extern int access (__const char *__name, int __type) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 305 "/usr/include/unistd.h" 3 4
extern int faccessat (int __fd, __const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;
# 331 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__));
# 350 "/usr/include/unistd.h" 3 4
extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, __const void *__buf, size_t __n) ;
# 373 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, __const void *__buf, size_t __n,
         __off_t __offset) ;
# 414 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__)) ;
# 429 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__));
# 441 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__));






extern int usleep (__useconds_t __useconds);
# 466 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (__const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__)) ;




extern int lchown (__const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, __const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (__const char *__path) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__)) ;
# 508 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__)) ;
# 522 "/usr/include/unistd.h" 3 4
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__));
# 540 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (__const char *__path, char *__const __argv[],
     char *__const __envp[]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *__const __argv[], char *__const __envp[])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));




extern int execv (__const char *__path, char *__const __argv[])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (__const char *__path, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (__const char *__path, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (__const char *__file, char *__const __argv[])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (__const char *__file, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 595 "/usr/include/unistd.h" 3 4
extern int nice (int __inc) __attribute__ ((__nothrow__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 26 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 607 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (__const char *__path, int __name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__));




extern __pid_t getpgrp (void) __attribute__ ((__nothrow__));
# 643 "/usr/include/unistd.h" 3 4
extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__));
# 669 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__));
# 686 "/usr/include/unistd.h" 3 4
extern __pid_t setsid (void) __attribute__ ((__nothrow__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__)) ;
# 719 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__));




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__));




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__));






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__));




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__));




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__));
# 775 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__));





extern int ttyslot (void) __attribute__ ((__nothrow__));




extern int link (__const char *__from, __const char *__to)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, __const char *__from, int __tofd,
     __const char *__to, int __flags)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (__const char *__from, __const char *__to)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (__const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (__const char *__from, int __tofd,
        __const char *__to) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, __const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, __const char *__name, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (__const char *__path) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 890 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 59 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 73 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 152 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__));
# 891 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (__const char *__name, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (__const char *__name, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__));


extern int revoke (__const char *__file) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int acct (__const char *__name) __attribute__ ((__nothrow__));



extern char *getusershell (void) __attribute__ ((__nothrow__));
extern void endusershell (void) __attribute__ ((__nothrow__));
extern void setusershell (void) __attribute__ ((__nothrow__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__)) ;






extern int chroot (__const char *__path) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (__const char *__prompt) __attribute__ ((__nonnull__ (1)));
# 976 "/usr/include/unistd.h" 3 4
extern int fsync (int __fd);






extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__));





extern int getpagesize (void) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__));
# 1007 "/usr/include/unistd.h" 3 4
extern int truncate (__const char *__file, __off_t __length)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 1029 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__)) ;
# 1050 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__));
# 1071 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__));
# 1094 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1125 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);
# 1154 "/usr/include/unistd.h" 3 4
extern char *ctermid (char *__s) __attribute__ ((__nothrow__));
# 1163 "/usr/include/unistd.h" 3 4

# 9 "libdscuda.cu" 2
# 1 "dscuda.h" 1



# 1 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h" 1
# 150 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
# 1 "/usr/local/cuda4.1/cuda/include/host_defines.h" 1
# 151 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h" 2
# 1 "/usr/local/cuda4.1/cuda/include/builtin_types.h" 1
# 56 "/usr/local/cuda4.1/cuda/include/builtin_types.h"
# 1 "/usr/local/cuda4.1/cuda/include/device_types.h" 1
# 61 "/usr/local/cuda4.1/cuda/include/device_types.h"
enum cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};
# 57 "/usr/local/cuda4.1/cuda/include/builtin_types.h" 2
# 1 "/usr/local/cuda4.1/cuda/include/driver_types.h" 1
# 76 "/usr/local/cuda4.1/cuda/include/driver_types.h"
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/limits.h" 1 3 4
# 77 "/usr/local/cuda4.1/cuda/include/driver_types.h" 2
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 78 "/usr/local/cuda4.1/cuda/include/driver_types.h" 2
# 126 "/usr/local/cuda4.1/cuda/include/driver_types.h"
enum cudaError
{





    cudaSuccess = 0,





    cudaErrorMissingConfiguration = 1,





    cudaErrorMemoryAllocation = 2,





    cudaErrorInitializationError = 3,
# 161 "/usr/local/cuda4.1/cuda/include/driver_types.h"
    cudaErrorLaunchFailure = 4,
# 170 "/usr/local/cuda4.1/cuda/include/driver_types.h"
    cudaErrorPriorLaunchFailure = 5,
# 180 "/usr/local/cuda4.1/cuda/include/driver_types.h"
    cudaErrorLaunchTimeout = 6,
# 189 "/usr/local/cuda4.1/cuda/include/driver_types.h"
    cudaErrorLaunchOutOfResources = 7,





    cudaErrorInvalidDeviceFunction = 8,
# 204 "/usr/local/cuda4.1/cuda/include/driver_types.h"
    cudaErrorInvalidConfiguration = 9,





    cudaErrorInvalidDevice = 10,





    cudaErrorInvalidValue = 11,





    cudaErrorInvalidPitchValue = 12,





    cudaErrorInvalidSymbol = 13,




    cudaErrorMapBufferObjectFailed = 14,




    cudaErrorUnmapBufferObjectFailed = 15,





    cudaErrorInvalidHostPointer = 16,





    cudaErrorInvalidDevicePointer = 17,





    cudaErrorInvalidTexture = 18,





    cudaErrorInvalidTextureBinding = 19,






    cudaErrorInvalidChannelDescriptor = 20,





    cudaErrorInvalidMemcpyDirection = 21,
# 285 "/usr/local/cuda4.1/cuda/include/driver_types.h"
    cudaErrorAddressOfConstant = 22,
# 294 "/usr/local/cuda4.1/cuda/include/driver_types.h"
    cudaErrorTextureFetchFailed = 23,
# 303 "/usr/local/cuda4.1/cuda/include/driver_types.h"
    cudaErrorTextureNotBound = 24,
# 312 "/usr/local/cuda4.1/cuda/include/driver_types.h"
    cudaErrorSynchronizationError = 25,





    cudaErrorInvalidFilterSetting = 26,





    cudaErrorInvalidNormSetting = 27,







    cudaErrorMixedDeviceExecution = 28,






    cudaErrorCudartUnloading = 29,




    cudaErrorUnknown = 30,







    cudaErrorNotYetImplemented = 31,
# 361 "/usr/local/cuda4.1/cuda/include/driver_types.h"
    cudaErrorMemoryValueTooLarge = 32,






    cudaErrorInvalidResourceHandle = 33,







    cudaErrorNotReady = 34,






    cudaErrorInsufficientDriver = 35,
# 396 "/usr/local/cuda4.1/cuda/include/driver_types.h"
    cudaErrorSetOnActiveProcess = 36,





    cudaErrorInvalidSurface = 37,





    cudaErrorNoDevice = 38,





    cudaErrorECCUncorrectable = 39,




    cudaErrorSharedObjectSymbolNotFound = 40,




    cudaErrorSharedObjectInitFailed = 41,





    cudaErrorUnsupportedLimit = 42,





    cudaErrorDuplicateVariableName = 43,





    cudaErrorDuplicateTextureName = 44,





    cudaErrorDuplicateSurfaceName = 45,
# 458 "/usr/local/cuda4.1/cuda/include/driver_types.h"
    cudaErrorDevicesUnavailable = 46,




    cudaErrorInvalidKernelImage = 47,







    cudaErrorNoKernelImageForDevice = 48,
# 484 "/usr/local/cuda4.1/cuda/include/driver_types.h"
    cudaErrorIncompatibleDriverContext = 49,






    cudaErrorPeerAccessAlreadyEnabled = 50,






    cudaErrorPeerAccessNotEnabled = 51,





    cudaErrorDeviceAlreadyInUse = 54,







    cudaErrorProfilerDisabled = 55,






    cudaErrorProfilerNotInitialized = 56,






    cudaErrorProfilerAlreadyStarted = 57,





     cudaErrorProfilerAlreadyStopped = 58,







    cudaErrorAssert = 59,






    cudaErrorTooManyPeers = 60,





    cudaErrorHostMemoryAlreadyRegistered = 61,





    cudaErrorHostMemoryNotRegistered = 62,




    cudaErrorOperatingSystem = 63,




    cudaErrorStartupFailure = 0x7f,







    cudaErrorApiFailureBase = 10000
};




enum cudaChannelFormatKind
{
    cudaChannelFormatKindSigned = 0,
    cudaChannelFormatKindUnsigned = 1,
    cudaChannelFormatKindFloat = 2,
    cudaChannelFormatKindNone = 3
};




struct cudaChannelFormatDesc
{
    int x;
    int y;
    int z;
    int w;
    enum cudaChannelFormatKind f;
};




struct cudaArray;




enum cudaMemoryType
{
    cudaMemoryTypeHost = 1,
    cudaMemoryTypeDevice = 2
};




enum cudaMemcpyKind
{
    cudaMemcpyHostToHost = 0,
    cudaMemcpyHostToDevice = 1,
    cudaMemcpyDeviceToHost = 2,
    cudaMemcpyDeviceToDevice = 3,
    cudaMemcpyDefault = 4
};





struct cudaPitchedPtr
{
    void *ptr;
    size_t pitch;
    size_t xsize;
    size_t ysize;
};





struct cudaExtent
{
    size_t width;
    size_t height;
    size_t depth;
};





struct cudaPos
{
    size_t x;
    size_t y;
    size_t z;
};




struct cudaMemcpy3DParms
{
    struct cudaArray *srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;

    struct cudaArray *dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;

    struct cudaExtent extent;
    enum cudaMemcpyKind kind;
};




struct cudaMemcpy3DPeerParms
{
    struct cudaArray *srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;
    int srcDevice;

    struct cudaArray *dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;
    int dstDevice;

    struct cudaExtent extent;
};




struct cudaGraphicsResource;




enum cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone = 0,
    cudaGraphicsRegisterFlagsReadOnly = 1,
    cudaGraphicsRegisterFlagsWriteDiscard = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather = 8
};




enum cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone = 0,
    cudaGraphicsMapFlagsReadOnly = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2
};




enum cudaGraphicsCubeFace
{
    cudaGraphicsCubeFacePositiveX = 0x00,
    cudaGraphicsCubeFaceNegativeX = 0x01,
    cudaGraphicsCubeFacePositiveY = 0x02,
    cudaGraphicsCubeFaceNegativeY = 0x03,
    cudaGraphicsCubeFacePositiveZ = 0x04,
    cudaGraphicsCubeFaceNegativeZ = 0x05
};




struct cudaPointerAttributes
{




    enum cudaMemoryType memoryType;
# 758 "/usr/local/cuda4.1/cuda/include/driver_types.h"
    int device;





    void *devicePointer;





    void *hostPointer;
};




struct cudaFuncAttributes
{





   size_t sharedSizeBytes;





   size_t constSizeBytes;




   size_t localSizeBytes;






   int maxThreadsPerBlock;




   int numRegs;






   int ptxVersion;






   int binaryVersion;
};




enum cudaFuncCache
{
    cudaFuncCachePreferNone = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1 = 2,
    cudaFuncCachePreferEqual = 3
};




enum cudaComputeMode
{
    cudaComputeModeDefault = 0,
    cudaComputeModeExclusive = 1,
    cudaComputeModeProhibited = 2,
    cudaComputeModeExclusiveProcess = 3
};




enum cudaLimit
{
    cudaLimitStackSize = 0x00,
    cudaLimitPrintfFifoSize = 0x01,
    cudaLimitMallocHeapSize = 0x02
};




enum cudaOutputMode
{
    cudaKeyValuePair = 0x00,
    cudaCSV = 0x01
};




struct cudaDeviceProp
{
    char name[256];
    size_t totalGlobalMem;
    size_t sharedMemPerBlock;
    int regsPerBlock;
    int warpSize;
    size_t memPitch;
    int maxThreadsPerBlock;
    int maxThreadsDim[3];
    int maxGridSize[3];
    int clockRate;
    size_t totalConstMem;
    int major;
    int minor;
    size_t textureAlignment;
    size_t texturePitchAlignment;
    int deviceOverlap;
    int multiProcessorCount;
    int kernelExecTimeoutEnabled;
    int integrated;
    int canMapHostMemory;
    int computeMode;
    int maxTexture1D;
    int maxTexture1DLinear;
    int maxTexture2D[2];
    int maxTexture2DLinear[3];
    int maxTexture2DGather[2];
    int maxTexture3D[3];
    int maxTextureCubemap;
    int maxTexture1DLayered[2];
    int maxTexture2DLayered[3];
    int maxTextureCubemapLayered[2];
    int maxSurface1D;
    int maxSurface2D[2];
    int maxSurface3D[3];
    int maxSurface1DLayered[2];
    int maxSurface2DLayered[3];
    int maxSurfaceCubemap;
    int maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;
    int concurrentKernels;
    int ECCEnabled;
    int pciBusID;
    int pciDeviceID;
    int pciDomainID;
    int tccDriver;
    int asyncEngineCount;
    int unifiedAddressing;
    int memoryClockRate;
    int memoryBusWidth;
    int l2CacheSize;
    int maxThreadsPerMultiProcessor;
};
# 982 "/usr/local/cuda4.1/cuda/include/driver_types.h"
struct cudaIpcEventHandle_st
{
    char reserved[64];
};

struct cudaIpcMemHandle_st
{
    char reserved[64];
};
# 1001 "/usr/local/cuda4.1/cuda/include/driver_types.h"
typedef enum cudaError cudaError_t;




typedef struct CUstream_st *cudaStream_t;




typedef struct CUevent_st *cudaEvent_t;




typedef struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef struct CUuuid_st cudaUUID_t;




typedef struct cudaIpcEventHandle_st cudaIpcEventHandle_t;
typedef struct cudaIpcMemHandle_st cudaIpcMemHandle_t;




typedef enum cudaOutputMode cudaOutputMode_t;
# 58 "/usr/local/cuda4.1/cuda/include/builtin_types.h" 2
# 1 "/usr/local/cuda4.1/cuda/include/surface_types.h" 1
# 84 "/usr/local/cuda4.1/cuda/include/surface_types.h"
enum cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero = 0,
    cudaBoundaryModeClamp = 1,
    cudaBoundaryModeTrap = 2
};




enum cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,
    cudaFormatModeAuto = 1
};




struct surfaceReference
{



    struct cudaChannelFormatDesc channelDesc;
};
# 59 "/usr/local/cuda4.1/cuda/include/builtin_types.h" 2
# 1 "/usr/local/cuda4.1/cuda/include/texture_types.h" 1
# 84 "/usr/local/cuda4.1/cuda/include/texture_types.h"
enum cudaTextureAddressMode
{
    cudaAddressModeWrap = 0,
    cudaAddressModeClamp = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3
};




enum cudaTextureFilterMode
{
    cudaFilterModePoint = 0,
    cudaFilterModeLinear = 1
};




enum cudaTextureReadMode
{
    cudaReadModeElementType = 0,
    cudaReadModeNormalizedFloat = 1
};




struct textureReference
{



    int normalized;



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureAddressMode addressMode[3];



    struct cudaChannelFormatDesc channelDesc;



    int sRGB;
    int __cudaReserved[15];
};
# 60 "/usr/local/cuda4.1/cuda/include/builtin_types.h" 2
# 1 "/usr/local/cuda4.1/cuda/include/vector_types.h" 1
# 59 "/usr/local/cuda4.1/cuda/include/vector_types.h"
# 1 "/usr/local/cuda4.1/cuda/include/builtin_types.h" 1
# 60 "/usr/local/cuda4.1/cuda/include/builtin_types.h"
# 1 "/usr/local/cuda4.1/cuda/include/vector_types.h" 1
# 60 "/usr/local/cuda4.1/cuda/include/builtin_types.h" 2
# 60 "/usr/local/cuda4.1/cuda/include/vector_types.h" 2
# 94 "/usr/local/cuda4.1/cuda/include/vector_types.h"
struct char1
{
    signed char x;
};

struct uchar1
{
    unsigned char x;
};


struct __attribute__((aligned(2))) char2
{
    signed char x, y;
};

struct __attribute__((aligned(2))) uchar2
{
    unsigned char x, y;
};

struct char3
{
    signed char x, y, z;
};

struct uchar3
{
    unsigned char x, y, z;
};

struct __attribute__((aligned(4))) char4
{
    signed char x, y, z, w;
};

struct __attribute__((aligned(4))) uchar4
{
    unsigned char x, y, z, w;
};

struct short1
{
    short x;
};

struct ushort1
{
    unsigned short x;
};

struct __attribute__((aligned(4))) short2
{
    short x, y;
};

struct __attribute__((aligned(4))) ushort2
{
    unsigned short x, y;
};

struct short3
{
    short x, y, z;
};

struct ushort3
{
    unsigned short x, y, z;
};

struct __attribute__((aligned(8))) short4 { short x; short y; short z; short w; };
struct __attribute__((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct int1
{
    int x;
};

struct uint1
{
    unsigned int x;
};

struct __attribute__((aligned(8))) int2 { int x; int y; };
struct __attribute__((aligned(8))) uint2 { unsigned int x; unsigned int y; };

struct int3
{
    int x, y, z;
};

struct uint3
{
    unsigned int x, y, z;
};

struct __attribute__((aligned(16))) int4
{
    int x, y, z, w;
};

struct __attribute__((aligned(16))) uint4
{
    unsigned int x, y, z, w;
};

struct long1
{
    long int x;
};

struct ulong1
{
    unsigned long x;
};






struct __attribute__((aligned(2*sizeof(long int)))) long2
{
    long int x, y;
};

struct __attribute__((aligned(2*sizeof(unsigned long int)))) ulong2
{
    unsigned long int x, y;
};



struct long3
{
    long int x, y, z;
};

struct ulong3
{
    unsigned long int x, y, z;
};

struct __attribute__((aligned(16))) long4
{
    long int x, y, z, w;
};

struct __attribute__((aligned(16))) ulong4
{
    unsigned long int x, y, z, w;
};

struct float1
{
    float x;
};

struct __attribute__((aligned(8))) float2 { float x; float y; };

struct float3
{
    float x, y, z;
};

struct __attribute__((aligned(16))) float4
{
    float x, y, z, w;
};

struct longlong1
{
    long long int x;
};

struct ulonglong1
{
    unsigned long long int x;
};

struct __attribute__((aligned(16))) longlong2
{
    long long int x, y;
};

struct __attribute__((aligned(16))) ulonglong2
{
    unsigned long long int x, y;
};

struct longlong3
{
    long long int x, y, z;
};

struct ulonglong3
{
    unsigned long long int x, y, z;
};

struct __attribute__((aligned(16))) longlong4
{
    long long int x, y, z ,w;
};

struct __attribute__((aligned(16))) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct double1
{
    double x;
};

struct __attribute__((aligned(16))) double2
{
    double x, y;
};

struct double3
{
    double x, y, z;
};

struct __attribute__((aligned(16))) double4
{
    double x, y, z, w;
};
# 338 "/usr/local/cuda4.1/cuda/include/vector_types.h"
typedef struct char1 char1;
typedef struct uchar1 uchar1;
typedef struct char2 char2;
typedef struct uchar2 uchar2;
typedef struct char3 char3;
typedef struct uchar3 uchar3;
typedef struct char4 char4;
typedef struct uchar4 uchar4;
typedef struct short1 short1;
typedef struct ushort1 ushort1;
typedef struct short2 short2;
typedef struct ushort2 ushort2;
typedef struct short3 short3;
typedef struct ushort3 ushort3;
typedef struct short4 short4;
typedef struct ushort4 ushort4;
typedef struct int1 int1;
typedef struct uint1 uint1;
typedef struct int2 int2;
typedef struct uint2 uint2;
typedef struct int3 int3;
typedef struct uint3 uint3;
typedef struct int4 int4;
typedef struct uint4 uint4;
typedef struct long1 long1;
typedef struct ulong1 ulong1;
typedef struct long2 long2;
typedef struct ulong2 ulong2;
typedef struct long3 long3;
typedef struct ulong3 ulong3;
typedef struct long4 long4;
typedef struct ulong4 ulong4;
typedef struct float1 float1;
typedef struct float2 float2;
typedef struct float3 float3;
typedef struct float4 float4;
typedef struct longlong1 longlong1;
typedef struct ulonglong1 ulonglong1;
typedef struct longlong2 longlong2;
typedef struct ulonglong2 ulonglong2;
typedef struct longlong3 longlong3;
typedef struct ulonglong3 ulonglong3;
typedef struct longlong4 longlong4;
typedef struct ulonglong4 ulonglong4;
typedef struct double1 double1;
typedef struct double2 double2;
typedef struct double3 double3;
typedef struct double4 double4;







struct dim3
{
    unsigned int x, y, z;





};

typedef struct dim3 dim3;
# 60 "/usr/local/cuda4.1/cuda/include/builtin_types.h" 2
# 152 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h" 2
# 200 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceReset(void);
# 217 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSynchronize(void);
# 269 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetLimit(enum cudaLimit limit, size_t value);
# 293 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
# 323 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 364 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);
# 387 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetByPCIBusId(int *device, char *pciBusId);
# 414 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);
# 456 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);
# 491 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);
# 529 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);
# 576 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);
# 606 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcCloseMemHandle(void *devPtr);
# 640 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadExit(void);
# 664 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadSynchronize(void);
# 723 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadSetLimit(enum cudaLimit limit, size_t value);
# 754 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);
# 789 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 835 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);
# 887 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetLastError(void);
# 928 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaPeekAtLastError(void);
# 942 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern const char* cudaGetErrorString(cudaError_t error);
# 972 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceCount(int *count);
# 1175 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);
# 1194 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);
# 1227 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDevice(int device);
# 1244 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDevice(int *device);
# 1273 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetValidDevices(int *device_arr, int len);
# 1333 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDeviceFlags( unsigned int flags );
# 1359 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreate(cudaStream_t *pStream);
# 1380 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamDestroy(cudaStream_t stream);
# 1416 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
# 1435 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSynchronize(cudaStream_t stream);
# 1453 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamQuery(cudaStream_t stream);
# 1485 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreate(cudaEvent_t *event);
# 1516 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
# 1549 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream );
# 1578 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventQuery(cudaEvent_t event);
# 1610 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventSynchronize(cudaEvent_t event);
# 1635 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventDestroy(cudaEvent_t event);
# 1676 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);
# 1715 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem , cudaStream_t stream );
# 1742 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetupArgument(const void *arg, size_t size, size_t offset);
# 1788 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetCacheConfig(const char *func, enum cudaFuncCache cacheConfig);
# 1824 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunch(const char *entry);
# 1857 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const char *func);
# 1879 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDoubleForDevice(double *d);
# 1901 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDoubleForHost(double *d);
# 1933 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc(void **devPtr, size_t size);
# 1962 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocHost(void **ptr, size_t size);
# 2001 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);
# 2043 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocArray(struct cudaArray **array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height , unsigned int flags );
# 2067 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFree(void *devPtr);
# 2087 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeHost(void *ptr);
# 2109 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeArray(struct cudaArray *array);
# 2168 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostAlloc(void **pHost, size_t size, unsigned int flags);
# 2221 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostRegister(void *ptr, size_t size, unsigned int flags);
# 2240 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostUnregister(void *ptr);
# 2267 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);
# 2286 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetFlags(unsigned int *pFlags, void *pHost);
# 2321 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);
# 2421 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3DArray(struct cudaArray** array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags );
# 2519 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *p);
# 2547 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);
# 2651 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream );
# 2673 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream );
# 2692 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemGetInfo(size_t *free, size_t *total);
# 2713 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, struct cudaArray *array);
# 2748 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);
# 2780 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);
# 2814 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToArray(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);
# 2848 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromArray(void *dst, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);
# 2883 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyArrayToArray(struct cudaArray *dst, size_t wOffsetDst, size_t hOffsetDst, const struct cudaArray *src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind );
# 2925 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 2967 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArray(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 3009 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArray(void *dst, size_t dpitch, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);
# 3049 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DArrayToArray(struct cudaArray *dst, size_t wOffsetDst, size_t hOffsetDst, const struct cudaArray *src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind );
# 3084 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbol(const char *symbol, const void *src, size_t count, size_t offset , enum cudaMemcpyKind kind );
# 3119 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbol(void *dst, const char *symbol, size_t count, size_t offset , enum cudaMemcpyKind kind );
# 3161 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream );
# 3192 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream );
# 3233 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToArrayAsync(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream );
# 3274 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromArrayAsync(void *dst, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream );
# 3325 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream );
# 3375 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArrayAsync(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream );
# 3424 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream );
# 3466 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbolAsync(const char *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream );
# 3508 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbolAsync(void *dst, const char *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream );
# 3531 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset(void *devPtr, int value, size_t count);
# 3558 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);
# 3598 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);
# 3626 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream );
# 3659 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream );
# 3705 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream );
# 3732 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolAddress(void **devPtr, const char *symbol);
# 3754 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolSize(size_t *size, const char *symbol);
# 3899 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);
# 3933 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);
# 3974 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);
# 3999 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice);
# 4045 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);
# 4077 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);
# 4112 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream );
# 4143 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream );
# 4172 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);
# 4206 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsSubResourceGetMappedArray(struct cudaArray **array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);
# 4239 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, const struct cudaArray *array);
# 4274 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern struct cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);
# 4321 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size );
# 4372 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);
# 4400 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaBindTextureToArray(const struct textureReference *texref, const struct cudaArray *array, const struct cudaChannelFormatDesc *desc);
# 4421 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaUnbindTexture(const struct textureReference *texref);
# 4446 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);
# 4480 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureReference(const struct textureReference **texref, const char *symbol);
# 4514 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaBindSurfaceToArray(const struct surfaceReference *surfref, const struct cudaArray *array, const struct cudaChannelFormatDesc *desc);
# 4542 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSurfaceReference(const struct surfaceReference **surfref, const char *symbol);
# 4570 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDriverGetVersion(int *driverVersion);
# 4587 "/usr/local/cuda4.1/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaRuntimeGetVersion(int *runtimeVersion);




extern cudaError_t cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);
# 5 "dscuda.h" 2
# 1 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h" 1
# 60 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
    enum CUTBoolean
    {
        CUTFalse = 0,
        CUTTrue = 1
    };





   
    void
   cutFree( void* ptr);
# 88 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    void
    cutCheckBankAccess( unsigned int tidx, unsigned int tidy, unsigned int tidz,
                        unsigned int bdimx, unsigned int bdimy,
                        unsigned int bdimz, const char* file, const int line,
                        const char* aname, const int index);







   
    char*
    cutFindFilePath(const char* filename, const char* executablePath);
# 116 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFilef( const char* filename, float** data, unsigned int* len,
                  bool verbose = false);
# 132 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFiled( const char* filename, double** data, unsigned int* len,
                  bool verbose = false);
# 148 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFilei( const char* filename, int** data, unsigned int* len, bool verbose = false);
# 163 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFileui( const char* filename, unsigned int** data,
                   unsigned int* len, bool verbose = false);
# 179 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFileb( const char* filename, char** data, unsigned int* len,
                  bool verbose = false);
# 195 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFileub( const char* filename, unsigned char** data,
                   unsigned int* len, bool verbose = false);
# 209 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFilef( const char* filename, const float* data, unsigned int len,
                   const float epsilon, bool verbose = false);
# 223 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFiled( const char* filename, const float* data, unsigned int len,
                   const double epsilon, bool verbose = false);
# 235 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFilei( const char* filename, const int* data, unsigned int len,
                   bool verbose = false);
# 247 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFileui( const char* filename,const unsigned int* data,
                    unsigned int len, bool verbose = false);
# 259 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFileb( const char* filename, const char* data, unsigned int len,
                   bool verbose = false);
# 271 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFileub( const char* filename,const unsigned char* data,
                    unsigned int len, bool verbose = false);
# 287 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutLoadPGMub( const char* file, unsigned char** data,
                  unsigned int *w,unsigned int *h);
# 300 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutLoadPPMub( const char* file, unsigned char** data,
                  unsigned int *w,unsigned int *h);
# 314 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutLoadPPM4ub( const char* file, unsigned char** data,
                   unsigned int *w,unsigned int *h);
# 330 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
        cutLoadPGMi( const char* file, unsigned int** data,
                     unsigned int* w, unsigned int* h);
# 346 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
        cutLoadPGMs( const char* file, unsigned short** data,
                     unsigned int* w, unsigned int* h);
# 361 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
        cutLoadPGMf( const char* file, float** data,
                     unsigned int* w, unsigned int* h);
# 373 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
        cutSavePGMub( const char* file, unsigned char* data,
                      unsigned int w, unsigned int h);
# 385 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePPMub( const char* file, unsigned char *data,
                unsigned int w, unsigned int h);
# 398 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePPM4ub( const char* file, unsigned char *data,
                   unsigned int w, unsigned int h);
# 410 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePGMi( const char* file, unsigned int* data,
                 unsigned int w, unsigned int h);
# 422 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePGMs( const char* file, unsigned short* data,
                 unsigned int w, unsigned int h);
# 434 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePGMf( const char* file, float* data,
                 unsigned int w, unsigned int h);
# 455 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCheckCmdLineFlag( const int argc, const char** argv,
                         const char* flag_name);
# 469 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutGetCmdLineArgumenti( const int argc, const char** argv,
                            const char* arg_name, int* val);
# 483 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutGetCmdLineArgumentf( const int argc, const char** argv,
                            const char* arg_name, float* val);
# 497 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutGetCmdLineArgumentstr( const int argc, const char** argv,
                              const char* arg_name, char** val);
# 512 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutGetCmdLineArgumentListstr( const int argc, const char** argv,
                                  const char* arg_name, char** val,
                                  unsigned int* len);
# 526 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCheckCondition( int val, const char* file, const int line);
# 538 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutComparef( const float* reference, const float* data,
                 const unsigned int len);
# 551 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutComparei( const int* reference, const int* data,
                 const unsigned int len );
# 565 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareuit( const unsigned int* reference, const unsigned int* data,
                const unsigned int len, const float epsilon, const float threshold );
# 578 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareub( const unsigned char* reference, const unsigned char* data,
                  const unsigned int len );
# 593 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareubt( const unsigned char* reference, const unsigned char* data,
                 const unsigned int len, const float epsilon, const float threshold );
# 607 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareube( const unsigned char* reference, const unsigned char* data,
                 const unsigned int len, const float epsilon );
# 621 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutComparefe( const float* reference, const float* data,
                  const unsigned int len, const float epsilon );
# 636 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutComparefet( const float* reference, const float* data,
                 const unsigned int len, const float epsilon, const float threshold );
# 651 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareL2fe( const float* reference, const float* data,
                    const unsigned int len, const float epsilon );
# 666 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
 cutComparePPM( const char *src_file, const char *ref_file, const float epsilon, const float threshold, bool verboseErrors = false );
# 679 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCreateTimer( unsigned int* name);






   
    CUTBoolean
    cutDeleteTimer( unsigned int name);





   
    CUTBoolean
    cutStartTimer( const unsigned int name);





   
    CUTBoolean
    cutStopTimer( const unsigned int name);





   
    CUTBoolean
    cutResetTimer( const unsigned int name);






   
    float
    cutGetTimerValue( const unsigned int name);
# 732 "/usr/local/cuda4.1/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    float
    cutGetAverageTimerValue( const unsigned int name);
# 6 "dscuda.h" 2
# 1 "/usr/local/cuda4.1/cuda/include/builtin_types.h" 1
# 7 "dscuda.h" 2
# 1 "/usr/local/cuda4.1/cuda/include/driver_types.h" 1
# 8 "dscuda.h" 2
# 1 "/usr/local/cuda4.1/cuda/include/cuda_texture_types.h" 1
# 9 "dscuda.h" 2
# 1 "/usr/local/cuda4.1/cuda/include/texture_types.h" 1
# 10 "dscuda.h" 2
# 1 "dscudarpc.h" 1
# 17 "dscudarpc.h"
typedef u_quad_t RCadr;

typedef u_int RCsize;

typedef u_int RCerror;

typedef u_quad_t RCstream;

typedef u_quad_t RCevent;

typedef struct {
 u_int RCbuf_len;
 char *RCbuf_val;
} RCbuf;

typedef u_int RCchannelformat;

typedef u_quad_t RCipaddr;

typedef u_long RCpid;

struct RCchanneldesc_t {
 RCchannelformat f;
 int w;
 int x;
 int y;
 int z;
};
typedef struct RCchanneldesc_t RCchanneldesc_t;

typedef RCchanneldesc_t RCchanneldesc;

struct RCtexture_t {
 int normalized;
 int filterMode;
 int addressMode[3];
 RCchannelformat f;
 int w;
 int x;
 int y;
 int z;
};
typedef struct RCtexture_t RCtexture_t;

typedef RCtexture_t RCtexture;

struct RCfuncattr_t {
 int binaryVersion;
 RCsize constSizeBytes;
 RCsize localSizeBytes;
 int maxThreadsPerBlock;
 int numRegs;
 int ptxVersion;
 RCsize sharedSizeBytes;
};
typedef struct RCfuncattr_t RCfuncattr_t;

typedef RCfuncattr_t RCfuncattr;

enum RCargType {
 dscudaArgTypeP = 0,
 dscudaArgTypeI = 1,
 dscudaArgTypeF = 2,
 dscudaArgTypeV = 3,
};
typedef enum RCargType RCargType;

struct RCargVal {
 RCargType type;
 union {
  RCadr address;
  u_int valuei;
  float valuef;
  char valuev[64];
 } RCargVal_u;
};
typedef struct RCargVal RCargVal;

struct RCarg {
 RCargVal val;
 u_int offset;
 u_int size;
};
typedef struct RCarg RCarg;

typedef struct {
 u_int RCargs_len;
 RCarg *RCargs_val;
} RCargs;

struct dscudaResult {
 RCerror err;
};
typedef struct dscudaResult dscudaResult;

struct dscudaThreadGetLimitResult {
 RCerror err;
 RCsize value;
};
typedef struct dscudaThreadGetLimitResult dscudaThreadGetLimitResult;

struct dscudaThreadGetCacheConfigResult {
 RCerror err;
 int cacheConfig;
};
typedef struct dscudaThreadGetCacheConfigResult dscudaThreadGetCacheConfigResult;

struct dscudaMallocResult {
 RCerror err;
 RCadr devAdr;
};
typedef struct dscudaMallocResult dscudaMallocResult;

struct dscudaHostAllocResult {
 RCerror err;
 RCadr pHost;
};
typedef struct dscudaHostAllocResult dscudaHostAllocResult;

struct dscudaMallocHostResult {
 RCerror err;
 RCadr ptr;
};
typedef struct dscudaMallocHostResult dscudaMallocHostResult;

struct dscudaMallocArrayResult {
 RCerror err;
 RCadr array;
};
typedef struct dscudaMallocArrayResult dscudaMallocArrayResult;

struct dscudaMallocPitchResult {
 RCerror err;
 RCadr devPtr;
 RCsize pitch;
};
typedef struct dscudaMallocPitchResult dscudaMallocPitchResult;

struct dscudaMemcpyD2HResult {
 RCerror err;
 RCbuf buf;
};
typedef struct dscudaMemcpyD2HResult dscudaMemcpyD2HResult;

struct dscudaMemcpyH2HResult {
 RCerror err;
 RCbuf buf;
};
typedef struct dscudaMemcpyH2HResult dscudaMemcpyH2HResult;

struct dscudaMemcpyToArrayD2HResult {
 RCerror err;
 RCbuf buf;
};
typedef struct dscudaMemcpyToArrayD2HResult dscudaMemcpyToArrayD2HResult;

struct dscudaMemcpyToArrayH2HResult {
 RCerror err;
 RCbuf buf;
};
typedef struct dscudaMemcpyToArrayH2HResult dscudaMemcpyToArrayH2HResult;

struct dscudaMemcpy2DToArrayD2HResult {
 RCerror err;
 RCbuf buf;
};
typedef struct dscudaMemcpy2DToArrayD2HResult dscudaMemcpy2DToArrayD2HResult;

struct dscudaMemcpy2DToArrayH2HResult {
 RCerror err;
 RCbuf buf;
};
typedef struct dscudaMemcpy2DToArrayH2HResult dscudaMemcpy2DToArrayH2HResult;

struct dscudaMemcpy2DD2HResult {
 RCerror err;
 RCbuf buf;
};
typedef struct dscudaMemcpy2DD2HResult dscudaMemcpy2DD2HResult;

struct dscudaMemcpy2DH2HResult {
 RCerror err;
 RCbuf buf;
};
typedef struct dscudaMemcpy2DH2HResult dscudaMemcpy2DH2HResult;

struct dscudaReadResult {
 RCerror err;
 RCbuf buf;
};
typedef struct dscudaReadResult dscudaReadResult;

struct dscudaGetDeviceResult {
 RCerror err;
 int device;
};
typedef struct dscudaGetDeviceResult dscudaGetDeviceResult;

struct dscudaGetDeviceCountResult {
 RCerror err;
 int count;
};
typedef struct dscudaGetDeviceCountResult dscudaGetDeviceCountResult;

struct dscudaGetDevicePropertiesResult {
 RCerror err;
 RCbuf prop;
};
typedef struct dscudaGetDevicePropertiesResult dscudaGetDevicePropertiesResult;

struct dscudaDriverGetVersionResult {
 RCerror err;
 int ver;
};
typedef struct dscudaDriverGetVersionResult dscudaDriverGetVersionResult;

struct dscudaRuntimeGetVersionResult {
 RCerror err;
 int ver;
};
typedef struct dscudaRuntimeGetVersionResult dscudaRuntimeGetVersionResult;

struct dscudaGetErrorStringResult {
 char *errmsg;
};
typedef struct dscudaGetErrorStringResult dscudaGetErrorStringResult;

struct dscudaCreateChannelDescResult {
 int x;
 int y;
 int z;
 int w;
 RCchannelformat f;
};
typedef struct dscudaCreateChannelDescResult dscudaCreateChannelDescResult;

struct dscudaGetChannelDescResult {
 RCerror err;
 int x;
 int y;
 int z;
 int w;
 RCchannelformat f;
};
typedef struct dscudaGetChannelDescResult dscudaGetChannelDescResult;

struct dscudaChooseDeviceResult {
 RCerror err;
 int device;
};
typedef struct dscudaChooseDeviceResult dscudaChooseDeviceResult;

struct dscudaMemcpyAsyncD2HResult {
 RCerror err;
 RCbuf buf;
};
typedef struct dscudaMemcpyAsyncD2HResult dscudaMemcpyAsyncD2HResult;

struct dscudaMemcpyAsyncH2HResult {
 RCerror err;
 RCbuf buf;
};
typedef struct dscudaMemcpyAsyncH2HResult dscudaMemcpyAsyncH2HResult;

struct dscudaMemcpyFromSymbolD2HResult {
 RCerror err;
 RCbuf buf;
};
typedef struct dscudaMemcpyFromSymbolD2HResult dscudaMemcpyFromSymbolD2HResult;

struct dscudaMemcpyFromSymbolAsyncD2HResult {
 RCerror err;
 RCbuf buf;
};
typedef struct dscudaMemcpyFromSymbolAsyncD2HResult dscudaMemcpyFromSymbolAsyncD2HResult;

struct dscudaStreamCreateResult {
 RCerror err;
 RCadr stream;
};
typedef struct dscudaStreamCreateResult dscudaStreamCreateResult;

struct dscudaEventCreateResult {
 RCerror err;
 RCadr event;
};
typedef struct dscudaEventCreateResult dscudaEventCreateResult;

struct dscudaEventElapsedTimeResult {
 RCerror err;
 float ms;
};
typedef struct dscudaEventElapsedTimeResult dscudaEventElapsedTimeResult;

struct dscudaHostGetDevicePointerResult {
 RCerror err;
 RCadr pDevice;
};
typedef struct dscudaHostGetDevicePointerResult dscudaHostGetDevicePointerResult;

struct dscudaHostGetFlagsResult {
 RCerror err;
 u_int flags;
};
typedef struct dscudaHostGetFlagsResult dscudaHostGetFlagsResult;

struct dscudaLoadModuleResult {
 u_int id;
};
typedef struct dscudaLoadModuleResult dscudaLoadModuleResult;

struct dscudaFuncGetAttributesResult {
 RCerror err;
 RCfuncattr attr;
};
typedef struct dscudaFuncGetAttributesResult dscudaFuncGetAttributesResult;

struct dscudaBindTextureResult {
 RCerror err;
 RCsize offset;
};
typedef struct dscudaBindTextureResult dscudaBindTextureResult;

struct dscudaBindTexture2DResult {
 RCerror err;
 RCsize offset;
};
typedef struct dscudaBindTexture2DResult dscudaBindTexture2DResult;

struct RCdim3 {
 u_int x;
 u_int y;
 u_int z;
};
typedef struct RCdim3 RCdim3;

struct dscudawriteid_1_argument {
 RCsize size;
 RCadr dst;
 RCbuf src;
};
typedef struct dscudawriteid_1_argument dscudawriteid_1_argument;

struct dscudareadid_1_argument {
 RCsize size;
 RCadr src;
};
typedef struct dscudareadid_1_argument dscudareadid_1_argument;

struct dscudathreadsetlimitid_1_argument {
 int limit;
 RCsize value;
};
typedef struct dscudathreadsetlimitid_1_argument dscudathreadsetlimitid_1_argument;

struct dscudastreamwaiteventid_1_argument {
 RCstream stream;
 RCevent event;
 u_int flags;
};
typedef struct dscudastreamwaiteventid_1_argument dscudastreamwaiteventid_1_argument;

struct dscudaeventelapsedtimeid_1_argument {
 RCevent start;
 RCevent end;
};
typedef struct dscudaeventelapsedtimeid_1_argument dscudaeventelapsedtimeid_1_argument;

struct dscudaeventrecordid_1_argument {
 RCevent event;
 RCstream stream;
};
typedef struct dscudaeventrecordid_1_argument dscudaeventrecordid_1_argument;

struct dscudalaunchkernelid_1_argument {
 int moduleid;
 int kid;
 char *kname;
 RCdim3 gdim;
 RCdim3 bdim;
 RCsize smemsize;
 RCstream stream;
 RCargs args;
};
typedef struct dscudalaunchkernelid_1_argument dscudalaunchkernelid_1_argument;

struct dscudaloadmoduleid_1_argument {
 RCipaddr ipaddr;
 RCpid pid;
 char *mname;
 char *image;
};
typedef struct dscudaloadmoduleid_1_argument dscudaloadmoduleid_1_argument;

struct dscudafuncgetattributesid_1_argument {
 int moduleid;
 char *kname;
};
typedef struct dscudafuncgetattributesid_1_argument dscudafuncgetattributesid_1_argument;

struct dscudamemcpyh2hid_1_argument {
 RCadr dst;
 RCbuf src;
 RCsize count;
};
typedef struct dscudamemcpyh2hid_1_argument dscudamemcpyh2hid_1_argument;

struct dscudamemcpyh2did_1_argument {
 RCadr dst;
 RCbuf src;
 RCsize count;
};
typedef struct dscudamemcpyh2did_1_argument dscudamemcpyh2did_1_argument;

struct dscudamemcpyd2hid_1_argument {
 RCadr src;
 RCsize count;
};
typedef struct dscudamemcpyd2hid_1_argument dscudamemcpyd2hid_1_argument;

struct dscudamemcpyd2did_1_argument {
 RCadr dst;
 RCadr src;
 RCsize count;
};
typedef struct dscudamemcpyd2did_1_argument dscudamemcpyd2did_1_argument;

struct dscudamemcpyasynch2hid_1_argument {
 RCadr dst;
 RCbuf src;
 RCsize count;
 RCstream stream;
};
typedef struct dscudamemcpyasynch2hid_1_argument dscudamemcpyasynch2hid_1_argument;

struct dscudamemcpyasynch2did_1_argument {
 RCadr dst;
 RCbuf src;
 RCsize count;
 RCstream stream;
};
typedef struct dscudamemcpyasynch2did_1_argument dscudamemcpyasynch2did_1_argument;

struct dscudamemcpyasyncd2hid_1_argument {
 RCadr src;
 RCsize count;
 RCstream stream;
};
typedef struct dscudamemcpyasyncd2hid_1_argument dscudamemcpyasyncd2hid_1_argument;

struct dscudamemcpyasyncd2did_1_argument {
 RCadr dst;
 RCadr src;
 RCsize count;
 RCstream stream;
};
typedef struct dscudamemcpyasyncd2did_1_argument dscudamemcpyasyncd2did_1_argument;

struct dscudamemcpytosymbolh2did_1_argument {
 int moduleid;
 char *symbol;
 RCbuf src;
 RCsize count;
 RCsize offset;
};
typedef struct dscudamemcpytosymbolh2did_1_argument dscudamemcpytosymbolh2did_1_argument;

struct dscudamemcpytosymbold2did_1_argument {
 int moduleid;
 char *symbol;
 RCadr src;
 RCsize count;
 RCsize offset;
};
typedef struct dscudamemcpytosymbold2did_1_argument dscudamemcpytosymbold2did_1_argument;

struct dscudamemcpyfromsymbold2hid_1_argument {
 int moduleid;
 char *symbol;
 RCsize count;
 RCsize offset;
};
typedef struct dscudamemcpyfromsymbold2hid_1_argument dscudamemcpyfromsymbold2hid_1_argument;

struct dscudamemcpyfromsymbold2did_1_argument {
 int moduleid;
 RCadr dst;
 char *symbol;
 RCsize count;
 RCsize offset;
};
typedef struct dscudamemcpyfromsymbold2did_1_argument dscudamemcpyfromsymbold2did_1_argument;

struct dscudamemsetid_1_argument {
 RCadr dst;
 int value;
 RCsize count;
};
typedef struct dscudamemsetid_1_argument dscudamemsetid_1_argument;

struct dscudahostallocid_1_argument {
 RCsize size;
 u_int flags;
};
typedef struct dscudahostallocid_1_argument dscudahostallocid_1_argument;

struct dscudahostgetdevicepointerid_1_argument {
 RCadr pHost;
 u_int flags;
};
typedef struct dscudahostgetdevicepointerid_1_argument dscudahostgetdevicepointerid_1_argument;

struct dscudamallocarrayid_1_argument {
 RCchanneldesc desc;
 RCsize width;
 RCsize height;
 u_int flags;
};
typedef struct dscudamallocarrayid_1_argument dscudamallocarrayid_1_argument;

struct dscudamemcpytoarrayh2hid_1_argument {
 RCadr dst;
 RCsize wOffset;
 RCsize hOffset;
 RCbuf src;
 RCsize count;
};
typedef struct dscudamemcpytoarrayh2hid_1_argument dscudamemcpytoarrayh2hid_1_argument;

struct dscudamemcpytoarrayh2did_1_argument {
 RCadr dst;
 RCsize wOffset;
 RCsize hOffset;
 RCbuf src;
 RCsize count;
};
typedef struct dscudamemcpytoarrayh2did_1_argument dscudamemcpytoarrayh2did_1_argument;

struct dscudamemcpytoarrayd2hid_1_argument {
 RCsize wOffset;
 RCsize hOffset;
 RCadr src;
 RCsize count;
};
typedef struct dscudamemcpytoarrayd2hid_1_argument dscudamemcpytoarrayd2hid_1_argument;

struct dscudamemcpytoarrayd2did_1_argument {
 RCadr dst;
 RCsize wOffset;
 RCsize hOffset;
 RCadr src;
 RCsize count;
};
typedef struct dscudamemcpytoarrayd2did_1_argument dscudamemcpytoarrayd2did_1_argument;

struct dscudamallocpitchid_1_argument {
 RCsize width;
 RCsize height;
};
typedef struct dscudamallocpitchid_1_argument dscudamallocpitchid_1_argument;

struct dscudamemcpy2dtoarrayh2hid_1_argument {
 RCadr dst;
 RCsize wOffset;
 RCsize hOffset;
 RCbuf src;
 RCsize spitch;
 RCsize width;
 RCsize height;
};
typedef struct dscudamemcpy2dtoarrayh2hid_1_argument dscudamemcpy2dtoarrayh2hid_1_argument;

struct dscudamemcpy2dtoarrayh2did_1_argument {
 RCadr dst;
 RCsize wOffset;
 RCsize hOffset;
 RCbuf srcbuf;
 RCsize spitch;
 RCsize width;
 RCsize height;
};
typedef struct dscudamemcpy2dtoarrayh2did_1_argument dscudamemcpy2dtoarrayh2did_1_argument;

struct dscudamemcpy2dtoarrayd2hid_1_argument {
 RCsize wOffset;
 RCsize hOffset;
 RCadr src;
 RCsize spitch;
 RCsize width;
 RCsize height;
};
typedef struct dscudamemcpy2dtoarrayd2hid_1_argument dscudamemcpy2dtoarrayd2hid_1_argument;

struct dscudamemcpy2dtoarrayd2did_1_argument {
 RCadr dst;
 RCsize wOffset;
 RCsize hOffset;
 RCadr src;
 RCsize spitch;
 RCsize width;
 RCsize height;
};
typedef struct dscudamemcpy2dtoarrayd2did_1_argument dscudamemcpy2dtoarrayd2did_1_argument;

struct dscudamemcpy2dh2hid_1_argument {
 RCadr dst;
 RCsize dpitch;
 RCbuf src;
 RCsize spitch;
 RCsize width;
 RCsize height;
};
typedef struct dscudamemcpy2dh2hid_1_argument dscudamemcpy2dh2hid_1_argument;

struct dscudamemcpy2dh2did_1_argument {
 RCadr dst;
 RCsize dpitch;
 RCbuf src;
 RCsize spitch;
 RCsize width;
 RCsize height;
};
typedef struct dscudamemcpy2dh2did_1_argument dscudamemcpy2dh2did_1_argument;

struct dscudamemcpy2dd2hid_1_argument {
 RCsize dpitch;
 RCadr src;
 RCsize spitch;
 RCsize width;
 RCsize height;
};
typedef struct dscudamemcpy2dd2hid_1_argument dscudamemcpy2dd2hid_1_argument;

struct dscudamemcpy2dd2did_1_argument {
 RCadr dst;
 RCsize dpitch;
 RCadr src;
 RCsize spitch;
 RCsize width;
 RCsize height;
};
typedef struct dscudamemcpy2dd2did_1_argument dscudamemcpy2dd2did_1_argument;

struct dscudamemset2did_1_argument {
 RCadr dst;
 RCsize pitch;
 int value;
 RCsize width;
 RCsize height;
};
typedef struct dscudamemset2did_1_argument dscudamemset2did_1_argument;

struct dscudamemcpytosymbolasynch2did_1_argument {
 int moduleid;
 char *symbol;
 RCbuf src;
 RCsize count;
 RCsize offset;
 RCstream stream;
};
typedef struct dscudamemcpytosymbolasynch2did_1_argument dscudamemcpytosymbolasynch2did_1_argument;

struct dscudamemcpytosymbolasyncd2did_1_argument {
 int moduleid;
 char *symbol;
 RCadr src;
 RCsize count;
 RCsize offset;
 RCstream stream;
};
typedef struct dscudamemcpytosymbolasyncd2did_1_argument dscudamemcpytosymbolasyncd2did_1_argument;

struct dscudamemcpyfromsymbolasyncd2hid_1_argument {
 int moduleid;
 char *symbol;
 RCsize count;
 RCsize offset;
 RCstream stream;
};
typedef struct dscudamemcpyfromsymbolasyncd2hid_1_argument dscudamemcpyfromsymbolasyncd2hid_1_argument;

struct dscudamemcpyfromsymbolasyncd2did_1_argument {
 int moduleid;
 RCadr dst;
 char *symbol;
 RCsize count;
 RCsize offset;
 RCstream stream;
};
typedef struct dscudamemcpyfromsymbolasyncd2did_1_argument dscudamemcpyfromsymbolasyncd2did_1_argument;

struct dscudacreatechanneldescid_1_argument {
 int x;
 int y;
 int z;
 int w;
 RCchannelformat f;
};
typedef struct dscudacreatechanneldescid_1_argument dscudacreatechanneldescid_1_argument;

struct dscudabindtextureid_1_argument {
 int moduleid;
 char *texname;
 RCadr devPtr;
 RCsize size;
 RCtexture texbuf;
};
typedef struct dscudabindtextureid_1_argument dscudabindtextureid_1_argument;

struct dscudabindtexture2did_1_argument {
 int moduleid;
 char *texname;
 RCadr devPtr;
 RCsize width;
 RCsize height;
 RCsize pitch;
 RCtexture texbuf;
};
typedef struct dscudabindtexture2did_1_argument dscudabindtexture2did_1_argument;

struct dscudabindtexturetoarrayid_1_argument {
 int moduleid;
 char *texname;
 RCadr array;
 RCtexture texbuf;
};
typedef struct dscudabindtexturetoarrayid_1_argument dscudabindtexturetoarrayid_1_argument;






extern dscudaResult * dscudawriteid_1(RCsize , RCadr , RCbuf , CLIENT *);
extern dscudaResult * dscudawriteid_1_svc(RCsize , RCadr , RCbuf , struct svc_req *);

extern dscudaReadResult * dscudareadid_1(RCsize , RCadr , CLIENT *);
extern dscudaReadResult * dscudareadid_1_svc(RCsize , RCadr , struct svc_req *);

extern dscudaResult * dscudathreadexitid_1(CLIENT *);
extern dscudaResult * dscudathreadexitid_1_svc(struct svc_req *);

extern dscudaResult * dscudathreadsynchronizeid_1(CLIENT *);
extern dscudaResult * dscudathreadsynchronizeid_1_svc(struct svc_req *);

extern dscudaResult * dscudathreadsetlimitid_1(int , RCsize , CLIENT *);
extern dscudaResult * dscudathreadsetlimitid_1_svc(int , RCsize , struct svc_req *);

extern dscudaThreadGetLimitResult * dscudathreadgetlimitid_1(int , CLIENT *);
extern dscudaThreadGetLimitResult * dscudathreadgetlimitid_1_svc(int , struct svc_req *);

extern dscudaResult * dscudathreadsetcacheconfigid_1(int , CLIENT *);
extern dscudaResult * dscudathreadsetcacheconfigid_1_svc(int , struct svc_req *);

extern dscudaThreadGetCacheConfigResult * dscudathreadgetcacheconfigid_1(CLIENT *);
extern dscudaThreadGetCacheConfigResult * dscudathreadgetcacheconfigid_1_svc(struct svc_req *);

extern dscudaResult * dscudagetlasterrorid_1(CLIENT *);
extern dscudaResult * dscudagetlasterrorid_1_svc(struct svc_req *);

extern dscudaResult * dscudapeekatlasterrorid_1(CLIENT *);
extern dscudaResult * dscudapeekatlasterrorid_1_svc(struct svc_req *);

extern dscudaGetErrorStringResult * dscudageterrorstringid_1(int , CLIENT *);
extern dscudaGetErrorStringResult * dscudageterrorstringid_1_svc(int , struct svc_req *);

extern dscudaGetDeviceResult * dscudagetdeviceid_1(CLIENT *);
extern dscudaGetDeviceResult * dscudagetdeviceid_1_svc(struct svc_req *);

extern dscudaGetDeviceCountResult * dscudagetdevicecountid_1(CLIENT *);
extern dscudaGetDeviceCountResult * dscudagetdevicecountid_1_svc(struct svc_req *);

extern dscudaGetDevicePropertiesResult * dscudagetdevicepropertiesid_1(int , CLIENT *);
extern dscudaGetDevicePropertiesResult * dscudagetdevicepropertiesid_1_svc(int , struct svc_req *);

extern dscudaDriverGetVersionResult * dscudadrivergetversionid_1(CLIENT *);
extern dscudaDriverGetVersionResult * dscudadrivergetversionid_1_svc(struct svc_req *);

extern dscudaRuntimeGetVersionResult * dscudaruntimegetversionid_1(CLIENT *);
extern dscudaRuntimeGetVersionResult * dscudaruntimegetversionid_1_svc(struct svc_req *);

extern dscudaResult * dscudasetdeviceid_1(int , CLIENT *);
extern dscudaResult * dscudasetdeviceid_1_svc(int , struct svc_req *);

extern dscudaResult * dscudasetdeviceflagsid_1(u_int , CLIENT *);
extern dscudaResult * dscudasetdeviceflagsid_1_svc(u_int , struct svc_req *);

extern dscudaChooseDeviceResult * dscudachoosedeviceid_1(RCbuf , CLIENT *);
extern dscudaChooseDeviceResult * dscudachoosedeviceid_1_svc(RCbuf , struct svc_req *);

extern dscudaResult * dscudadevicesynchronize_1(CLIENT *);
extern dscudaResult * dscudadevicesynchronize_1_svc(struct svc_req *);

extern dscudaResult * dscudadevicereset_1(CLIENT *);
extern dscudaResult * dscudadevicereset_1_svc(struct svc_req *);

extern dscudaStreamCreateResult * dscudastreamcreateid_1(CLIENT *);
extern dscudaStreamCreateResult * dscudastreamcreateid_1_svc(struct svc_req *);

extern dscudaResult * dscudastreamdestroyid_1(RCstream , CLIENT *);
extern dscudaResult * dscudastreamdestroyid_1_svc(RCstream , struct svc_req *);

extern dscudaResult * dscudastreamsynchronizeid_1(RCstream , CLIENT *);
extern dscudaResult * dscudastreamsynchronizeid_1_svc(RCstream , struct svc_req *);

extern dscudaResult * dscudastreamqueryid_1(RCstream , CLIENT *);
extern dscudaResult * dscudastreamqueryid_1_svc(RCstream , struct svc_req *);

extern dscudaResult * dscudastreamwaiteventid_1(RCstream , RCevent , u_int , CLIENT *);
extern dscudaResult * dscudastreamwaiteventid_1_svc(RCstream , RCevent , u_int , struct svc_req *);

extern dscudaEventCreateResult * dscudaeventcreateid_1(CLIENT *);
extern dscudaEventCreateResult * dscudaeventcreateid_1_svc(struct svc_req *);

extern dscudaEventCreateResult * dscudaeventcreatewithflagsid_1(u_int , CLIENT *);
extern dscudaEventCreateResult * dscudaeventcreatewithflagsid_1_svc(u_int , struct svc_req *);

extern dscudaResult * dscudaeventdestroyid_1(RCevent , CLIENT *);
extern dscudaResult * dscudaeventdestroyid_1_svc(RCevent , struct svc_req *);

extern dscudaEventElapsedTimeResult * dscudaeventelapsedtimeid_1(RCevent , RCevent , CLIENT *);
extern dscudaEventElapsedTimeResult * dscudaeventelapsedtimeid_1_svc(RCevent , RCevent , struct svc_req *);

extern dscudaResult * dscudaeventrecordid_1(RCevent , RCstream , CLIENT *);
extern dscudaResult * dscudaeventrecordid_1_svc(RCevent , RCstream , struct svc_req *);

extern dscudaResult * dscudaeventsynchronizeid_1(RCevent , CLIENT *);
extern dscudaResult * dscudaeventsynchronizeid_1_svc(RCevent , struct svc_req *);

extern dscudaResult * dscudaeventqueryid_1(RCevent , CLIENT *);
extern dscudaResult * dscudaeventqueryid_1_svc(RCevent , struct svc_req *);

extern void * dscudalaunchkernelid_1(int , int , char *, RCdim3 , RCdim3 , RCsize , RCstream , RCargs , CLIENT *);
extern void * dscudalaunchkernelid_1_svc(int , int , char *, RCdim3 , RCdim3 , RCsize , RCstream , RCargs , struct svc_req *);

extern dscudaLoadModuleResult * dscudaloadmoduleid_1(RCipaddr , RCpid , char *, char *, CLIENT *);
extern dscudaLoadModuleResult * dscudaloadmoduleid_1_svc(RCipaddr , RCpid , char *, char *, struct svc_req *);

extern dscudaFuncGetAttributesResult * dscudafuncgetattributesid_1(int , char *, CLIENT *);
extern dscudaFuncGetAttributesResult * dscudafuncgetattributesid_1_svc(int , char *, struct svc_req *);

extern dscudaMallocResult * dscudamallocid_1(RCsize , CLIENT *);
extern dscudaMallocResult * dscudamallocid_1_svc(RCsize , struct svc_req *);

extern dscudaResult * dscudafreeid_1(RCadr , CLIENT *);
extern dscudaResult * dscudafreeid_1_svc(RCadr , struct svc_req *);

extern dscudaMemcpyH2HResult * dscudamemcpyh2hid_1(RCadr , RCbuf , RCsize , CLIENT *);
extern dscudaMemcpyH2HResult * dscudamemcpyh2hid_1_svc(RCadr , RCbuf , RCsize , struct svc_req *);

extern dscudaResult * dscudamemcpyh2did_1(RCadr , RCbuf , RCsize , CLIENT *);
extern dscudaResult * dscudamemcpyh2did_1_svc(RCadr , RCbuf , RCsize , struct svc_req *);

extern dscudaMemcpyD2HResult * dscudamemcpyd2hid_1(RCadr , RCsize , CLIENT *);
extern dscudaMemcpyD2HResult * dscudamemcpyd2hid_1_svc(RCadr , RCsize , struct svc_req *);

extern dscudaResult * dscudamemcpyd2did_1(RCadr , RCadr , RCsize , CLIENT *);
extern dscudaResult * dscudamemcpyd2did_1_svc(RCadr , RCadr , RCsize , struct svc_req *);

extern dscudaMemcpyAsyncH2HResult * dscudamemcpyasynch2hid_1(RCadr , RCbuf , RCsize , RCstream , CLIENT *);
extern dscudaMemcpyAsyncH2HResult * dscudamemcpyasynch2hid_1_svc(RCadr , RCbuf , RCsize , RCstream , struct svc_req *);

extern dscudaResult * dscudamemcpyasynch2did_1(RCadr , RCbuf , RCsize , RCstream , CLIENT *);
extern dscudaResult * dscudamemcpyasynch2did_1_svc(RCadr , RCbuf , RCsize , RCstream , struct svc_req *);

extern dscudaMemcpyAsyncD2HResult * dscudamemcpyasyncd2hid_1(RCadr , RCsize , RCstream , CLIENT *);
extern dscudaMemcpyAsyncD2HResult * dscudamemcpyasyncd2hid_1_svc(RCadr , RCsize , RCstream , struct svc_req *);

extern dscudaResult * dscudamemcpyasyncd2did_1(RCadr , RCadr , RCsize , RCstream , CLIENT *);
extern dscudaResult * dscudamemcpyasyncd2did_1_svc(RCadr , RCadr , RCsize , RCstream , struct svc_req *);

extern dscudaResult * dscudamemcpytosymbolh2did_1(int , char *, RCbuf , RCsize , RCsize , CLIENT *);
extern dscudaResult * dscudamemcpytosymbolh2did_1_svc(int , char *, RCbuf , RCsize , RCsize , struct svc_req *);

extern dscudaResult * dscudamemcpytosymbold2did_1(int , char *, RCadr , RCsize , RCsize , CLIENT *);
extern dscudaResult * dscudamemcpytosymbold2did_1_svc(int , char *, RCadr , RCsize , RCsize , struct svc_req *);

extern dscudaMemcpyFromSymbolD2HResult * dscudamemcpyfromsymbold2hid_1(int , char *, RCsize , RCsize , CLIENT *);
extern dscudaMemcpyFromSymbolD2HResult * dscudamemcpyfromsymbold2hid_1_svc(int , char *, RCsize , RCsize , struct svc_req *);

extern dscudaResult * dscudamemcpyfromsymbold2did_1(int , RCadr , char *, RCsize , RCsize , CLIENT *);
extern dscudaResult * dscudamemcpyfromsymbold2did_1_svc(int , RCadr , char *, RCsize , RCsize , struct svc_req *);

extern dscudaResult * dscudamemsetid_1(RCadr , int , RCsize , CLIENT *);
extern dscudaResult * dscudamemsetid_1_svc(RCadr , int , RCsize , struct svc_req *);

extern dscudaHostAllocResult * dscudahostallocid_1(RCsize , u_int , CLIENT *);
extern dscudaHostAllocResult * dscudahostallocid_1_svc(RCsize , u_int , struct svc_req *);

extern dscudaMallocHostResult * dscudamallochostid_1(RCsize , CLIENT *);
extern dscudaMallocHostResult * dscudamallochostid_1_svc(RCsize , struct svc_req *);

extern dscudaResult * dscudafreehostid_1(RCadr , CLIENT *);
extern dscudaResult * dscudafreehostid_1_svc(RCadr , struct svc_req *);

extern dscudaHostGetDevicePointerResult * dscudahostgetdevicepointerid_1(RCadr , u_int , CLIENT *);
extern dscudaHostGetDevicePointerResult * dscudahostgetdevicepointerid_1_svc(RCadr , u_int , struct svc_req *);

extern dscudaHostGetFlagsResult * dscudahostgetflagsid_1(RCadr , CLIENT *);
extern dscudaHostGetFlagsResult * dscudahostgetflagsid_1_svc(RCadr , struct svc_req *);

extern dscudaMallocArrayResult * dscudamallocarrayid_1(RCchanneldesc , RCsize , RCsize , u_int , CLIENT *);
extern dscudaMallocArrayResult * dscudamallocarrayid_1_svc(RCchanneldesc , RCsize , RCsize , u_int , struct svc_req *);

extern dscudaResult * dscudafreearrayid_1(RCadr , CLIENT *);
extern dscudaResult * dscudafreearrayid_1_svc(RCadr , struct svc_req *);

extern dscudaMemcpyToArrayH2HResult * dscudamemcpytoarrayh2hid_1(RCadr , RCsize , RCsize , RCbuf , RCsize , CLIENT *);
extern dscudaMemcpyToArrayH2HResult * dscudamemcpytoarrayh2hid_1_svc(RCadr , RCsize , RCsize , RCbuf , RCsize , struct svc_req *);

extern dscudaResult * dscudamemcpytoarrayh2did_1(RCadr , RCsize , RCsize , RCbuf , RCsize , CLIENT *);
extern dscudaResult * dscudamemcpytoarrayh2did_1_svc(RCadr , RCsize , RCsize , RCbuf , RCsize , struct svc_req *);

extern dscudaMemcpyToArrayD2HResult * dscudamemcpytoarrayd2hid_1(RCsize , RCsize , RCadr , RCsize , CLIENT *);
extern dscudaMemcpyToArrayD2HResult * dscudamemcpytoarrayd2hid_1_svc(RCsize , RCsize , RCadr , RCsize , struct svc_req *);

extern dscudaResult * dscudamemcpytoarrayd2did_1(RCadr , RCsize , RCsize , RCadr , RCsize , CLIENT *);
extern dscudaResult * dscudamemcpytoarrayd2did_1_svc(RCadr , RCsize , RCsize , RCadr , RCsize , struct svc_req *);

extern dscudaMallocPitchResult * dscudamallocpitchid_1(RCsize , RCsize , CLIENT *);
extern dscudaMallocPitchResult * dscudamallocpitchid_1_svc(RCsize , RCsize , struct svc_req *);

extern dscudaMemcpy2DToArrayH2HResult * dscudamemcpy2dtoarrayh2hid_1(RCadr , RCsize , RCsize , RCbuf , RCsize , RCsize , RCsize , CLIENT *);
extern dscudaMemcpy2DToArrayH2HResult * dscudamemcpy2dtoarrayh2hid_1_svc(RCadr , RCsize , RCsize , RCbuf , RCsize , RCsize , RCsize , struct svc_req *);

extern dscudaResult * dscudamemcpy2dtoarrayh2did_1(RCadr , RCsize , RCsize , RCbuf , RCsize , RCsize , RCsize , CLIENT *);
extern dscudaResult * dscudamemcpy2dtoarrayh2did_1_svc(RCadr , RCsize , RCsize , RCbuf , RCsize , RCsize , RCsize , struct svc_req *);

extern dscudaMemcpy2DToArrayD2HResult * dscudamemcpy2dtoarrayd2hid_1(RCsize , RCsize , RCadr , RCsize , RCsize , RCsize , CLIENT *);
extern dscudaMemcpy2DToArrayD2HResult * dscudamemcpy2dtoarrayd2hid_1_svc(RCsize , RCsize , RCadr , RCsize , RCsize , RCsize , struct svc_req *);

extern dscudaResult * dscudamemcpy2dtoarrayd2did_1(RCadr , RCsize , RCsize , RCadr , RCsize , RCsize , RCsize , CLIENT *);
extern dscudaResult * dscudamemcpy2dtoarrayd2did_1_svc(RCadr , RCsize , RCsize , RCadr , RCsize , RCsize , RCsize , struct svc_req *);

extern dscudaMemcpy2DH2HResult * dscudamemcpy2dh2hid_1(RCadr , RCsize , RCbuf , RCsize , RCsize , RCsize , CLIENT *);
extern dscudaMemcpy2DH2HResult * dscudamemcpy2dh2hid_1_svc(RCadr , RCsize , RCbuf , RCsize , RCsize , RCsize , struct svc_req *);

extern dscudaResult * dscudamemcpy2dh2did_1(RCadr , RCsize , RCbuf , RCsize , RCsize , RCsize , CLIENT *);
extern dscudaResult * dscudamemcpy2dh2did_1_svc(RCadr , RCsize , RCbuf , RCsize , RCsize , RCsize , struct svc_req *);

extern dscudaMemcpy2DD2HResult * dscudamemcpy2dd2hid_1(RCsize , RCadr , RCsize , RCsize , RCsize , CLIENT *);
extern dscudaMemcpy2DD2HResult * dscudamemcpy2dd2hid_1_svc(RCsize , RCadr , RCsize , RCsize , RCsize , struct svc_req *);

extern dscudaResult * dscudamemcpy2dd2did_1(RCadr , RCsize , RCadr , RCsize , RCsize , RCsize , CLIENT *);
extern dscudaResult * dscudamemcpy2dd2did_1_svc(RCadr , RCsize , RCadr , RCsize , RCsize , RCsize , struct svc_req *);

extern dscudaResult * dscudamemset2did_1(RCadr , RCsize , int , RCsize , RCsize , CLIENT *);
extern dscudaResult * dscudamemset2did_1_svc(RCadr , RCsize , int , RCsize , RCsize , struct svc_req *);

extern dscudaResult * dscudamemcpytosymbolasynch2did_1(int , char *, RCbuf , RCsize , RCsize , RCstream , CLIENT *);
extern dscudaResult * dscudamemcpytosymbolasynch2did_1_svc(int , char *, RCbuf , RCsize , RCsize , RCstream , struct svc_req *);

extern dscudaResult * dscudamemcpytosymbolasyncd2did_1(int , char *, RCadr , RCsize , RCsize , RCstream , CLIENT *);
extern dscudaResult * dscudamemcpytosymbolasyncd2did_1_svc(int , char *, RCadr , RCsize , RCsize , RCstream , struct svc_req *);

extern dscudaMemcpyFromSymbolAsyncD2HResult * dscudamemcpyfromsymbolasyncd2hid_1(int , char *, RCsize , RCsize , RCstream , CLIENT *);
extern dscudaMemcpyFromSymbolAsyncD2HResult * dscudamemcpyfromsymbolasyncd2hid_1_svc(int , char *, RCsize , RCsize , RCstream , struct svc_req *);

extern dscudaResult * dscudamemcpyfromsymbolasyncd2did_1(int , RCadr , char *, RCsize , RCsize , RCstream , CLIENT *);
extern dscudaResult * dscudamemcpyfromsymbolasyncd2did_1_svc(int , RCadr , char *, RCsize , RCsize , RCstream , struct svc_req *);

extern dscudaCreateChannelDescResult * dscudacreatechanneldescid_1(int , int , int , int , RCchannelformat , CLIENT *);
extern dscudaCreateChannelDescResult * dscudacreatechanneldescid_1_svc(int , int , int , int , RCchannelformat , struct svc_req *);

extern dscudaGetChannelDescResult * dscudagetchanneldescid_1(RCadr , CLIENT *);
extern dscudaGetChannelDescResult * dscudagetchanneldescid_1_svc(RCadr , struct svc_req *);

extern dscudaBindTextureResult * dscudabindtextureid_1(int , char *, RCadr , RCsize , RCtexture , CLIENT *);
extern dscudaBindTextureResult * dscudabindtextureid_1_svc(int , char *, RCadr , RCsize , RCtexture , struct svc_req *);

extern dscudaBindTexture2DResult * dscudabindtexture2did_1(int , char *, RCadr , RCsize , RCsize , RCsize , RCtexture , CLIENT *);
extern dscudaBindTexture2DResult * dscudabindtexture2did_1_svc(int , char *, RCadr , RCsize , RCsize , RCsize , RCtexture , struct svc_req *);

extern dscudaResult * dscudabindtexturetoarrayid_1(int , char *, RCadr , RCtexture , CLIENT *);
extern dscudaResult * dscudabindtexturetoarrayid_1_svc(int , char *, RCadr , RCtexture , struct svc_req *);

extern dscudaResult * dscudaunbindtextureid_1(RCtexture , CLIENT *);
extern dscudaResult * dscudaunbindtextureid_1_svc(RCtexture , struct svc_req *);
extern int dscuda_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);
# 1250 "dscudarpc.h"
extern bool_t xdr_RCadr (XDR *, RCadr*);
extern bool_t xdr_RCsize (XDR *, RCsize*);
extern bool_t xdr_RCerror (XDR *, RCerror*);
extern bool_t xdr_RCstream (XDR *, RCstream*);
extern bool_t xdr_RCevent (XDR *, RCevent*);
extern bool_t xdr_RCbuf (XDR *, RCbuf*);
extern bool_t xdr_RCchannelformat (XDR *, RCchannelformat*);
extern bool_t xdr_RCipaddr (XDR *, RCipaddr*);
extern bool_t xdr_RCpid (XDR *, RCpid*);
extern bool_t xdr_RCchanneldesc_t (XDR *, RCchanneldesc_t*);
extern bool_t xdr_RCchanneldesc (XDR *, RCchanneldesc*);
extern bool_t xdr_RCtexture_t (XDR *, RCtexture_t*);
extern bool_t xdr_RCtexture (XDR *, RCtexture*);
extern bool_t xdr_RCfuncattr_t (XDR *, RCfuncattr_t*);
extern bool_t xdr_RCfuncattr (XDR *, RCfuncattr*);
extern bool_t xdr_RCargType (XDR *, RCargType*);
extern bool_t xdr_RCargVal (XDR *, RCargVal*);
extern bool_t xdr_RCarg (XDR *, RCarg*);
extern bool_t xdr_RCargs (XDR *, RCargs*);
extern bool_t xdr_dscudaResult (XDR *, dscudaResult*);
extern bool_t xdr_dscudaThreadGetLimitResult (XDR *, dscudaThreadGetLimitResult*);
extern bool_t xdr_dscudaThreadGetCacheConfigResult (XDR *, dscudaThreadGetCacheConfigResult*);
extern bool_t xdr_dscudaMallocResult (XDR *, dscudaMallocResult*);
extern bool_t xdr_dscudaHostAllocResult (XDR *, dscudaHostAllocResult*);
extern bool_t xdr_dscudaMallocHostResult (XDR *, dscudaMallocHostResult*);
extern bool_t xdr_dscudaMallocArrayResult (XDR *, dscudaMallocArrayResult*);
extern bool_t xdr_dscudaMallocPitchResult (XDR *, dscudaMallocPitchResult*);
extern bool_t xdr_dscudaMemcpyD2HResult (XDR *, dscudaMemcpyD2HResult*);
extern bool_t xdr_dscudaMemcpyH2HResult (XDR *, dscudaMemcpyH2HResult*);
extern bool_t xdr_dscudaMemcpyToArrayD2HResult (XDR *, dscudaMemcpyToArrayD2HResult*);
extern bool_t xdr_dscudaMemcpyToArrayH2HResult (XDR *, dscudaMemcpyToArrayH2HResult*);
extern bool_t xdr_dscudaMemcpy2DToArrayD2HResult (XDR *, dscudaMemcpy2DToArrayD2HResult*);
extern bool_t xdr_dscudaMemcpy2DToArrayH2HResult (XDR *, dscudaMemcpy2DToArrayH2HResult*);
extern bool_t xdr_dscudaMemcpy2DD2HResult (XDR *, dscudaMemcpy2DD2HResult*);
extern bool_t xdr_dscudaMemcpy2DH2HResult (XDR *, dscudaMemcpy2DH2HResult*);
extern bool_t xdr_dscudaReadResult (XDR *, dscudaReadResult*);
extern bool_t xdr_dscudaGetDeviceResult (XDR *, dscudaGetDeviceResult*);
extern bool_t xdr_dscudaGetDeviceCountResult (XDR *, dscudaGetDeviceCountResult*);
extern bool_t xdr_dscudaGetDevicePropertiesResult (XDR *, dscudaGetDevicePropertiesResult*);
extern bool_t xdr_dscudaDriverGetVersionResult (XDR *, dscudaDriverGetVersionResult*);
extern bool_t xdr_dscudaRuntimeGetVersionResult (XDR *, dscudaRuntimeGetVersionResult*);
extern bool_t xdr_dscudaGetErrorStringResult (XDR *, dscudaGetErrorStringResult*);
extern bool_t xdr_dscudaCreateChannelDescResult (XDR *, dscudaCreateChannelDescResult*);
extern bool_t xdr_dscudaGetChannelDescResult (XDR *, dscudaGetChannelDescResult*);
extern bool_t xdr_dscudaChooseDeviceResult (XDR *, dscudaChooseDeviceResult*);
extern bool_t xdr_dscudaMemcpyAsyncD2HResult (XDR *, dscudaMemcpyAsyncD2HResult*);
extern bool_t xdr_dscudaMemcpyAsyncH2HResult (XDR *, dscudaMemcpyAsyncH2HResult*);
extern bool_t xdr_dscudaMemcpyFromSymbolD2HResult (XDR *, dscudaMemcpyFromSymbolD2HResult*);
extern bool_t xdr_dscudaMemcpyFromSymbolAsyncD2HResult (XDR *, dscudaMemcpyFromSymbolAsyncD2HResult*);
extern bool_t xdr_dscudaStreamCreateResult (XDR *, dscudaStreamCreateResult*);
extern bool_t xdr_dscudaEventCreateResult (XDR *, dscudaEventCreateResult*);
extern bool_t xdr_dscudaEventElapsedTimeResult (XDR *, dscudaEventElapsedTimeResult*);
extern bool_t xdr_dscudaHostGetDevicePointerResult (XDR *, dscudaHostGetDevicePointerResult*);
extern bool_t xdr_dscudaHostGetFlagsResult (XDR *, dscudaHostGetFlagsResult*);
extern bool_t xdr_dscudaLoadModuleResult (XDR *, dscudaLoadModuleResult*);
extern bool_t xdr_dscudaFuncGetAttributesResult (XDR *, dscudaFuncGetAttributesResult*);
extern bool_t xdr_dscudaBindTextureResult (XDR *, dscudaBindTextureResult*);
extern bool_t xdr_dscudaBindTexture2DResult (XDR *, dscudaBindTexture2DResult*);
extern bool_t xdr_RCdim3 (XDR *, RCdim3*);
extern bool_t xdr_dscudawriteid_1_argument (XDR *, dscudawriteid_1_argument*);
extern bool_t xdr_dscudareadid_1_argument (XDR *, dscudareadid_1_argument*);
extern bool_t xdr_dscudathreadsetlimitid_1_argument (XDR *, dscudathreadsetlimitid_1_argument*);
extern bool_t xdr_dscudastreamwaiteventid_1_argument (XDR *, dscudastreamwaiteventid_1_argument*);
extern bool_t xdr_dscudaeventelapsedtimeid_1_argument (XDR *, dscudaeventelapsedtimeid_1_argument*);
extern bool_t xdr_dscudaeventrecordid_1_argument (XDR *, dscudaeventrecordid_1_argument*);
extern bool_t xdr_dscudalaunchkernelid_1_argument (XDR *, dscudalaunchkernelid_1_argument*);
extern bool_t xdr_dscudaloadmoduleid_1_argument (XDR *, dscudaloadmoduleid_1_argument*);
extern bool_t xdr_dscudafuncgetattributesid_1_argument (XDR *, dscudafuncgetattributesid_1_argument*);
extern bool_t xdr_dscudamemcpyh2hid_1_argument (XDR *, dscudamemcpyh2hid_1_argument*);
extern bool_t xdr_dscudamemcpyh2did_1_argument (XDR *, dscudamemcpyh2did_1_argument*);
extern bool_t xdr_dscudamemcpyd2hid_1_argument (XDR *, dscudamemcpyd2hid_1_argument*);
extern bool_t xdr_dscudamemcpyd2did_1_argument (XDR *, dscudamemcpyd2did_1_argument*);
extern bool_t xdr_dscudamemcpyasynch2hid_1_argument (XDR *, dscudamemcpyasynch2hid_1_argument*);
extern bool_t xdr_dscudamemcpyasynch2did_1_argument (XDR *, dscudamemcpyasynch2did_1_argument*);
extern bool_t xdr_dscudamemcpyasyncd2hid_1_argument (XDR *, dscudamemcpyasyncd2hid_1_argument*);
extern bool_t xdr_dscudamemcpyasyncd2did_1_argument (XDR *, dscudamemcpyasyncd2did_1_argument*);
extern bool_t xdr_dscudamemcpytosymbolh2did_1_argument (XDR *, dscudamemcpytosymbolh2did_1_argument*);
extern bool_t xdr_dscudamemcpytosymbold2did_1_argument (XDR *, dscudamemcpytosymbold2did_1_argument*);
extern bool_t xdr_dscudamemcpyfromsymbold2hid_1_argument (XDR *, dscudamemcpyfromsymbold2hid_1_argument*);
extern bool_t xdr_dscudamemcpyfromsymbold2did_1_argument (XDR *, dscudamemcpyfromsymbold2did_1_argument*);
extern bool_t xdr_dscudamemsetid_1_argument (XDR *, dscudamemsetid_1_argument*);
extern bool_t xdr_dscudahostallocid_1_argument (XDR *, dscudahostallocid_1_argument*);
extern bool_t xdr_dscudahostgetdevicepointerid_1_argument (XDR *, dscudahostgetdevicepointerid_1_argument*);
extern bool_t xdr_dscudamallocarrayid_1_argument (XDR *, dscudamallocarrayid_1_argument*);
extern bool_t xdr_dscudamemcpytoarrayh2hid_1_argument (XDR *, dscudamemcpytoarrayh2hid_1_argument*);
extern bool_t xdr_dscudamemcpytoarrayh2did_1_argument (XDR *, dscudamemcpytoarrayh2did_1_argument*);
extern bool_t xdr_dscudamemcpytoarrayd2hid_1_argument (XDR *, dscudamemcpytoarrayd2hid_1_argument*);
extern bool_t xdr_dscudamemcpytoarrayd2did_1_argument (XDR *, dscudamemcpytoarrayd2did_1_argument*);
extern bool_t xdr_dscudamallocpitchid_1_argument (XDR *, dscudamallocpitchid_1_argument*);
extern bool_t xdr_dscudamemcpy2dtoarrayh2hid_1_argument (XDR *, dscudamemcpy2dtoarrayh2hid_1_argument*);
extern bool_t xdr_dscudamemcpy2dtoarrayh2did_1_argument (XDR *, dscudamemcpy2dtoarrayh2did_1_argument*);
extern bool_t xdr_dscudamemcpy2dtoarrayd2hid_1_argument (XDR *, dscudamemcpy2dtoarrayd2hid_1_argument*);
extern bool_t xdr_dscudamemcpy2dtoarrayd2did_1_argument (XDR *, dscudamemcpy2dtoarrayd2did_1_argument*);
extern bool_t xdr_dscudamemcpy2dh2hid_1_argument (XDR *, dscudamemcpy2dh2hid_1_argument*);
extern bool_t xdr_dscudamemcpy2dh2did_1_argument (XDR *, dscudamemcpy2dh2did_1_argument*);
extern bool_t xdr_dscudamemcpy2dd2hid_1_argument (XDR *, dscudamemcpy2dd2hid_1_argument*);
extern bool_t xdr_dscudamemcpy2dd2did_1_argument (XDR *, dscudamemcpy2dd2did_1_argument*);
extern bool_t xdr_dscudamemset2did_1_argument (XDR *, dscudamemset2did_1_argument*);
extern bool_t xdr_dscudamemcpytosymbolasynch2did_1_argument (XDR *, dscudamemcpytosymbolasynch2did_1_argument*);
extern bool_t xdr_dscudamemcpytosymbolasyncd2did_1_argument (XDR *, dscudamemcpytosymbolasyncd2did_1_argument*);
extern bool_t xdr_dscudamemcpyfromsymbolasyncd2hid_1_argument (XDR *, dscudamemcpyfromsymbolasyncd2hid_1_argument*);
extern bool_t xdr_dscudamemcpyfromsymbolasyncd2did_1_argument (XDR *, dscudamemcpyfromsymbolasyncd2did_1_argument*);
extern bool_t xdr_dscudacreatechanneldescid_1_argument (XDR *, dscudacreatechanneldescid_1_argument*);
extern bool_t xdr_dscudabindtextureid_1_argument (XDR *, dscudabindtextureid_1_argument*);
extern bool_t xdr_dscudabindtexture2did_1_argument (XDR *, dscudabindtexture2did_1_argument*);
extern bool_t xdr_dscudabindtexturetoarrayid_1_argument (XDR *, dscudabindtexturetoarrayid_1_argument*);
# 11 "dscuda.h" 2
# 1 "dscudadefs.h" 1
# 12 "dscuda.h" 2
# 1 "dscudamacros.h" 1





int dscudaWarnLevel(void);
void dscudaSetWarnLevel(int level);
# 13 "dscuda.h" 2
# 1 "ibv_rdma.h" 1
# 10 "ibv_rdma.h"
# 1 "/usr/include/rdma/rdma_cma.h" 1 3 4
# 39 "/usr/include/rdma/rdma_cma.h" 3 4
# 1 "/usr/include/infiniband/verbs.h" 1 3 4
# 40 "/usr/include/infiniband/verbs.h" 3 4
# 1 "/usr/include/pthread.h" 1 3 4
# 25 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 30 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h" 1 3 4
# 31 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/bits/sched.h" 1 3 4
# 74 "/usr/include/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };





extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) __attribute__ ((__nothrow__));


extern int unshare (int __flags) __attribute__ ((__nothrow__));


extern int sched_getcpu (void) __attribute__ ((__nothrow__));










struct __sched_param
  {
    int __sched_priority;
  };
# 116 "/usr/include/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 199 "/usr/include/bits/sched.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  __attribute__ ((__nothrow__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__)) ;
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__));


# 44 "/usr/include/sched.h" 2 3 4







extern int sched_setparam (__pid_t __pid, __const struct sched_param *__param)
     __attribute__ ((__nothrow__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          __const struct sched_param *__param) __attribute__ ((__nothrow__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__));


extern int sched_yield (void) __attribute__ ((__nothrow__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__));


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__));
# 126 "/usr/include/sched.h" 3 4

# 26 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 30 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 31 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL





};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};
# 115 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 147 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 182 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 220 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t *__restrict __newthread,
      __const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);
# 263 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2) __attribute__ ((__nothrow__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (__const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (__const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (__const pthread_attr_t *__restrict
           __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           __const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (__const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (__const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (__const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (__const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (__const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (__const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 413 "/usr/include/pthread.h" 3 4
extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      __const struct sched_param *__param)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__));
# 478 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 490 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 524 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 664 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;
# 676 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;
# 717 "/usr/include/pthread.h" 3 4
extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) __attribute__ ((__nothrow__));





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          __const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        __const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (__const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 790 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (__const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (__const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (__const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (__const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (__const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));







extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 872 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    __const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         __const pthread_condattr_t *__restrict
         __cond_attr) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 984 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __const struct timespec *__restrict
       __abstime) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (__const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (__const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 1028 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     __const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (__const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 1095 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__));


extern int pthread_setspecific (pthread_key_t __key,
    __const void *__pointer) __attribute__ ((__nothrow__)) ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));
# 1129 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__));
# 1143 "/usr/include/pthread.h" 3 4

# 41 "/usr/include/infiniband/verbs.h" 2 3 4
# 56 "/usr/include/infiniband/verbs.h" 3 4


union ibv_gid {
 uint8_t raw[16];
 struct {
  uint64_t subnet_prefix;
  uint64_t interface_id;
 } global;
};

enum ibv_node_type {
 IBV_NODE_UNKNOWN = -1,
 IBV_NODE_CA = 1,
 IBV_NODE_SWITCH,
 IBV_NODE_ROUTER,
 IBV_NODE_RNIC
};

enum ibv_transport_type {
 IBV_TRANSPORT_UNKNOWN = -1,
 IBV_TRANSPORT_IB = 0,
 IBV_TRANSPORT_IWARP
};

enum ibv_device_cap_flags {
 IBV_DEVICE_RESIZE_MAX_WR = 1,
 IBV_DEVICE_BAD_PKEY_CNTR = 1 << 1,
 IBV_DEVICE_BAD_QKEY_CNTR = 1 << 2,
 IBV_DEVICE_RAW_MULTI = 1 << 3,
 IBV_DEVICE_AUTO_PATH_MIG = 1 << 4,
 IBV_DEVICE_CHANGE_PHY_PORT = 1 << 5,
 IBV_DEVICE_UD_AV_PORT_ENFORCE = 1 << 6,
 IBV_DEVICE_CURR_QP_STATE_MOD = 1 << 7,
 IBV_DEVICE_SHUTDOWN_PORT = 1 << 8,
 IBV_DEVICE_INIT_TYPE = 1 << 9,
 IBV_DEVICE_PORT_ACTIVE_EVENT = 1 << 10,
 IBV_DEVICE_SYS_IMAGE_GUID = 1 << 11,
 IBV_DEVICE_RC_RNR_NAK_GEN = 1 << 12,
 IBV_DEVICE_SRQ_RESIZE = 1 << 13,
 IBV_DEVICE_N_NOTIFY_CQ = 1 << 14,
 IBV_DEVICE_XRC = 1 << 20
};

enum ibv_atomic_cap {
 IBV_ATOMIC_NONE,
 IBV_ATOMIC_HCA,
 IBV_ATOMIC_GLOB
};

struct ibv_device_attr {
 char fw_ver[64];
 uint64_t node_guid;
 uint64_t sys_image_guid;
 uint64_t max_mr_size;
 uint64_t page_size_cap;
 uint32_t vendor_id;
 uint32_t vendor_part_id;
 uint32_t hw_ver;
 int max_qp;
 int max_qp_wr;
 int device_cap_flags;
 int max_sge;
 int max_sge_rd;
 int max_cq;
 int max_cqe;
 int max_mr;
 int max_pd;
 int max_qp_rd_atom;
 int max_ee_rd_atom;
 int max_res_rd_atom;
 int max_qp_init_rd_atom;
 int max_ee_init_rd_atom;
 enum ibv_atomic_cap atomic_cap;
 int max_ee;
 int max_rdd;
 int max_mw;
 int max_raw_ipv6_qp;
 int max_raw_ethy_qp;
 int max_mcast_grp;
 int max_mcast_qp_attach;
 int max_total_mcast_qp_attach;
 int max_ah;
 int max_fmr;
 int max_map_per_fmr;
 int max_srq;
 int max_srq_wr;
 int max_srq_sge;
 uint16_t max_pkeys;
 uint8_t local_ca_ack_delay;
 uint8_t phys_port_cnt;
};

enum ibv_mtu {
 IBV_MTU_256 = 1,
 IBV_MTU_512 = 2,
 IBV_MTU_1024 = 3,
 IBV_MTU_2048 = 4,
 IBV_MTU_4096 = 5
};

enum ibv_port_state {
 IBV_PORT_NOP = 0,
 IBV_PORT_DOWN = 1,
 IBV_PORT_INIT = 2,
 IBV_PORT_ARMED = 3,
 IBV_PORT_ACTIVE = 4,
 IBV_PORT_ACTIVE_DEFER = 5
};

enum {
 IBV_LINK_LAYER_UNSPECIFIED,
 IBV_LINK_LAYER_INFINIBAND,
 IBV_LINK_LAYER_ETHERNET,
};

struct ibv_port_attr {
 enum ibv_port_state state;
 enum ibv_mtu max_mtu;
 enum ibv_mtu active_mtu;
 int gid_tbl_len;
 uint32_t port_cap_flags;
 uint32_t max_msg_sz;
 uint32_t bad_pkey_cntr;
 uint32_t qkey_viol_cntr;
 uint16_t pkey_tbl_len;
 uint16_t lid;
 uint16_t sm_lid;
 uint8_t lmc;
 uint8_t max_vl_num;
 uint8_t sm_sl;
 uint8_t subnet_timeout;
 uint8_t init_type_reply;
 uint8_t active_width;
 uint8_t active_speed;
 uint8_t phys_state;
 uint8_t link_layer;
 uint8_t pad;
};

enum ibv_event_type {
 IBV_EVENT_CQ_ERR,
 IBV_EVENT_QP_FATAL,
 IBV_EVENT_QP_REQ_ERR,
 IBV_EVENT_QP_ACCESS_ERR,
 IBV_EVENT_COMM_EST,
 IBV_EVENT_SQ_DRAINED,
 IBV_EVENT_PATH_MIG,
 IBV_EVENT_PATH_MIG_ERR,
 IBV_EVENT_DEVICE_FATAL,
 IBV_EVENT_PORT_ACTIVE,
 IBV_EVENT_PORT_ERR,
 IBV_EVENT_LID_CHANGE,
 IBV_EVENT_PKEY_CHANGE,
 IBV_EVENT_SM_CHANGE,
 IBV_EVENT_SRQ_ERR,
 IBV_EVENT_SRQ_LIMIT_REACHED,
 IBV_EVENT_QP_LAST_WQE_REACHED,
 IBV_EVENT_CLIENT_REREGISTER,
 IBV_EVENT_GID_CHANGE,
};

enum ibv_event_flags {
 IBV_XRC_QP_EVENT_FLAG = 0x80000000,
};

struct ibv_async_event {
 union {
  struct ibv_cq *cq;
  struct ibv_qp *qp;
  struct ibv_srq *srq;
  int port_num;
  uint32_t xrc_qp_num;
 } element;
 enum ibv_event_type event_type;
};

enum ibv_wc_status {
 IBV_WC_SUCCESS,
 IBV_WC_LOC_LEN_ERR,
 IBV_WC_LOC_QP_OP_ERR,
 IBV_WC_LOC_EEC_OP_ERR,
 IBV_WC_LOC_PROT_ERR,
 IBV_WC_WR_FLUSH_ERR,
 IBV_WC_MW_BIND_ERR,
 IBV_WC_BAD_RESP_ERR,
 IBV_WC_LOC_ACCESS_ERR,
 IBV_WC_REM_INV_REQ_ERR,
 IBV_WC_REM_ACCESS_ERR,
 IBV_WC_REM_OP_ERR,
 IBV_WC_RETRY_EXC_ERR,
 IBV_WC_RNR_RETRY_EXC_ERR,
 IBV_WC_LOC_RDD_VIOL_ERR,
 IBV_WC_REM_INV_RD_REQ_ERR,
 IBV_WC_REM_ABORT_ERR,
 IBV_WC_INV_EECN_ERR,
 IBV_WC_INV_EEC_STATE_ERR,
 IBV_WC_FATAL_ERR,
 IBV_WC_RESP_TIMEOUT_ERR,
 IBV_WC_GENERAL_ERR
};
const char *ibv_wc_status_str(enum ibv_wc_status status);

enum ibv_wc_opcode {
 IBV_WC_SEND,
 IBV_WC_RDMA_WRITE,
 IBV_WC_RDMA_READ,
 IBV_WC_COMP_SWAP,
 IBV_WC_FETCH_ADD,
 IBV_WC_BIND_MW,




 IBV_WC_RECV = 1 << 7,
 IBV_WC_RECV_RDMA_WITH_IMM
};

enum ibv_wc_flags {
 IBV_WC_GRH = 1 << 0,
 IBV_WC_WITH_IMM = 1 << 1,
 IBV_WC_WITH_VLAN = 1 << 3
};

struct ibv_wc {
 uint64_t wr_id;
 enum ibv_wc_status status;
 enum ibv_wc_opcode opcode;
 uint32_t vendor_err;
 uint32_t byte_len;
 uint32_t imm_data;
 uint32_t qp_num;
 uint32_t src_qp;
 int wc_flags;
 uint16_t pkey_index;
 uint16_t slid;
 uint8_t sl;
 uint8_t dlid_path_bits;
};

enum ibv_access_flags {
 IBV_ACCESS_LOCAL_WRITE = 1,
 IBV_ACCESS_REMOTE_WRITE = (1<<1),
 IBV_ACCESS_REMOTE_READ = (1<<2),
 IBV_ACCESS_REMOTE_ATOMIC = (1<<3),
 IBV_ACCESS_MW_BIND = (1<<4)
};

struct ibv_pd {
 struct ibv_context *context;
 uint32_t handle;
};

enum ibv_rereg_mr_flags {
 IBV_REREG_MR_CHANGE_TRANSLATION = (1 << 0),
 IBV_REREG_MR_CHANGE_PD = (1 << 1),
 IBV_REREG_MR_CHANGE_ACCESS = (1 << 2),
 IBV_REREG_MR_KEEP_VALID = (1 << 3)
};

struct ibv_mr {
 struct ibv_context *context;
 struct ibv_pd *pd;
 void *addr;
 size_t length;
 uint32_t handle;
 uint32_t lkey;
 uint32_t rkey;
};

enum ibv_mw_type {
 IBV_MW_TYPE_1 = 1,
 IBV_MW_TYPE_2 = 2
};

struct ibv_mw {
 struct ibv_context *context;
 struct ibv_pd *pd;
 uint32_t rkey;
};

struct ibv_global_route {
 union ibv_gid dgid;
 uint32_t flow_label;
 uint8_t sgid_index;
 uint8_t hop_limit;
 uint8_t traffic_class;
};

struct ibv_grh {
 uint32_t version_tclass_flow;
 uint16_t paylen;
 uint8_t next_hdr;
 uint8_t hop_limit;
 union ibv_gid sgid;
 union ibv_gid dgid;
};

enum ibv_rate {
 IBV_RATE_MAX = 0,
 IBV_RATE_2_5_GBPS = 2,
 IBV_RATE_5_GBPS = 5,
 IBV_RATE_10_GBPS = 3,
 IBV_RATE_20_GBPS = 6,
 IBV_RATE_30_GBPS = 4,
 IBV_RATE_40_GBPS = 7,
 IBV_RATE_60_GBPS = 8,
 IBV_RATE_80_GBPS = 9,
 IBV_RATE_120_GBPS = 10
};







int ibv_rate_to_mult(enum ibv_rate rate) __attribute__((const));





enum ibv_rate mult_to_ibv_rate(int mult) __attribute__((const));

struct ibv_ah_attr {
 struct ibv_global_route grh;
 uint16_t dlid;
 uint8_t sl;
 uint8_t src_path_bits;
 uint8_t static_rate;
 uint8_t is_global;
 uint8_t port_num;
};

struct ibv_xrc_domain {
 struct ibv_context *context;
 uint32_t handle;
};

enum ibv_srq_attr_mask {
 IBV_SRQ_MAX_WR = 1 << 0,
 IBV_SRQ_LIMIT = 1 << 1
};

struct ibv_srq_attr {
 uint32_t max_wr;
 uint32_t max_sge;
 uint32_t srq_limit;
};

struct ibv_srq_init_attr {
 void *srq_context;
 struct ibv_srq_attr attr;
};

enum ibv_qp_type {
 IBV_QPT_RC = 2,
 IBV_QPT_UC,
 IBV_QPT_UD,
 IBV_QPT_XRC,
 IBV_QPT_RAW_PACKET = 8,
 IBV_QPT_RAW_ETH = 8
};

struct ibv_qp_cap {
 uint32_t max_send_wr;
 uint32_t max_recv_wr;
 uint32_t max_send_sge;
 uint32_t max_recv_sge;
 uint32_t max_inline_data;
};

struct ibv_qp_init_attr {
 void *qp_context;
 struct ibv_cq *send_cq;
 struct ibv_cq *recv_cq;
 struct ibv_srq *srq;
 struct ibv_qp_cap cap;
 enum ibv_qp_type qp_type;
 int sq_sig_all;
 struct ibv_xrc_domain *xrc_domain;
};

enum ibv_qp_attr_mask {
 IBV_QP_STATE = 1 << 0,
 IBV_QP_CUR_STATE = 1 << 1,
 IBV_QP_EN_SQD_ASYNC_NOTIFY = 1 << 2,
 IBV_QP_ACCESS_FLAGS = 1 << 3,
 IBV_QP_PKEY_INDEX = 1 << 4,
 IBV_QP_PORT = 1 << 5,
 IBV_QP_QKEY = 1 << 6,
 IBV_QP_AV = 1 << 7,
 IBV_QP_PATH_MTU = 1 << 8,
 IBV_QP_TIMEOUT = 1 << 9,
 IBV_QP_RETRY_CNT = 1 << 10,
 IBV_QP_RNR_RETRY = 1 << 11,
 IBV_QP_RQ_PSN = 1 << 12,
 IBV_QP_MAX_QP_RD_ATOMIC = 1 << 13,
 IBV_QP_ALT_PATH = 1 << 14,
 IBV_QP_MIN_RNR_TIMER = 1 << 15,
 IBV_QP_SQ_PSN = 1 << 16,
 IBV_QP_MAX_DEST_RD_ATOMIC = 1 << 17,
 IBV_QP_PATH_MIG_STATE = 1 << 18,
 IBV_QP_CAP = 1 << 19,
 IBV_QP_DEST_QPN = 1 << 20
};

enum ibv_qp_state {
 IBV_QPS_RESET,
 IBV_QPS_INIT,
 IBV_QPS_RTR,
 IBV_QPS_RTS,
 IBV_QPS_SQD,
 IBV_QPS_SQE,
 IBV_QPS_ERR
};

enum ibv_mig_state {
 IBV_MIG_MIGRATED,
 IBV_MIG_REARM,
 IBV_MIG_ARMED
};

struct ibv_qp_attr {
 enum ibv_qp_state qp_state;
 enum ibv_qp_state cur_qp_state;
 enum ibv_mtu path_mtu;
 enum ibv_mig_state path_mig_state;
 uint32_t qkey;
 uint32_t rq_psn;
 uint32_t sq_psn;
 uint32_t dest_qp_num;
 int qp_access_flags;
 struct ibv_qp_cap cap;
 struct ibv_ah_attr ah_attr;
 struct ibv_ah_attr alt_ah_attr;
 uint16_t pkey_index;
 uint16_t alt_pkey_index;
 uint8_t en_sqd_async_notify;
 uint8_t sq_draining;
 uint8_t max_rd_atomic;
 uint8_t max_dest_rd_atomic;
 uint8_t min_rnr_timer;
 uint8_t port_num;
 uint8_t timeout;
 uint8_t retry_cnt;
 uint8_t rnr_retry;
 uint8_t alt_port_num;
 uint8_t alt_timeout;
};

enum ibv_wr_opcode {
 IBV_WR_RDMA_WRITE,
 IBV_WR_RDMA_WRITE_WITH_IMM,
 IBV_WR_SEND,
 IBV_WR_SEND_WITH_IMM,
 IBV_WR_RDMA_READ,
 IBV_WR_ATOMIC_CMP_AND_SWP,
 IBV_WR_ATOMIC_FETCH_AND_ADD
};

enum ibv_send_flags {
 IBV_SEND_FENCE = 1 << 0,
 IBV_SEND_SIGNALED = 1 << 1,
 IBV_SEND_SOLICITED = 1 << 2,
 IBV_SEND_INLINE = 1 << 3,
 IBV_SEND_IP_CSUM = 1 << 4
};

struct ibv_sge {
 uint64_t addr;
 uint32_t length;
 uint32_t lkey;
};

struct ibv_send_wr {
 uint64_t wr_id;
 struct ibv_send_wr *next;
 struct ibv_sge *sg_list;
 int num_sge;
 enum ibv_wr_opcode opcode;
 int send_flags;
 uint32_t imm_data;
 union {
  struct {
   uint64_t remote_addr;
   uint32_t rkey;
  } rdma;
  struct {
   uint64_t remote_addr;
   uint64_t compare_add;
   uint64_t swap;
   uint32_t rkey;
  } atomic;
  struct {
   struct ibv_ah *ah;
   uint32_t remote_qpn;
   uint32_t remote_qkey;
  } ud;
 } wr;
 uint32_t xrc_remote_srq_num;
};

struct ibv_recv_wr {
 uint64_t wr_id;
 struct ibv_recv_wr *next;
 struct ibv_sge *sg_list;
 int num_sge;
};

struct ibv_mw_bind {
 uint64_t wr_id;
 struct ibv_mr *mr;
 void *addr;
 size_t length;
 int send_flags;
 int mw_access_flags;
};

struct ibv_srq {
 struct ibv_context *context;
 void *srq_context;
 struct ibv_pd *pd;
 uint32_t handle;

 uint32_t events_completed;

 uint32_t xrc_srq_num;
 struct ibv_xrc_domain *xrc_domain;
 struct ibv_cq *xrc_cq;

 pthread_mutex_t mutex;
 pthread_cond_t cond;
};

struct ibv_qp {
 struct ibv_context *context;
 void *qp_context;
 struct ibv_pd *pd;
 struct ibv_cq *send_cq;
 struct ibv_cq *recv_cq;
 struct ibv_srq *srq;
 uint32_t handle;
 uint32_t qp_num;
 enum ibv_qp_state state;
 enum ibv_qp_type qp_type;

 uint32_t events_completed;

 struct ibv_xrc_domain *xrc_domain;

 pthread_mutex_t mutex;
 pthread_cond_t cond;
};

struct ibv_comp_channel {
 struct ibv_context *context;
 int fd;
 int refcnt;
};

struct ibv_cq {
 struct ibv_context *context;
 struct ibv_comp_channel *channel;
 void *cq_context;
 uint32_t handle;
 int cqe;

 uint32_t comp_events_completed;
 uint32_t async_events_completed;

 pthread_mutex_t mutex;
 pthread_cond_t cond;
};

struct ibv_ah {
 struct ibv_context *context;
 struct ibv_pd *pd;
 uint32_t handle;
};

struct ibv_device;
struct ibv_context;

struct ibv_device_ops {
 struct ibv_context * (*alloc_context)(struct ibv_device *device, int cmd_fd);
 void (*free_context)(struct ibv_context *context);
};

enum {
 IBV_SYSFS_NAME_MAX = 64,
 IBV_SYSFS_PATH_MAX = 256
};

struct ibv_device {
 struct ibv_device_ops ops;
 enum ibv_node_type node_type;
 enum ibv_transport_type transport_type;

 char name[IBV_SYSFS_NAME_MAX];

 char dev_name[IBV_SYSFS_NAME_MAX];

 char dev_path[IBV_SYSFS_PATH_MAX];

 char ibdev_path[IBV_SYSFS_PATH_MAX];
};

struct ibv_more_ops {
 struct ibv_srq * (*create_xrc_srq)(struct ibv_pd *pd,
        struct ibv_xrc_domain *xrc_domain,
        struct ibv_cq *xrc_cq,
        struct ibv_srq_init_attr *srq_init_attr);
 struct ibv_xrc_domain * (*open_xrc_domain)(struct ibv_context *context,
         int fd, int oflag);
 int (*close_xrc_domain)(struct ibv_xrc_domain *d);
 int (*create_xrc_rcv_qp)(struct ibv_qp_init_attr *init_attr,
           uint32_t *xrc_qp_num);
 int (*modify_xrc_rcv_qp)(struct ibv_xrc_domain *xrc_domain,
           uint32_t xrc_qp_num,
           struct ibv_qp_attr *attr,
           int attr_mask);
 int (*query_xrc_rcv_qp)(struct ibv_xrc_domain *xrc_domain,
          uint32_t xrc_qp_num,
          struct ibv_qp_attr *attr,
          int attr_mask,
          struct ibv_qp_init_attr *init_attr);
 int (*reg_xrc_rcv_qp)(struct ibv_xrc_domain *xrc_domain,
        uint32_t xrc_qp_num);
 int (*unreg_xrc_rcv_qp)(struct ibv_xrc_domain *xrc_domain,
          uint32_t xrc_qp_num);

};

struct ibv_context_ops {
 int (*query_device)(struct ibv_context *context,
           struct ibv_device_attr *device_attr);
 int (*query_port)(struct ibv_context *context, uint8_t port_num,
           struct ibv_port_attr *port_attr);
 struct ibv_pd * (*alloc_pd)(struct ibv_context *context);
 int (*dealloc_pd)(struct ibv_pd *pd);
 struct ibv_mr * (*reg_mr)(struct ibv_pd *pd, void *addr, size_t length,
       int access);
 struct ibv_mr * (*rereg_mr)(struct ibv_mr *mr,
         int flags,
         struct ibv_pd *pd, void *addr,
         size_t length,
         int access);
 int (*dereg_mr)(struct ibv_mr *mr);
 struct ibv_mw * (*alloc_mw)(struct ibv_pd *pd, enum ibv_mw_type type);
 int (*bind_mw)(struct ibv_qp *qp, struct ibv_mw *mw,
        struct ibv_mw_bind *mw_bind);
 int (*dealloc_mw)(struct ibv_mw *mw);
 struct ibv_cq * (*create_cq)(struct ibv_context *context, int cqe,
          struct ibv_comp_channel *channel,
          int comp_vector);
 int (*poll_cq)(struct ibv_cq *cq, int num_entries, struct ibv_wc *wc);
 int (*req_notify_cq)(struct ibv_cq *cq, int solicited_only);
 void (*cq_event)(struct ibv_cq *cq);
 int (*resize_cq)(struct ibv_cq *cq, int cqe);
 int (*destroy_cq)(struct ibv_cq *cq);
 struct ibv_srq * (*create_srq)(struct ibv_pd *pd,
           struct ibv_srq_init_attr *srq_init_attr);
 int (*modify_srq)(struct ibv_srq *srq,
           struct ibv_srq_attr *srq_attr,
           int srq_attr_mask);
 int (*query_srq)(struct ibv_srq *srq,
          struct ibv_srq_attr *srq_attr);
 int (*destroy_srq)(struct ibv_srq *srq);
 int (*post_srq_recv)(struct ibv_srq *srq,
       struct ibv_recv_wr *recv_wr,
       struct ibv_recv_wr **bad_recv_wr);
 struct ibv_qp * (*create_qp)(struct ibv_pd *pd, struct ibv_qp_init_attr *attr);
 int (*query_qp)(struct ibv_qp *qp, struct ibv_qp_attr *attr,
         int attr_mask,
         struct ibv_qp_init_attr *init_attr);
 int (*modify_qp)(struct ibv_qp *qp, struct ibv_qp_attr *attr,
          int attr_mask);
 int (*destroy_qp)(struct ibv_qp *qp);
 int (*post_send)(struct ibv_qp *qp, struct ibv_send_wr *wr,
          struct ibv_send_wr **bad_wr);
 int (*post_recv)(struct ibv_qp *qp, struct ibv_recv_wr *wr,
          struct ibv_recv_wr **bad_wr);
 struct ibv_ah * (*create_ah)(struct ibv_pd *pd, struct ibv_ah_attr *attr);
 int (*destroy_ah)(struct ibv_ah *ah);
 int (*attach_mcast)(struct ibv_qp *qp, const union ibv_gid *gid,
      uint16_t lid);
 int (*detach_mcast)(struct ibv_qp *qp, const union ibv_gid *gid,
      uint16_t lid);
 void (*async_event)(struct ibv_async_event *event);
};

struct ibv_context {
 struct ibv_device *device;
 struct ibv_context_ops ops;
 int cmd_fd;
 int async_fd;
 int num_comp_vectors;
 pthread_mutex_t mutex;
 void *abi_compat;
 struct ibv_more_ops *more_ops;
};

static inline int ___ibv_query_port(struct ibv_context *context,
        uint8_t port_num,
        struct ibv_port_attr *port_attr)
{
 port_attr->link_layer = IBV_LINK_LAYER_UNSPECIFIED;
 port_attr->pad = 0;

 return context->ops.query_port(context, port_num, port_attr);
}
# 777 "/usr/include/infiniband/verbs.h" 3 4
struct ibv_device **ibv_get_device_list(int *num_devices);
# 787 "/usr/include/infiniband/verbs.h" 3 4
void ibv_free_device_list(struct ibv_device **list);




const char *ibv_get_device_name(struct ibv_device *device);




uint64_t ibv_get_device_guid(struct ibv_device *device);




struct ibv_context *ibv_open_device(struct ibv_device *device);




int ibv_close_device(struct ibv_context *context);
# 816 "/usr/include/infiniband/verbs.h" 3 4
int ibv_get_async_event(struct ibv_context *context,
   struct ibv_async_event *event);
# 829 "/usr/include/infiniband/verbs.h" 3 4
void ibv_ack_async_event(struct ibv_async_event *event);




int ibv_query_device(struct ibv_context *context,
       struct ibv_device_attr *device_attr);




int ibv_query_port(struct ibv_context *context, uint8_t port_num,
     struct ibv_port_attr *port_attr);




int ibv_query_gid(struct ibv_context *context, uint8_t port_num,
    int index, union ibv_gid *gid);




int ibv_query_pkey(struct ibv_context *context, uint8_t port_num,
     int index, uint16_t *pkey);




struct ibv_pd *ibv_alloc_pd(struct ibv_context *context);




int ibv_dealloc_pd(struct ibv_pd *pd);




struct ibv_mr *ibv_reg_mr(struct ibv_pd *pd, void *addr,
     size_t length, int access);




int ibv_dereg_mr(struct ibv_mr *mr);




struct ibv_comp_channel *ibv_create_comp_channel(struct ibv_context *context);




int ibv_destroy_comp_channel(struct ibv_comp_channel *channel);
# 896 "/usr/include/infiniband/verbs.h" 3 4
struct ibv_cq *ibv_create_cq(struct ibv_context *context, int cqe,
        void *cq_context,
        struct ibv_comp_channel *channel,
        int comp_vector);
# 908 "/usr/include/infiniband/verbs.h" 3 4
int ibv_resize_cq(struct ibv_cq *cq, int cqe);




int ibv_destroy_cq(struct ibv_cq *cq);
# 924 "/usr/include/infiniband/verbs.h" 3 4
int ibv_get_cq_event(struct ibv_comp_channel *channel,
       struct ibv_cq **cq, void **cq_context);
# 940 "/usr/include/infiniband/verbs.h" 3 4
void ibv_ack_cq_events(struct ibv_cq *cq, unsigned int nevents);
# 955 "/usr/include/infiniband/verbs.h" 3 4
static inline int ibv_poll_cq(struct ibv_cq *cq, int num_entries, struct ibv_wc *wc)
{
 return cq->context->ops.poll_cq(cq, num_entries, wc);
}
# 969 "/usr/include/infiniband/verbs.h" 3 4
static inline int ibv_req_notify_cq(struct ibv_cq *cq, int solicited_only)
{
 return cq->context->ops.req_notify_cq(cq, solicited_only);
}
# 985 "/usr/include/infiniband/verbs.h" 3 4
struct ibv_srq *ibv_create_srq(struct ibv_pd *pd,
          struct ibv_srq_init_attr *srq_init_attr);
# 1002 "/usr/include/infiniband/verbs.h" 3 4
struct ibv_srq *ibv_create_xrc_srq(struct ibv_pd *pd,
       struct ibv_xrc_domain *xrc_domain,
       struct ibv_cq *xrc_cq,
       struct ibv_srq_init_attr *srq_init_attr);
# 1019 "/usr/include/infiniband/verbs.h" 3 4
int ibv_modify_srq(struct ibv_srq *srq,
     struct ibv_srq_attr *srq_attr,
     int srq_attr_mask);







int ibv_query_srq(struct ibv_srq *srq, struct ibv_srq_attr *srq_attr);





int ibv_destroy_srq(struct ibv_srq *srq);
# 1044 "/usr/include/infiniband/verbs.h" 3 4
static inline int ibv_post_srq_recv(struct ibv_srq *srq,
        struct ibv_recv_wr *recv_wr,
        struct ibv_recv_wr **bad_recv_wr)
{
 return srq->context->ops.post_srq_recv(srq, recv_wr, bad_recv_wr);
}




struct ibv_qp *ibv_create_qp(struct ibv_pd *pd,
        struct ibv_qp_init_attr *qp_init_attr);




int ibv_modify_qp(struct ibv_qp *qp, struct ibv_qp_attr *attr,
    int attr_mask);
# 1074 "/usr/include/infiniband/verbs.h" 3 4
int ibv_query_qp(struct ibv_qp *qp, struct ibv_qp_attr *attr,
   int attr_mask,
   struct ibv_qp_init_attr *init_attr);




int ibv_destroy_qp(struct ibv_qp *qp);







static inline int ibv_post_send(struct ibv_qp *qp, struct ibv_send_wr *wr,
    struct ibv_send_wr **bad_wr)
{
 return qp->context->ops.post_send(qp, wr, bad_wr);
}




static inline int ibv_post_recv(struct ibv_qp *qp, struct ibv_recv_wr *wr,
    struct ibv_recv_wr **bad_wr)
{
 return qp->context->ops.post_recv(qp, wr, bad_wr);
}




struct ibv_ah *ibv_create_ah(struct ibv_pd *pd, struct ibv_ah_attr *attr);
# 1120 "/usr/include/infiniband/verbs.h" 3 4
int ibv_init_ah_from_wc(struct ibv_context *context, uint8_t port_num,
   struct ibv_wc *wc, struct ibv_grh *grh,
   struct ibv_ah_attr *ah_attr);
# 1136 "/usr/include/infiniband/verbs.h" 3 4
struct ibv_ah *ibv_create_ah_from_wc(struct ibv_pd *pd, struct ibv_wc *wc,
         struct ibv_grh *grh, uint8_t port_num);




int ibv_destroy_ah(struct ibv_ah *ah);
# 1155 "/usr/include/infiniband/verbs.h" 3 4
int ibv_attach_mcast(struct ibv_qp *qp, const union ibv_gid *gid, uint16_t lid);







int ibv_detach_mcast(struct ibv_qp *qp, const union ibv_gid *gid, uint16_t lid);







int ibv_fork_init(void);




const char *ibv_node_type_str(enum ibv_node_type node_type);




const char *ibv_port_state_str(enum ibv_port_state port_state);




const char *ibv_event_type_str(enum ibv_event_type event);
# 1211 "/usr/include/infiniband/verbs.h" 3 4
struct ibv_xrc_domain *ibv_open_xrc_domain(struct ibv_context *context,
        int fd, int oflag);
# 1222 "/usr/include/infiniband/verbs.h" 3 4
int ibv_close_xrc_domain(struct ibv_xrc_domain *d);
# 1246 "/usr/include/infiniband/verbs.h" 3 4
int ibv_create_xrc_rcv_qp(struct ibv_qp_init_attr *init_attr,
     uint32_t *xrc_rcv_qpn);
# 1272 "/usr/include/infiniband/verbs.h" 3 4
int ibv_modify_xrc_rcv_qp(struct ibv_xrc_domain *xrc_domain,
     uint32_t xrc_qp_num,
     struct ibv_qp_attr *attr, int attr_mask);
# 1288 "/usr/include/infiniband/verbs.h" 3 4
int ibv_query_xrc_rcv_qp(struct ibv_xrc_domain *xrc_domain, uint32_t xrc_qp_num,
    struct ibv_qp_attr *attr, int attr_mask,
    struct ibv_qp_init_attr *init_attr);
# 1305 "/usr/include/infiniband/verbs.h" 3 4
int ibv_reg_xrc_rcv_qp(struct ibv_xrc_domain *xrc_domain, uint32_t xrc_qp_num);
# 1323 "/usr/include/infiniband/verbs.h" 3 4
int ibv_unreg_xrc_rcv_qp(struct ibv_xrc_domain *xrc_domain,
    uint32_t xrc_qp_num);


# 40 "/usr/include/rdma/rdma_cma.h" 2 3 4
# 1 "/usr/include/infiniband/sa.h" 1 3 4
# 39 "/usr/include/infiniband/sa.h" 3 4
struct ibv_sa_path_rec {


 union ibv_gid dgid;
 union ibv_gid sgid;
 uint16_t dlid;
 uint16_t slid;
 int raw_traffic;

 uint32_t flow_label;
 uint8_t hop_limit;
 uint8_t traffic_class;
 int reversible;
 uint8_t numb_path;
 uint16_t pkey;

 uint8_t sl;
 uint8_t mtu_selector;
 uint8_t mtu;
 uint8_t rate_selector;
 uint8_t rate;
 uint8_t packet_life_time_selector;
 uint8_t packet_life_time;
 uint8_t preference;
};

struct ibv_sa_mcmember_rec {
 union ibv_gid mgid;
 union ibv_gid port_gid;
 uint32_t qkey;
 uint16_t mlid;
 uint8_t mtu_selector;
 uint8_t mtu;
 uint8_t traffic_class;
 uint16_t pkey;
 uint8_t rate_selector;
 uint8_t rate;
 uint8_t packet_life_time_selector;
 uint8_t packet_life_time;
 uint8_t sl;
 uint32_t flow_label;
 uint8_t hop_limit;
 uint8_t scope;
 uint8_t join_state;
 int proxy_join;
};

struct ibv_sa_service_rec {
 uint64_t id;
 union ibv_gid gid;
 uint16_t pkey;

 uint32_t lease;
 uint8_t key[16];
 uint8_t name[64];
 uint8_t data8[16];
 uint16_t data16[8];
 uint32_t data32[4];
 uint64_t data64[2];
};



struct ibv_path_record {
 uint64_t service_id;
 union ibv_gid dgid;
 union ibv_gid sgid;
 uint16_t dlid;
 uint16_t slid;
 uint32_t flowlabel_hoplimit;
 uint8_t tclass;
 uint8_t reversible_numpath;
 uint16_t pkey;
 uint16_t qosclass_sl;
 uint8_t mtu;
 uint8_t rate;
 uint8_t packetlifetime;
 uint8_t preference;
 uint8_t reserved[6];
};
# 129 "/usr/include/infiniband/sa.h" 3 4
struct ibv_path_data {
 uint32_t flags;
 uint32_t reserved;
 struct ibv_path_record path;
};
# 41 "/usr/include/rdma/rdma_cma.h" 2 3 4
# 50 "/usr/include/rdma/rdma_cma.h" 3 4
enum rdma_cm_event_type {
 RDMA_CM_EVENT_ADDR_RESOLVED,
 RDMA_CM_EVENT_ADDR_ERROR,
 RDMA_CM_EVENT_ROUTE_RESOLVED,
 RDMA_CM_EVENT_ROUTE_ERROR,
 RDMA_CM_EVENT_CONNECT_REQUEST,
 RDMA_CM_EVENT_CONNECT_RESPONSE,
 RDMA_CM_EVENT_CONNECT_ERROR,
 RDMA_CM_EVENT_UNREACHABLE,
 RDMA_CM_EVENT_REJECTED,
 RDMA_CM_EVENT_ESTABLISHED,
 RDMA_CM_EVENT_DISCONNECTED,
 RDMA_CM_EVENT_DEVICE_REMOVAL,
 RDMA_CM_EVENT_MULTICAST_JOIN,
 RDMA_CM_EVENT_MULTICAST_ERROR,
 RDMA_CM_EVENT_ADDR_CHANGE,
 RDMA_CM_EVENT_TIMEWAIT_EXIT
};

enum rdma_port_space {
 RDMA_PS_IPOIB = 0x0002,
 RDMA_PS_TCP = 0x0106,
 RDMA_PS_UDP = 0x0111,
 RDMA_PS_IB = 0x013F,
};
# 87 "/usr/include/rdma/rdma_cma.h" 3 4
struct rdma_ib_addr {
 union ibv_gid sgid;
 union ibv_gid dgid;
 uint16_t pkey;
};

struct rdma_addr {
 union {
  struct sockaddr src_addr;
  struct sockaddr_in src_sin;
  struct sockaddr_in6 src_sin6;
  struct sockaddr_storage src_storage;
 };
 union {
  struct sockaddr dst_addr;
  struct sockaddr_in dst_sin;
  struct sockaddr_in6 dst_sin6;
  struct sockaddr_storage dst_storage;
 };
 union {
  struct rdma_ib_addr ibaddr;
 } addr;
};

struct rdma_route {
 struct rdma_addr addr;
 struct ibv_sa_path_rec *path_rec;
 int num_paths;
};

struct rdma_event_channel {
 int fd;
};

struct rdma_cm_id {
 struct ibv_context *verbs;
 struct rdma_event_channel *channel;
 void *context;
 struct ibv_qp *qp;
 struct rdma_route route;
 enum rdma_port_space ps;
 uint8_t port_num;
 struct rdma_cm_event *event;
 struct ibv_comp_channel *send_cq_channel;
 struct ibv_cq *send_cq;
 struct ibv_comp_channel *recv_cq_channel;
 struct ibv_cq *recv_cq;
 struct ibv_srq *srq;
 struct ibv_pd *pd;
 enum ibv_qp_type qp_type;
};

enum {
 RDMA_MAX_RESP_RES = 0xFF,
 RDMA_MAX_INIT_DEPTH = 0xFF
};

struct rdma_conn_param {
 const void *private_data;
 uint8_t private_data_len;
 uint8_t responder_resources;
 uint8_t initiator_depth;
 uint8_t flow_control;
 uint8_t retry_count;
 uint8_t rnr_retry_count;

 uint8_t srq;
 uint32_t qp_num;
};

struct rdma_ud_param {
 const void *private_data;
 uint8_t private_data_len;
 struct ibv_ah_attr ah_attr;
 uint32_t qp_num;
 uint32_t qkey;
};

struct rdma_cm_event {
 struct rdma_cm_id *id;
 struct rdma_cm_id *listen_id;
 enum rdma_cm_event_type event;
 int status;
 union {
  struct rdma_conn_param conn;
  struct rdma_ud_param ud;
 } param;
};





struct rdma_addrinfo {
 int ai_flags;
 int ai_family;
 int ai_qp_type;
 int ai_port_space;
 socklen_t ai_src_len;
 socklen_t ai_dst_len;
 struct sockaddr *ai_src_addr;
 struct sockaddr *ai_dst_addr;
 char *ai_src_canonname;
 char *ai_dst_canonname;
 size_t ai_route_len;
 void *ai_route;
 size_t ai_connect_len;
 void *ai_connect;
 struct rdma_addrinfo *ai_next;
};
# 210 "/usr/include/rdma/rdma_cma.h" 3 4
struct rdma_event_channel *rdma_create_event_channel(void);
# 224 "/usr/include/rdma/rdma_cma.h" 3 4
void rdma_destroy_event_channel(struct rdma_event_channel *channel);
# 247 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_create_id(struct rdma_event_channel *channel,
     struct rdma_cm_id **id, void *context,
     enum rdma_port_space ps);
# 274 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_create_ep(struct rdma_cm_id **id, struct rdma_addrinfo *res,
     struct ibv_pd *pd, struct ibv_qp_init_attr *qp_init_attr);
# 286 "/usr/include/rdma/rdma_cma.h" 3 4
void rdma_destroy_ep(struct rdma_cm_id *id);
# 300 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_destroy_id(struct rdma_cm_id *id);
# 318 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_bind_addr(struct rdma_cm_id *id, struct sockaddr *addr);
# 343 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_resolve_addr(struct rdma_cm_id *id, struct sockaddr *src_addr,
        struct sockaddr *dst_addr, int timeout_ms);
# 360 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_resolve_route(struct rdma_cm_id *id, int timeout_ms);
# 383 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_create_qp(struct rdma_cm_id *id, struct ibv_pd *pd,
     struct ibv_qp_init_attr *qp_init_attr);
# 397 "/usr/include/rdma/rdma_cma.h" 3 4
void rdma_destroy_qp(struct rdma_cm_id *id);
# 415 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_connect(struct rdma_cm_id *id, struct rdma_conn_param *conn_param);
# 435 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_listen(struct rdma_cm_id *id, int backlog);




int rdma_get_request(struct rdma_cm_id *listen, struct rdma_cm_id **id);
# 461 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_accept(struct rdma_cm_id *id, struct rdma_conn_param *conn_param);
# 479 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_reject(struct rdma_cm_id *id, const void *private_data,
  uint8_t private_data_len);
# 502 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_notify(struct rdma_cm_id *id, enum ibv_event_type event);
# 513 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_disconnect(struct rdma_cm_id *id);
# 533 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_join_multicast(struct rdma_cm_id *id, struct sockaddr *addr,
   void *context);
# 551 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_leave_multicast(struct rdma_cm_id *id, struct sockaddr *addr);
# 569 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_get_cm_event(struct rdma_event_channel *channel,
        struct rdma_cm_event **event);
# 582 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_ack_cm_event(struct rdma_cm_event *event);

static inline uint16_t rdma_get_src_port(struct rdma_cm_id *id)
{
 return id->route.addr.src_addr.sa_family == 10 ?
  id->route.addr.src_sin6.sin6_port :
  id->route.addr.src_sin.sin_port;
}

static inline uint16_t rdma_get_dst_port(struct rdma_cm_id *id)
{
 return id->route.addr.dst_addr.sa_family == 10 ?
  id->route.addr.dst_sin6.sin6_port :
  id->route.addr.dst_sin.sin_port;
}

static inline struct sockaddr *rdma_get_local_addr(struct rdma_cm_id *id)
{
 return &id->route.addr.src_addr;
}

static inline struct sockaddr *rdma_get_peer_addr(struct rdma_cm_id *id)
{
 return &id->route.addr.dst_addr;
}
# 621 "/usr/include/rdma/rdma_cma.h" 3 4
struct ibv_context **rdma_get_devices(int *num_devices);
# 631 "/usr/include/rdma/rdma_cma.h" 3 4
void rdma_free_devices(struct ibv_context **list);
# 641 "/usr/include/rdma/rdma_cma.h" 3 4
const char *rdma_event_str(enum rdma_cm_event_type event);


enum {
 RDMA_OPTION_ID = 0,
 RDMA_OPTION_IB = 1
};


enum {
 RDMA_OPTION_ID_TOS = 0,
 RDMA_OPTION_ID_REUSEADDR = 1,
 RDMA_OPTION_IB_PATH = 1
};
# 664 "/usr/include/rdma/rdma_cma.h" 3 4
int rdma_set_option(struct rdma_cm_id *id, int level, int optname,
      void *optval, size_t optlen);






int rdma_migrate_id(struct rdma_cm_id *id, struct rdma_event_channel *channel);




int rdma_getaddrinfo(char *node, char *service,
       struct rdma_addrinfo *hints,
       struct rdma_addrinfo **res);

void rdma_freeaddrinfo(struct rdma_addrinfo *res);
# 11 "ibv_rdma.h" 2
# 25 "ibv_rdma.h"
enum msgtype_t{
    MSG_MR,
    MSG_DONE,
};

struct message {
    enum msgtype_t type;
    union {
        struct ibv_mr mr;
    } data;
};

enum rdma_state_t {
    STATE_INIT,
    STATE_READY,
    STATE_BUSY0,
    STATE_BUSY1,
};

typedef struct {
    struct rdma_cm_id *id;
    struct ibv_qp *qp;

    struct ibv_mr *recv_mr;
    struct ibv_mr *send_mr;
    struct ibv_mr *rdma_local_mr;
    struct ibv_mr *rdma_remote_mr;
    struct ibv_mr peer_mr;

    struct ibv_context *ibvctx;
    struct ibv_pd *pd;
    struct ibv_cq *cq;
    struct ibv_comp_channel *comp_channel;

    int connected;

    pthread_t cq_poller_thread;

    struct message *recv_msg;
    struct message *send_msg;

    char *rdma_local_region;
    char *rdma_remote_region;
    enum rdma_state_t rdma_state;
} IbvConnection;

typedef enum {
    RCMethodNone = 0,
    RCMethodMemcpyH2D,
    RCMethodMemcpyD2H,
    RCMethodMalloc,
    RCMethodFree,
    RCMethodGetErrorString,
    RCMethodGetDeviceProperties,
    RCMethodRuntimeGetVersion,
    RCMethodDeviceSynchronize,
    RCMethodDscudaMemcpyToSymbolAsyncH2D,
    RCMethodDscudaMemcpyToSymbolAsyncD2D,
    RCMethodDscudaMemcpyFromSymbolAsyncD2H,
    RCMethodDscudaMemcpyFromSymbolAsyncD2D,
    RCMethodDscudaLoadModule,
    RCMethodDscudaLaunchKernel,



    RCMethodEnd
} RCMethod;


typedef struct {
    RCMethod method;
    int payload;
} IbvHdr;


typedef struct {
    RCMethod method;
    size_t count;
    RCadr dstadr;
    void *srcbuf;
} IbvMemcpyH2DInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvMemcpyH2DReturnHdr;


typedef struct {
    RCMethod method;
    size_t count;
    RCadr srcadr;
} IbvMemcpyD2HInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
    void *dstbuf;
} IbvMemcpyD2HReturnHdr;


typedef struct {
    RCMethod method;
    size_t size;
} IbvMallocInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
    RCadr devAdr;
} IbvMallocReturnHdr;


typedef struct {
    RCMethod method;
    RCadr devAdr;
} IbvFreeInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvFreeReturnHdr;


typedef struct {
    RCMethod method;
    int device;
    cudaError_t err;
} IbvGetErrorStringInvokeHdr;

typedef struct {
    RCMethod method;
    char *errmsg;
} IbvGetErrorStringReturnHdr;


typedef struct {
    RCMethod method;
    int device;
} IbvGetDevicePropertiesInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
    cudaDeviceProp prop;
} IbvGetDevicePropertiesReturnHdr;


typedef struct {
    RCMethod method;
    char dummy[8];
} IbvRuntimeGetVersionInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
    int version;
} IbvRuntimeGetVersionReturnHdr;


typedef struct {
    RCMethod method;
    char dummy[8];
} IbvDeviceSynchronizeInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvDeviceSynchronizeReturnHdr;


typedef struct {
    RCMethod method;
    int moduleid;
    char symbol[64];
    size_t count;
    size_t offset;
    RCstream stream;
    void *src;
} IbvDscudaMemcpyToSymbolAsyncH2DInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvDscudaMemcpyToSymbolAsyncH2DReturnHdr;


typedef struct {
    RCMethod method;
    int moduleid;
    char symbol[64];
    size_t count;
    size_t offset;
    RCstream stream;
    RCadr srcadr;
} IbvDscudaMemcpyToSymbolAsyncD2DInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvDscudaMemcpyToSymbolAsyncD2DReturnHdr;



typedef struct {
    RCMethod method;
    int moduleid;
    char symbol[64];
    size_t count;
    size_t offset;
    RCstream stream;
} IbvDscudaMemcpyFromSymbolAsyncD2HInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
    void *dst;
} IbvDscudaMemcpyFromSymbolAsyncD2HReturnHdr;


typedef struct {
    RCMethod method;
    int moduleid;
    char symbol[64];
    size_t count;
    size_t offset;
    RCstream stream;
    RCadr dstadr;
} IbvDscudaMemcpyFromSymbolAsyncD2DInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvDscudaMemcpyFromSymbolAsyncD2DReturnHdr;



typedef struct {
    RCMethod method;
    uint64_t ipaddr;
    unsigned long int pid;
    char modulename[64];
    void *moduleimage;
} IbvDscudaLoadModuleInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
    int moduleid;
} IbvDscudaLoadModuleReturnHdr;


typedef struct {
    RCMethod method;
    int moduleid;
    int kernelid;
    char kernelname[64];
    unsigned int gdim[3];
    unsigned int bdim[3];
    unsigned int smemsize;
    RCstream stream;
    int narg;
    void *args;
} IbvDscudaLaunchKernelInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvDscudaLaunchKernelReturnHdr;




typedef struct {
    int type;
    union {
        uint64_t pointerval;
        unsigned int intval;
        float floatval;
        char customval[64];
    } val;
    unsigned int offset;
    unsigned int size;
} IbvArg;


void die(const char *reason);
void build_connection(struct rdma_cm_id *id);
void build_params(struct rdma_conn_param *params);
void destroy_connection(IbvConnection *conn);
void set_on_completion_handler(void (*handler)(struct ibv_wc *));
void on_completion_client(struct ibv_wc *);
void on_completion_server(struct ibv_wc *);
void wait_event(struct rdma_event_channel *ec, int et, int (*handler)(struct rdma_cm_id *id));
void wait_ready_to_rdma(IbvConnection *conn);
void wait_ready_to_disconnect(IbvConnection *conn);
void kickoff_rdma(IbvConnection *conn, int length);
double RCgetCputime(double *t0);
void send_mr(IbvConnection *conn);
# 14 "dscuda.h" 2

enum {
    RC_REMOTECALL_TYPE_RPC,
    RC_REMOTECALL_TYPE_IBV,
};


char *dscudaMemcpyKindName(cudaMemcpyKind kind);
const char *dscudaGetIpaddrString(unsigned int addr);


int dscudaRemoteCallType(void);
void dscudaSetErrorHandler(void (*handler)(void *), void *handler_arg);
void dscudaGetMangledFunctionName(char *name, const char *info, const char *ptxfile);
int *dscudaLoadModule(char *srcname);
void dscudaLaunchKernelWrapper(int *moduleid, int kid, char *kname,
                              RCdim3 gdim, RCdim3 bdim, RCsize smemsize, RCstream stream,
                              RCargs args);
void ibvDscudaLaunchKernelWrapper(int *moduleid, int kid, char *kname,
                                 int *gdim, int *bdim, RCsize smemsize, RCstream stream,
                                 int narg, IbvArg *arg);
void dscudaWrite(size_t size, char *dst, char *src);
void dscudaRead(size_t size, char *dst, char *src);

cudaError_t dscudaFuncGetAttributesWrapper(int *moduleid, struct cudaFuncAttributes *attr, const char *func);

cudaError_t dscudaMemcpyToSymbolWrapper(int *moduleid, const char *symbol, const void *src,
                                       size_t count, size_t offset = 0,
                                       enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);

cudaError_t dscudaMemcpyToSymbolAsyncWrapper(int *moduleid, const char *symbol, const void *src,
         size_t count, size_t offset = 0,
         enum cudaMemcpyKind kind = cudaMemcpyHostToDevice, cudaStream_t stream = 0);

cudaError_t dscudaMemcpyFromSymbolWrapper(int *moduleid, void *dst, const char *symbol,
      size_t count, size_t offset = 0,
      enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);

cudaError_t dscudaMemcpyFromSymbolAsyncWrapper(int *moduleid, void *dst, const char *symbol,
           size_t count, size_t offset = 0,
           enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost, cudaStream_t stream = 0);

cudaError_t dscudaBindTextureWrapper(int *moduleid, char *texname,
                                    size_t *offset,
                                    const struct textureReference *tex,
                                    const void *devPtr,
                                    const struct cudaChannelFormatDesc *desc,
                                    size_t size = (2147483647 * 2U + 1U));

template<class T, int dim, enum cudaTextureReadMode readMode>
cudaError_t dscudaBindTextureWrapper(int *moduleid, char *texname,
                                    size_t *offset,
                                    const struct texture<T, dim, readMode> &tex,
                                    const void *devPtr,
                                    const struct cudaChannelFormatDesc &desc,
                                    size_t size = (2147483647 * 2U + 1U))
{
  return cudaBindTexture(offset, &tex, devPtr, &desc, size);
}

template<class T, int dim, enum cudaTextureReadMode readMode>
cudaError_t dscudaBindTextureWrapper(int *moduleid, char *texname,
                                    size_t *offset,
                                    const struct texture<T, dim, readMode> &tex,
                                    const void *devPtr,
                                    size_t size = (2147483647 * 2U + 1U))
{
  return cudaBindTexture(offset, tex, devPtr, tex.channelDesc, size);
}


cudaError_t dscudaBindTexture2DWrapper(int *moduleid, char *texname,
                                      size_t *offset,
                                      const struct textureReference *tex,
                                      const void *devPtr,
                                      const struct cudaChannelFormatDesc *desc,
                                      size_t width, size_t height, size_t pitch);

template<class T, int dim, enum cudaTextureReadMode readMode>
cudaError_t dscudaBindTexture2DWrapper(int *moduleid, char *texname,
                                      size_t *offset,
                                      const struct texture<T, dim, readMode> &tex,
                                      const void *devPtr,
                                      const struct cudaChannelFormatDesc &desc,
                                      size_t width, size_t height, size_t pitch)
{
    return dscudaBindTexture2DWrapper(moduleid, texname,
                                     offset, &tex, devPtr, &desc, width, height, pitch);
}

template<class T, int dim, enum cudaTextureReadMode readMode>
cudaError_t dscudaBindTexture2DWrapper(int *moduleid, char *texname,
                                      size_t *offset,
                                      const struct texture<T, dim, readMode> &tex,
                                      const void *devPtr,
                                      size_t width, size_t height, size_t pitch)
{
    return dscudaBindTexture2DWrapper(moduleid, texname,
                                     offset, &tex, devPtr, &tex.channelDesc, width, height, pitch);
}

cudaError_t dscudaBindTextureToArrayWrapper(int *moduleid, char *texname,
                                           const struct textureReference *tex,
                                           const struct cudaArray * array,
                                           const struct cudaChannelFormatDesc *desc);

template<class T, int dim, enum cudaTextureReadMode readMode>
cudaError_t dscudaBindTextureToArrayWrapper(int *moduleid, char *texname,
                                           const struct texture<T, dim, readMode> &tex,
                                           const struct cudaArray * array,
                                           const struct cudaChannelFormatDesc & desc)
{
    return dscudaBindTextureToArrayWrapper(moduleid, texname, &tex, array, &desc);
}

template<class T, int dim, enum cudaTextureReadMode readMode>
cudaError_t dscudaBindTextureToArrayWrapper(int *moduleid, char *texname,
                                           const struct texture<T, dim, readMode> &tex,
                                           const struct cudaArray * array)
{
    struct cudaChannelFormatDesc desc;
    cudaError_t err = cudaGetChannelDesc(&desc, array);
    return err == cudaSuccess ? dscudaBindTextureToArrayWrapper(moduleid, texname, &tex, array, &desc) : err;
}

#pragma dscuda end_of_rcutil_h
# 10 "libdscuda.cu" 2


static const char *DEFAULT_SVRIP = "localhost";
static char Dscudapath[512];

typedef struct {
    int id;
    int cid;


    char ip[512];
} RCServer_t;

typedef struct {
    int nredundancy;
    RCServer_t server[4];
} Vdev_t;

static int Nvdev;
static int Vdevid = 0;
static Vdev_t Vdev[64];
static CLIENT *Clnt[64][4];
static unsigned int MyIpaddr = 0;

static const int UseIbv = 1;
# 45 "libdscuda.cu"
cudaError_t cudaGetLastError(void) { if (UseIbv) { return rpcCudaGetLastError(void); } else { return ibvCudaGetLastError(void); }}
cudaError_t cudaPeekAtLastError(void) { if (UseIbv) { return rpcCudaPeekAtLastError(void); } else { return ibvCudaPeekAtLastError(void); }}
const char * cudaGetErrorString(cudaError_t error) { if (UseIbv) { return rpcCudaGetErrorString(cudaError_t error); } else { return ibvCudaGetErrorString(cudaError_t error); }}
cudaError_t cudaRuntimeGetVersion(int *runtimeVersion) { if (UseIbv) { return rpcCudaRuntimeGetVersion(int *runtimeVersion); } else { return ibvCudaRuntimeGetVersion(int *runtimeVersion); }}
cudaError_t cudaDeviceSynchronize(void) { if (UseIbv) { return rpcCudaDeviceSynchronize(void); } else { return ibvCudaDeviceSynchronize(void); }}
cudaError_t cudaDeviceReset(void) { if (UseIbv) { return rpcCudaDeviceReset(void); } else { return ibvCudaDeviceReset(void); }}
cudaError_t cudaMalloc(void **devAdrPtr, size_t size) { if (UseIbv) { return rpcCudaMalloc(void **devAdrPtr, size_t size); } else { return ibvCudaMalloc(void **devAdrPtr, size_t size); }}
cudaError_t cudaFree(void *mem) { if (UseIbv) { return rpcCudaFree(void *mem); } else { return ibvCudaFree(void *mem); }}
cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind) { if (UseIbv) { return rpcCudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind); } else { return ibvCudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind); }}
cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device) { if (UseIbv) { return rpcCudaGetDeviceProperties(struct cudaDeviceProp *prop, int device); } else { return ibvCudaGetDeviceProperties(struct cudaDeviceProp *prop, int device); }}
cudaError_t cudaEventCreate(cudaEvent_t *event) { if (UseIbv) { return rpcCudaEventCreate(cudaEvent_t *event); } else { return ibvCudaEventCreate(cudaEvent_t *event); }}
cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags) { if (UseIbv) { return rpcCudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags); } else { return ibvCudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags); }}
cudaError_t cudaEventDestroy(cudaEvent_t event) { if (UseIbv) { return rpcCudaEventDestroy(cudaEvent_t event); } else { return ibvCudaEventDestroy(cudaEvent_t event); }}
cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end) { if (UseIbv) { return rpcCudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end); } else { return ibvCudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end); }}
cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream) { if (UseIbv) { return rpcCudaEventRecord(cudaEvent_t event, cudaStream_t stream); } else { return ibvCudaEventRecord(cudaEvent_t event, cudaStream_t stream); }}
cudaError_t cudaEventSynchronize(cudaEvent_t event) { if (UseIbv) { return rpcCudaEventSynchronize(cudaEvent_t event); } else { return ibvCudaEventSynchronize(cudaEvent_t event); }}
cudaError_t cudaEventQuery(cudaEvent_t event) { if (UseIbv) { return rpcCudaEventQuery(cudaEvent_t event); } else { return ibvCudaEventQuery(cudaEvent_t event); }}

static struct rdma_cm_id *Cmid[64][4];


typedef struct {
    int valid;
    int vdevid;
    int id[4];
    char name[256];
    time_t sent_time;
} Module;

static Module Modulelist[128] = {0};

static void initEnv(void);
static void initClient(void);
static void setupSocketConnection(int idev, RCServer_t *sp);
static void setupIbvConnection(int idev, RCServer_t *sp);
static int on_addr_resolved(struct rdma_cm_id *id);
static int on_route_resolved(struct rdma_cm_id *id);
static int on_connection(struct rdma_cm_id *id);
static int ibvDscudaLoadModule(unsigned int ipaddr, pid_t pid, char *modulename, char *modulebuf, int vdevid, int raidid);
static void ibvDscudaLaunchKernel(int moduleid, int kid, char *kname,
                                 int *gdim, int *bdim, RCsize smemsize, RCstream stream,
                                 int narg, IbvArg *arg, int vdevid, int raidid);

typedef struct RCmappedMem_t {
    void *pHost;
    void *pDevice;
    int size;
    RCmappedMem_t *prev;
    RCmappedMem_t *next;
} RCmappedMem;

static void RCmappedMemRegister(void *pHost, void* pDevice, size_t size);
static void RCmappedMemUnregister(void *pHost);
static RCmappedMem *RCmappedMemQuery(void *pHost);

RCmappedMem *RCmappedMemListTop = ((void *)0);
RCmappedMem *RCmappedMemListTail = ((void *)0);

typedef struct RCstreamArray_t {
    cudaStream_t s[4];
    RCstreamArray_t *prev;
    RCstreamArray_t *next;
} RCstreamArray;

static void RCstreamArrayRegister(cudaStream_t *streams);
static void RCstreamArrayUnregister(cudaStream_t stream0);
static RCstreamArray *RCstreamArrayQuery(cudaStream_t stream0);

RCstreamArray *RCstreamArrayListTop = ((void *)0);
RCstreamArray *RCstreamArrayListTail = ((void *)0);

typedef struct RCeventArray_t {
    cudaEvent_t e[4];
    RCeventArray_t *prev;
    RCeventArray_t *next;
} RCeventArray;

static void RCeventArrayRegister(cudaEvent_t *events);
static void RCeventArrayUnregister(cudaEvent_t event0);
static RCeventArray *RCeventArrayQuery(cudaEvent_t event0);

RCeventArray *RCeventArrayListTop = ((void *)0);
RCeventArray *RCeventArrayListTail = ((void *)0);

typedef struct RCcuarrayArray_t {
    cudaArray *ap[4];
    RCcuarrayArray_t *prev;
    RCcuarrayArray_t *next;
} RCcuarrayArray;

static void RCcuarrayArrayRegister(cudaArray **cuarrays);
static void RCcuarrayArrayUnregister(cudaArray *cuarray0);
static RCcuarrayArray *RCcuarrayArrayQuery(cudaArray *cuarray0);

RCcuarrayArray *RCcuarrayArrayListTop = ((void *)0);
RCcuarrayArray *RCcuarrayArrayListTail = ((void *)0);






static void
RCmappedMemRegister(void *pHost, void* pDevice, size_t size)
{
    RCmappedMem *mem = (RCmappedMem *)malloc(sizeof(RCmappedMem));
    if (!mem) {
        perror("RCmappedMemRegister");
    }
    mem->pHost = pHost;
    mem->pDevice = pDevice;
    mem->size = size;
    mem->prev = RCmappedMemListTail;
    mem->next = ((void *)0);
    if (!RCmappedMemListTop) {
        RCmappedMemListTop = mem;
    }
    else {
        RCmappedMemListTail->next = mem;
    }
    RCmappedMemListTail = mem;
}

static void
RCmappedMemUnregister(void *pHost)
{
    RCmappedMem *mem = RCmappedMemQuery(pHost);
    if (!mem) return;

    if (mem->prev) {
        mem->prev->next = mem->next;
    }
    else {
        RCmappedMemListTop = mem->next;
        if (mem->next) {
            mem->next->prev = ((void *)0);
        }
    }
    if (!mem->next) {
        RCmappedMemListTail = mem->prev;
    }
    free(mem);
}

static RCmappedMem *
RCmappedMemQuery(void *pHost)
{
    RCmappedMem *mem = RCmappedMemListTop;
    while (mem) {
        if (mem->pHost == pHost) {
            return mem;
        }
        mem = mem->next;
    }
    return ((void *)0);
}

static char*
readServerConf(char *fname)
{
    FILE *fp = fopen(fname, "r");
    char linebuf[1024];
    int len;
    static char buf[1024 * 128];

    buf[0] = ((void *)0);
    if (!fp) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "cannot open file '%s'\n", fname);;
        exit(1);
    }

    while (!feof(fp)) {
        char *s = fgets(linebuf, sizeof(linebuf), fp);
        if (!s) break;
        len = strlen(linebuf);
        if (linebuf[len-1] == '\n') {
            linebuf[len-1] = ((void *)0);
        }
        if (sizeof(buf) < strlen(buf) + len) {
            if (0 <= dscudaWarnLevel()) fprintf(stderr, "readServerConf:file %s too long.\n", fname);;
            exit(1);
        }
        strncat(buf, linebuf, sizeof(linebuf));
        strcat(buf, " ");
    }
    fclose(fp);
    return buf;
}

static void
initEnv(void)
{
    static int firstcall = 1;
    int i, ired;
    char *sconfname, *env, *ip, ips[64][256];
    char buf[8192];
    RCServer_t *sp;
    Vdev_t *vdev;

    if (!firstcall) return;

    firstcall = 0;


    env = getenv("DSCUDA_WARNLEVEL");
    if (env) {
        int tmp;
        tmp = atoi(strtok(env, " "));
        if (0 <= tmp) {
            dscudaSetWarnLevel(tmp);
        }
        if (1 <= dscudaWarnLevel()) fprintf(stderr, "WarnLevel: %d\n", dscudaWarnLevel());;
    }


    if (sconfname = getenv("DSCUDA_SERVER_CONF")) {
        env = readServerConf(sconfname);
    }
    else {
        env = getenv("DSCUDA_SERVER");
    }
    if (env) {
 strncpy(buf, env, sizeof(buf));
        Nvdev = 0;
        ip = strtok(buf, " ");
 while (ip) {
            strcpy(ips[Nvdev], ip);
            Nvdev++;
            ip = strtok(((void *)0), " ");
        }
        for (i = 0; i < Nvdev; i++) {
            int nred = 0;
            vdev = Vdev + i;
            ip = strtok(ips[i], ",");

            while (ip) {
                strcpy(vdev->server[nred].ip, ip);
                nred++;
                ip = strtok(((void *)0), ",");
            }
            vdev->nredundancy = nred;

            sp = vdev->server;
            for (ired = 0; ired < nred; ired++, sp++) {
                strncpy(buf, sp->ip, sizeof(buf));
                ip = strtok(buf, ":");
                strcpy(sp->ip, ip);
                ip = strtok(((void *)0), ":");
                sp->id = ired;
                sp->cid = ip ? atoi(ip) : 0;
            }
        }
    }
    else {
        Nvdev = 1;
        Vdev[0].nredundancy = 1;
        sp = Vdev[0].server;
        sp->id = 0;
        strncpy(sp->ip, DEFAULT_SVRIP, sizeof(sp->ip));
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "DSCUDA Server\n");;
    vdev = Vdev;
    for (i = 0; i < Nvdev; i++) {
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "  virtual device%d\n", i);;
        sp = vdev->server;
        for (ired = 0; ired < vdev->nredundancy; ired++) {
            if (3 <= dscudaWarnLevel()) fprintf(stderr, "    %s:%d\n", sp->ip, sp->id);;
            sp++;
        }
        vdev++;
    }


    env = getenv("DSCUDA_PATH");
    if (!env) {
        fprintf(stderr, "An environment variable 'DSCUDA_PATH' not set.\n");
        exit(1);
    }
    strncpy(Dscudapath, env, sizeof(Dscudapath));


    env = getenv("DSCUDA_REMOTECALL");
    if (!env) {
        fprintf(stderr, "Set an environment variable 'DSCUDA_REMOTECALL' to 'ibv' or 'rpc'.\n");
        exit(1);
    }
    if (!strcmp(env, "ibv")) {
        UseIbv = 1;
        if (2 <= dscudaWarnLevel()) fprintf(stderr, "method of remote procedure call: InfiniBand Verbs\n");;
    }
    else {
        UseIbv = 0;
        if (2 <= dscudaWarnLevel()) fprintf(stderr, "method of remote procedure call: RPC\n");;
    }
}

static void
initClient(void)
{
    static int firstcall = 1;

    if (!firstcall) return;

    firstcall = 0;
    initEnv();

    for (int i = 0; i < Nvdev; i++) {
        Vdev_t *vdev = Vdev + i;
        RCServer_t *sp = vdev->server;
        for (int ired = 0; ired < vdev->nredundancy; ired++, sp++) {
            if (UseIbv) {
                setupIbvConnection(i, sp);
            }
            else {
                setupSocketConnection(i, sp);
            }
        }
    }
    struct sockaddr_in addrin;
    get_myaddress(&addrin);
    MyIpaddr = addrin.sin_addr.s_addr;
    if (2 <= dscudaWarnLevel()) fprintf(stderr, "Client IP address : %s\n", dscudaGetIpaddrString(MyIpaddr));;
}

static void
setupSocketConnection(int idev, RCServer_t *sp)
{
    int id = sp->id;
    int cid = sp->cid;
    int portid = 0x200007 + cid;

    if (2 <= dscudaWarnLevel()) fprintf(stderr, "Requesting socket connection to %s:%d (port %d)...\n", sp->ip, cid, portid);;






    struct sockaddr_in sockaddr;
    struct hostent *hent;
    int sock = -1;

    hent = gethostbyname(sp->ip);
    memset((char *)&sockaddr, 0, sizeof(sockaddr));
    sockaddr.sin_family = 2;
    bcopy(hent->h_addr_list[0], (caddr_t)&sockaddr.sin_addr, hent->h_length);
    sockaddr.sin_port = htons((in_port_t)0);

    Clnt[idev][id] = clnttcp_create(&sockaddr,
                                    portid,
                                    1,
                                    &sock,
                                    (1024*1024), (1024*1024));
# 422 "libdscuda.cu"
    if (!Clnt[idev][id]) {
        char buf[256];
        sprintf(buf, "%s:%d (port %d) ", sp->ip, id, portid);
        clnt_pcreateerror(buf);
        if (0 == strcmp(sp->ip, DEFAULT_SVRIP)) {
            if (0 <= dscudaWarnLevel()) fprintf(stderr, "You may need to set an environment variable 'DSCUDA_SERVER'.\n");;
        }
        else {
            if (0 <= dscudaWarnLevel()) fprintf(stderr, "DSCUDA server (dscudasrv on %s:%d) may be down.\n", sp->ip, id);;
        }
        exit(1);
    }
}

static void
setupIbvConnection(int idev, RCServer_t *sp)
{
    struct addrinfo *addr;
    struct rdma_cm_id *cmid= ((void *)0);
    struct rdma_event_channel *ec = ((void *)0);
    int id = sp->id;
    int cid = sp->cid;
    int portid = (65432) + cid;
    char *service;

    if (2 <= dscudaWarnLevel()) fprintf(stderr, "Requesting IB Verb connection to %s:%d (port %d)...\n", sp->ip, cid, portid);;

    asprintf(&service, "%d", portid);
    do { if ( (getaddrinfo(sp->ip, service, ((void *)0), &addr))) {fprintf(stderr, "error: " "getaddrinfo(sp->ip, service, NULL, &addr)" " failed (returned non-zero)." ); exit(1); } } while (0);
    do { if (!(ec = rdma_create_event_channel())) {fprintf(stderr, "error: " "ec = rdma_create_event_channel()" " failed (returned zero/null)."); exit(1); } } while (0);
    do { if ( (rdma_create_id(ec, &cmid, ((void *)0), RDMA_PS_TCP))) {fprintf(stderr, "error: " "rdma_create_id(ec, &cmid, NULL, RDMA_PS_TCP)" " failed (returned non-zero)." ); exit(1); } } while (0);
    Cmid[idev][id] = cmid;
    do { if ( (rdma_resolve_addr(cmid, ((void *)0), addr->ai_addr, (500)))) {fprintf(stderr, "error: " "rdma_resolve_addr(cmid, NULL, addr->ai_addr, RC_IBV_TIMEOUT)" " failed (returned non-zero)." ); exit(1); } } while (0);
    freeaddrinfo(addr);
    wait_event(ec, RDMA_CM_EVENT_ADDR_RESOLVED, on_addr_resolved);
    wait_event(ec, RDMA_CM_EVENT_ROUTE_RESOLVED, on_route_resolved);
    set_on_completion_handler(on_completion_client);
    wait_event(ec, RDMA_CM_EVENT_ESTABLISHED, on_connection);
    send_mr((IbvConnection *)cmid->context);
    sleep(1);
    if (2 <= dscudaWarnLevel()) fprintf(stderr, "connection established\n");;
}

static int
on_addr_resolved(struct rdma_cm_id *id)
{
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "  IB Verb address resolved.\n");;
    build_connection(id);
    do { if ( (rdma_resolve_route(id, (500)))) {fprintf(stderr, "error: " "rdma_resolve_route(id, RC_IBV_TIMEOUT)" " failed (returned non-zero)." ); exit(1); } } while (0);

    return 0;
}

static int
on_route_resolved(struct rdma_cm_id *id)
{
    struct rdma_conn_param cm_params;

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "  IB Verb route resolved.\n");;
    build_params(&cm_params);
    do { if ( (rdma_connect(id, &cm_params))) {fprintf(stderr, "error: " "rdma_connect(id, &cm_params)" " failed (returned non-zero)." ); exit(1); } } while (0);

    return 0;
}

static int
on_connection(struct rdma_cm_id *id)
{
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "  IB Verb connection established.\n");;
    ((IbvConnection *)id->context)->connected = 1;
    return 0;
}





static void (*errorHandler)(void *arg) = ((void *)0);
static void *errorHandlerArg = ((void *)0);

void
dscudaSetErrorHandler(void (*handler)(void *), void *handler_arg)
{
    errorHandler = handler;
    errorHandlerArg = handler_arg;
}

void
dscudaGetMangledFunctionName(char *name, const char *info, const char *ptxfile)
{
    static char mangler[256] = {0, };
    char cmd[4096];
    FILE *outpipe;

    if (!mangler[0]) {
        sprintf(mangler, "%s/bin/ptx2symbol", Dscudapath);
    }

    if (4 <= dscudaWarnLevel()) fprintf(stderr, "getMangledFunctionName(%08llx, %08llx)  info:\"%s\"\n", name, info, info);
                          ;

    sprintf(cmd, "%s %s << EOF\n%s\nEOF", mangler, ptxfile, info);
    outpipe = popen(cmd, "r");
    if (!outpipe) {
        perror("getMangledFunctionName()");
        exit(1);
    }
    fgets(name, 256, outpipe);
    pclose(outpipe);
    if (!strlen(name)) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "getMangledFunctionName() : %s returned an error. " "it could not found any entry, or found multiple candidates. " "set DSCUDA_WARNLEVEL 4 or higher and try again to see " "error messages from %s.\n", mangler, mangler);


                                                           ;
        exit(1);
    }
}

static void
invalidateModuleCache(void)
{

    int i;
    Module *mp;

    for (i = 0, mp = Modulelist; i < 128; i++, mp++) {
        if (!mp->valid) continue;
        mp->valid = 0;
    }

}

static void
checkResult(void *rp, RCServer_t *sp)
{
    if (rp) return;
    clnt_perror(Clnt[Vdevid][sp->id], sp->ip);
    exit(1);
}
# 569 "libdscuda.cu"
int *
dscudaLoadModule(char *modulename)
{
    int i, j, mid;
    Module *mp;

    if (5 <= dscudaWarnLevel()) fprintf(stderr, "dscudaLoadModule(0x%08llx) modulename:%s  ...", modulename, modulename);;



    for (i = 0, mp = Modulelist; i < 128; i++, mp++) {
        if (!mp->valid) continue;
        if (mp->vdevid != Vdevid) continue;
        if (!strcmp(modulename, mp->name)) {
            if (time(((void *)0)) - mp->sent_time < (60)) {
                if (5 <= dscudaWarnLevel()) fprintf(stderr, "done. found a cached one. id:%d  age:%d  name:%s\n", mp->id[i], time(((void *)0)) - mp->sent_time, mp->name);
                                                                     ;
                return mp->id;
            }
            if (5 <= dscudaWarnLevel()) fprintf(stderr, "done. found a cached one with id:%d, but not used since it is too old.  age:%d\n", mp->id[i], time(((void *)0)) - mp->sent_time);
                                                       ;
            mp->valid = 0;
        }
    }




    FILE *fp;
    char buf[1024];
    int modulebufoff = 0;
    int len;
    static int modulebufsize = 1024;
    static char *modulebuf = (char *)malloc(modulebufsize);

    fp = fopen(modulename, "r");
    if (!fp) {
        char buf[256];
        sprintf(buf, "dscudaLoadModule() : modulename : %s", modulename);
        perror(buf);
        exit(1);
    }
    while (!feof(fp)) {
        fgets(buf, sizeof(buf), fp);
        len = strlen(buf);
        if (modulebufoff + len > modulebufsize) {
            modulebufsize += 1024;
            modulebuf = (char *)realloc(modulebuf, modulebufsize);
        }
        memcpy(modulebuf + modulebufoff, buf, len);
        modulebufoff += len;
    }
    modulebuf[modulebufoff] = 0;
    fclose(fp);




    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (i = 0; i < vdev->nredundancy; i++, sp++) {
        if (UseIbv) {
            mid = ibvDscudaLoadModule(MyIpaddr, getpid(), modulename, modulebuf, Vdevid, i);
        }
        else {
            dscudaLoadModuleResult *rp = dscudaloadmoduleid_1(MyIpaddr, getpid(), modulename, modulebuf, Clnt[Vdevid][sp->id]);
            checkResult(rp, sp);
            mid = rp->id;
        }



        if (i == 0) {
            for (j = 0, mp = Modulelist; j < 128; j++, mp++) {
                if (!mp->valid) break;
                if (j == 128) {
                    if (0 <= dscudaWarnLevel()) fprintf(stderr, "module send buffer is full.\n");;
                    exit(1);
                }
            }
            mp->valid = 1;
            mp->sent_time = time(((void *)0));
            strncpy(mp->name, modulename, sizeof(mp->name));
            if (5 <= dscudaWarnLevel()) fprintf(stderr, "done. newly registered. id:%d\n", mid);;
        }
        mp->id[i] = mid;
    }
    mp->vdevid = Vdevid;
# 692 "libdscuda.cu"
    return mp->id;
}






void
dscudaWrite(size_t size, char *dst, char *src)
{
    dscudaResult *rp;
    RCbuf srcbuf;

    initClient();
    srcbuf.RCbuf_len = size;
    srcbuf.RCbuf_val = (char *)src;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaWrite(%d, 0x%08llx, 0x%08llx)...", size, (unsigned long)dst, (unsigned long)src);;

    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudawriteid_1((RCsize)size, (RCadr)dst, srcbuf, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
}

void
dscudaRead(size_t size, char *dst, char *src)
{
    dscudaReadResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaRead(%d, 0x%08llx, 0x%08llx)...", size, (unsigned long)dst, (unsigned long)src);;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudareadid_1((RCsize)size, (RCadr)src, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
    }
    memcpy(dst, rp->buf.RCbuf_val, rp->buf.RCbuf_len);
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
}
# 745 "libdscuda.cu"
cudaError_t
cudaThreadExit(void)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaThreadExit()...");;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudathreadexitid_1(Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
cudaThreadSynchronize(void)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaThreadSynchronize()...");;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudathreadsynchronizeid_1(Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
cudaThreadSetLimit(enum cudaLimit limit, size_t value)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaThreadSetLimit(%d, %d)...", limit, value);;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudathreadsetlimitid_1(limit, value, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit)
{
    cudaError_t err = cudaSuccess;
    dscudaThreadGetLimitResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaThreadGetLimit(0x%08llx, %d)...", pValue, limit);;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudathreadgetlimitid_1(limit, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    *pValue = rp->value;
    err = (cudaError_t)rp->err;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.  *pValue: %d\n", *pValue);;

    return err;
}

cudaError_t
cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaThreadSetCacheConfig(%d)...", cacheConfig);;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudathreadsetcacheconfigid_1(cacheConfig, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig)
{
    cudaError_t err = cudaSuccess;
    dscudaThreadGetCacheConfigResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaThreadGetCacheConfig(0x%08llx)...", pCacheConfig);;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudathreadgetcacheconfigid_1(Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    *pCacheConfig = (enum cudaFuncCache)rp->cacheConfig;
    err = (cudaError_t)rp->err;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.  *pCacheConfig: %d\n", *pCacheConfig);;

    return err;
}






cudaError_t
ibvCudaGetLastError(void)
{
    if (2 <= dscudaWarnLevel()) fprintf(stderr, "a dummy call to cudaGetLastError()\n");;
    return cudaSuccess;
}

cudaError_t
rpcCudaGetLastError(void)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;

    initClient();
    if (5 <= dscudaWarnLevel()) fprintf(stderr, "cudaGetLastError()...");;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudagetlasterrorid_1(Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    if (5 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
ibvCudaPeekAtLastError(void)
{
    if (2 <= dscudaWarnLevel()) fprintf(stderr, "a dummy call to cudaPeekAtLastError()\n");;
    return cudaSuccess;
}

cudaError_t
rpcCudaPeekAtLastError(void)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;

    initClient();
    if (5 <= dscudaWarnLevel()) fprintf(stderr, "cudaPeekAtLastError()...");;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudapeekatlasterrorid_1(Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    if (5 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

const char *
ibvCudaGetErrorString(cudaError_t error)
{
    static char str[256];

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaGetErrorString()...");;
    Vdev_t *vdev = Vdev + Vdevid;
    for (int i = 0; i < vdev->nredundancy; i++) {
        IbvConnection *conn = (IbvConnection *)Cmid[Vdevid][i]->context;
        IbvGetErrorStringInvokeHdr *spkt = (IbvGetErrorStringInvokeHdr *)conn->rdma_local_region;
        IbvGetErrorStringReturnHdr *rpkt = (IbvGetErrorStringReturnHdr *)conn->rdma_remote_region;


        int spktsize = sizeof(IbvGetErrorStringInvokeHdr);
        spkt->method = RCMethodGetErrorString;
        spkt->err = error;
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "spktsize:%d\n", spktsize);;
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "Vdevid:%d\n", Vdevid);;


        rpkt->method = RCMethodNone;
        wait_ready_to_rdma(conn);
        kickoff_rdma(conn, spktsize);
        while (!rpkt->method) {

        }


        if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaGetErrorString errmsg : %s\n", &rpkt->errmsg);;
        strncpy(str, (char *)&rpkt->errmsg, strlen((char *)&rpkt->errmsg) + 1);
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return str;
}

const char *
rpcCudaGetErrorString(cudaError_t error)
{
    dscudaGetErrorStringResult *rp;

    initClient();
    if (5 <= dscudaWarnLevel()) fprintf(stderr, "cudaGetErrorString()...");;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudageterrorstringid_1(error, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
    }
    if (5 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return rp->errmsg;
}





cudaError_t
cudaSetDeviceFlags(unsigned int flags)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaSetDeviceFlags()...");;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudasetdeviceflagsid_1(flags, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    invalidateModuleCache();

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
cudaGetDevice(int *device)
{
    cudaError_t err = cudaSuccess;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaGetDevice(0x%08llx)...", (unsigned long)device);;
    *device = Vdevid;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
cudaChooseDevice(int *device, const struct cudaDeviceProp *prop)
{
    cudaError_t err = cudaSuccess;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaChooseDevice(0x%08llx, 0x%08llx)...", (unsigned long)device, (unsigned long)prop);
                                                    ;
    *device = 0;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "Note : The current implementation always returns device 0.\n");;

    return err;
}

cudaError_t
cudaGetDeviceCount(int *count)
{
    cudaError_t err = cudaSuccess;

    initClient();
    *count = Nvdev;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaGetDeviceCount(0x%08llx)  count:%d ...", (unsigned long)count, *count);
                                 ;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}


cudaError_t
cudaDriverGetVersion (int *driverVersion)
{
    cudaError_t err = cudaSuccess;
    dscudaDriverGetVersionResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaDriverGetVersionCount(0x%08llx)...", (unsigned long)driverVersion);;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudadrivergetversionid_1(Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }

    *driverVersion = rp->ver;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
ibvCudaRuntimeGetVersion(int *runtimeVersion)
{
    cudaError_t err = cudaSuccess;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaRuntimeGetVersion(0x%08llx)...", (unsigned long)runtimeVersion);;
    Vdev_t *vdev = Vdev + Vdevid;
    for (int i = 0; i < vdev->nredundancy; i++) {
        IbvConnection *conn = (IbvConnection *)Cmid[Vdevid][i]->context;
        IbvRuntimeGetVersionInvokeHdr *spkt = (IbvRuntimeGetVersionInvokeHdr *)conn->rdma_local_region;
        IbvRuntimeGetVersionReturnHdr *rpkt = (IbvRuntimeGetVersionReturnHdr *)conn->rdma_remote_region;


        int spktsize = sizeof(IbvRuntimeGetVersionInvokeHdr);
        spkt->method = RCMethodRuntimeGetVersion;
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "spktsize:%d\n", spktsize);;
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "Vdevid:%d\n", Vdevid);;


        rpkt->method = RCMethodNone;
        wait_ready_to_rdma(conn);
        kickoff_rdma(conn, spktsize);
        while (!rpkt->method) {

        }


        err = rpkt->err;
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaRuntimeGetVersion err : %d\n", err);;
        *runtimeVersion = rpkt->version;
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
rpcCudaRuntimeGetVersion(int *runtimeVersion)
{
    cudaError_t err = cudaSuccess;
    dscudaRuntimeGetVersionResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaRuntimeGetVersion(0x%08llx)...", (unsigned long)runtimeVersion);;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudaruntimegetversionid_1(Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }

    *runtimeVersion = rp->ver;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
cudaSetDevice(int device)
{
    cudaError_t err = cudaSuccess;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaSetDevice(%d)...", device);;
    Vdevid = device;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
ibvCudaDeviceSynchronize(void)
{
    cudaError_t err = cudaSuccess;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaDeviceSynchronize()...");;
    Vdev_t *vdev = Vdev + Vdevid;
    for (int i = 0; i < vdev->nredundancy; i++) {
        IbvConnection *conn = (IbvConnection *)Cmid[Vdevid][i]->context;
        IbvDeviceSynchronizeInvokeHdr *spkt = (IbvDeviceSynchronizeInvokeHdr *)conn->rdma_local_region;
        IbvDeviceSynchronizeReturnHdr *rpkt = (IbvDeviceSynchronizeReturnHdr *)conn->rdma_remote_region;


        int spktsize = sizeof(IbvDeviceSynchronizeInvokeHdr);
        spkt->method = RCMethodDeviceSynchronize;
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "spktsize:%d\n", spktsize);;
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "Vdevid:%d\n", Vdevid);;


        rpkt->method = RCMethodNone;
        wait_ready_to_rdma(conn);
        kickoff_rdma(conn, spktsize);
        while (!rpkt->method) {

        }


        err = rpkt->err;
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaDeviceSynchronize err : %d\n", err);;
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
rpcCudaDeviceSynchronize(void)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaDeviceSynchronize()...");;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudadevicesynchronize_1(Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
ibvCudaDeviceReset(void)
{
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "a dummy call to cudaDeviceReset()\n");;
    return cudaSuccess;
}

cudaError_t
rpcCudaDeviceReset(void)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaDeviceReset()...");;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudadevicereset_1(Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}





cudaError_t
cudaFuncSetCacheConfig(const char * func, enum cudaFuncCache cacheConfig)
{
    cudaError_t err = cudaSuccess;
    if (1 <= dscudaWarnLevel()) fprintf(stderr, "Current implementation of cudaFuncSetCacheConfig() does nothing " "but returning cudaSuccess.\n");
                                        ;
    err = cudaSuccess;
    return err;
}

cudaError_t
dscudaFuncGetAttributesWrapper(int *moduleid, struct cudaFuncAttributes *attr, const char *func)
{
    cudaError_t err = cudaSuccess;
    dscudaFuncGetAttributesResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "dscudaFuncGetAttributesWrapper(%d, 0x%08llx, %s)...", moduleid, (unsigned long)attr, func);
                                             ;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudafuncgetattributesid_1(moduleid[i], (char*)func, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }

    attr->binaryVersion = rp->attr.binaryVersion;
    attr->constSizeBytes = rp->attr.constSizeBytes;
    attr->localSizeBytes = rp->attr.localSizeBytes;
    attr->maxThreadsPerBlock = rp->attr.maxThreadsPerBlock;
    attr->numRegs = rp->attr.numRegs;
    attr->ptxVersion = rp->attr.ptxVersion;
    attr->sharedSizeBytes = rp->attr.sharedSizeBytes;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "  attr->binaryVersion: %d\n", attr->binaryVersion);;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "  attr->constSizeBytes: %d\n", attr->constSizeBytes);;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "  attr->localSizeBytes: %d\n", attr->localSizeBytes);;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "  attr->maxThreadsPerBlock: %d\n", attr->maxThreadsPerBlock);;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "  attr->numRegs: %d\n", attr->numRegs);;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "  attr->ptxVersion: %d\n", attr->ptxVersion);;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "  attr->sharedSizeBytes: %d\n", attr->sharedSizeBytes);;

    return err;
}




cudaError_t
ibvCudaMalloc(void **devAdrPtr, size_t size)
{
    cudaError_t err = cudaSuccess;
    void *devadr;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMalloc(0x%08llx, %d)...", (unsigned long)devAdrPtr, size);;
    Vdev_t *vdev = Vdev + Vdevid;
    for (int i = 0; i < vdev->nredundancy; i++) {
        IbvConnection *conn = (IbvConnection *)Cmid[Vdevid][i]->context;
        IbvMallocInvokeHdr *spkt = (IbvMallocInvokeHdr *)conn->rdma_local_region;
        IbvMallocReturnHdr *rpkt = (IbvMallocReturnHdr *)conn->rdma_remote_region;


        int spktsize = sizeof(IbvMallocInvokeHdr);
        spkt->method = RCMethodMalloc;
        spkt->size = size;
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "spktsize:%d  size:%d\n", spktsize, size);;


        rpkt->method = RCMethodNone;
        wait_ready_to_rdma(conn);
        kickoff_rdma(conn, spktsize);
        while (!rpkt->method) {

        }


        err = rpkt->err;
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMalloc err : %d\n", err);;

        if (i == 0) {
            devadr = (void*)rpkt->devAdr;
        }
        else if (devadr != (void*)rpkt->devAdr) {
            if (0 <= dscudaWarnLevel()) fprintf(stderr, "cudaMalloc() on device%d allocated memory address 0x%lx " "different from that of device0, 0x%lx.\n", i, (void*)rpkt->devAdr, devadr);
                                                                                            ;
            exit(1);
        }
    }
    *devAdrPtr = devadr;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done. *devAdrPtr:0x%08llx\n", *devAdrPtr);;


    return err;
}

cudaError_t
rpcCudaMalloc(void **devAdrPtr, size_t size)
{
    cudaError_t err = cudaSuccess;
    dscudaMallocResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMalloc(0x%08llx, %d)...", (unsigned long)devAdrPtr, size);;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudamallocid_1(size, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }

    *devAdrPtr = (void*)rp->devAdr;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done. *devAdrPtr:0x%08llx\n", *devAdrPtr);;

    return err;
}


cudaError_t
ibvCudaFree(void *mem)
{
    cudaError_t err = cudaSuccess;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaFree(0x%08llx)...", (unsigned long)mem);;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        IbvConnection *conn = (IbvConnection *)Cmid[Vdevid][i]->context;
        IbvFreeInvokeHdr *spkt = (IbvFreeInvokeHdr *)conn->rdma_local_region;
        IbvFreeReturnHdr *rpkt = (IbvFreeReturnHdr *)conn->rdma_remote_region;


        int spktsize = sizeof(IbvFreeInvokeHdr);
        spkt->method = RCMethodFree;
        spkt->devAdr = (RCadr)mem;
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "spktsize:%d\n", spktsize);;


        rpkt->method = RCMethodNone;
        wait_ready_to_rdma(conn);
        kickoff_rdma(conn, spktsize);
        while (!rpkt->method) {

        }


        err = rpkt->err;
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaFree err : %d\n", err);;
    }

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    return err;
}

cudaError_t
rpcCudaFree(void *mem)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaFree(0x%08llx)...", (unsigned long)mem);;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudafreeid_1((RCadr)mem, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    return err;
}

cudaError_t
ibvCudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
{
    cudaError_t err = cudaSuccess;
    Vdev_t *vdev;

    initClient();

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemcpy(0x%08lx, 0x%08lx, %d, %s)...", (unsigned long)dst, (unsigned long)src, count, dscudaMemcpyKindName(kind));
                                                                                      ;

    if ((1024 * 1024 * 12) < count) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "count (=%d) exceeds RDMA_BUFFER_SIZE (=%d).\n", count, (1024 * 1024 * 12));
                                     ;
        exit(1);
    }


    switch (kind) {
      case cudaMemcpyDeviceToHost:
        vdev = Vdev + Vdevid;
        for (int i = 0; i < vdev->nredundancy; i++) {
            IbvConnection *conn = (IbvConnection *)Cmid[Vdevid][i]->context;
            IbvMemcpyD2HInvokeHdr *spkt = (IbvMemcpyD2HInvokeHdr *)conn->rdma_local_region;
            IbvMemcpyD2HReturnHdr *rpkt = (IbvMemcpyD2HReturnHdr *)conn->rdma_remote_region;


            int spktsize = sizeof(IbvMemcpyD2HInvokeHdr);
            spkt->method = RCMethodMemcpyD2H;
            spkt->count = count;
            spkt->srcadr = (RCadr)src;
            if (3 <= dscudaWarnLevel()) fprintf(stderr, "spktsize:%d  count:%d\n", spktsize, count);;


            rpkt->method = RCMethodNone;
            wait_ready_to_rdma(conn);
            kickoff_rdma(conn, spktsize);
            while (!rpkt->method) {

            }


            err = rpkt->err;
            if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemcpy D2H err : %d\n", err);;

            if (i == 0) {
                memcpy(dst, &rpkt->dstbuf, count);
            }
            else if (bcmp(dst, &rpkt->dstbuf, count) != 0) {
                if (errorHandler) {
                    errorHandler(errorHandlerArg);
                }
            }
            else {
                if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemcpy() data copied from device%d matched with that from device0.\n", i);;
            }
        }
        break;
      case cudaMemcpyHostToDevice:
        vdev = Vdev + Vdevid;
        for (int i = 0; i < vdev->nredundancy; i++) {
            IbvConnection *conn = (IbvConnection *)Cmid[Vdevid][i]->context;
            IbvMemcpyH2DInvokeHdr *spkt = (IbvMemcpyH2DInvokeHdr *)conn->rdma_local_region;
            IbvMemcpyH2DReturnHdr *rpkt = (IbvMemcpyH2DReturnHdr *)conn->rdma_remote_region;


            int spktsize = sizeof(IbvMemcpyH2DInvokeHdr) + count;
            spkt->method = RCMethodMemcpyH2D;
            spkt->count = count;
            spkt->dstadr = (RCadr)dst;
            memcpy(&spkt->srcbuf, src, count);
            if (3 <= dscudaWarnLevel()) fprintf(stderr, "spktsize:%d  count:%d\n", spktsize, count);;


            rpkt->method = RCMethodNone;
            wait_ready_to_rdma(conn);
            kickoff_rdma(conn, spktsize);
            while (!rpkt->method) {

            }


            err = rpkt->err;
            if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemcpy H2D err : %d\n", err);;
        }
        break;
      case cudaMemcpyDeviceToDevice:
        vdev = Vdev + Vdevid;
        for (int i = 0; i < vdev->nredundancy; i++) {
            if (0 <= dscudaWarnLevel()) fprintf(stderr, "Unsupported value for cudaMemcpyKind : %s\n", dscudaMemcpyKindName(kind));;
            exit(1);
        }
        break;
      default:
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "Unsupported value for cudaMemcpyKind : %s\n", dscudaMemcpyKindName(kind));;
        exit(1);
    }

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
rpcCudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
{
    cudaError_t err = cudaSuccess;
    dscudaMemcpyD2HResult *d2hrp;
    dscudaResult *h2drp, *d2drp;
    RCbuf srcbuf;
    Vdev_t *vdev;
    RCServer_t *sp;

    initClient();

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemcpy(0x%08lx, 0x%08lx, %d, %s)...", (unsigned long)dst, (unsigned long)src, count, dscudaMemcpyKindName(kind));
                                                                                      ;

    switch (kind) {
      case cudaMemcpyDeviceToHost:
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            d2hrp = dscudamemcpyd2hid_1((RCadr)src, count, Clnt[Vdevid][sp->id]);
            checkResult(d2hrp, sp);
            err = (cudaError_t)d2hrp->err;
            if (d2hrp->err != cudaSuccess) {
                err = (cudaError_t)d2hrp->err;
            }
            if (i == 0) {
                memcpy(dst, d2hrp->buf.RCbuf_val, d2hrp->buf.RCbuf_len);
            }
            else if (bcmp(dst, d2hrp->buf.RCbuf_val, d2hrp->buf.RCbuf_len) != 0) {
                if (errorHandler) {
                    errorHandler(errorHandlerArg);
                }
            }
            else {
                if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemcpy() data copied from device%d matched with that from device0.\n", i);;
            }
        }
        break;
      case cudaMemcpyHostToDevice:
        srcbuf.RCbuf_len = count;
        srcbuf.RCbuf_val = (char *)src;
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            h2drp = dscudamemcpyh2did_1((RCadr)dst, srcbuf, count, Clnt[Vdevid][sp->id]);
            checkResult(h2drp, sp);
            if (h2drp->err != cudaSuccess) {
                err = (cudaError_t)h2drp->err;
            }
        }
        break;
      case cudaMemcpyDeviceToDevice:
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            d2drp = dscudamemcpyd2did_1((RCadr)dst, (RCadr)src, count, Clnt[Vdevid][sp->id]);
            checkResult(d2drp, sp);
            if (d2drp->err != cudaSuccess) {
                err = (cudaError_t)d2drp->err;
            }
        }
        break;
      default:
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "Unsupported value for cudaMemcpyKind : %s\n", dscudaMemcpyKindName(kind));;
        exit(1);
    }

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
ibvCudaGetDeviceProperties(struct cudaDeviceProp *prop, int device)
{
    cudaError_t err = cudaSuccess;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaGetDeviceProperties(0x%08lx, %d)...", (unsigned long)prop, device);;



    for (int i = 0; i < 1; i++) {
        IbvConnection *conn = (IbvConnection *)Cmid[device][i]->context;
        IbvGetDevicePropertiesInvokeHdr *spkt = (IbvGetDevicePropertiesInvokeHdr *)conn->rdma_local_region;
        IbvGetDevicePropertiesReturnHdr *rpkt = (IbvGetDevicePropertiesReturnHdr *)conn->rdma_remote_region;


        int spktsize = sizeof(IbvGetDevicePropertiesInvokeHdr);
        spkt->method = RCMethodGetDeviceProperties;
        spkt->device = device;
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "spktsize:%d  device:%d\n", spktsize, device);;


        rpkt->method = RCMethodNone;
        wait_ready_to_rdma(conn);
        kickoff_rdma(conn, spktsize);
        while (!rpkt->method) {

        }


        err = rpkt->err;
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaGetDeviceProperties err : %d\n", err);;
        memcpy(prop, &rpkt->prop, sizeof(cudaDeviceProp));
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
rpcCudaGetDeviceProperties(struct cudaDeviceProp *prop, int device)
{
    cudaError_t err = cudaSuccess;
    dscudaGetDevicePropertiesResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaGetDeviceProperties(0x%08lx, %d)...", (unsigned long)prop, device);;
    Vdev_t *vdev = Vdev + device;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudagetdevicepropertiesid_1(device, Clnt[device][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    memcpy(prop, rp->prop.RCbuf_val, rp->prop.RCbuf_len);
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

static int
ibvDscudaLoadModule(unsigned int ipaddr, pid_t pid, char *modulename, char *modulebuf, int vdevid, int raidid)
{
    cudaError_t err = cudaSuccess;
    IbvConnection *conn = (IbvConnection *)Cmid[vdevid][raidid]->context;
    IbvDscudaLoadModuleInvokeHdr *spkt = (IbvDscudaLoadModuleInvokeHdr *)conn->rdma_local_region;
    IbvDscudaLoadModuleReturnHdr *rpkt = (IbvDscudaLoadModuleReturnHdr *)conn->rdma_remote_region;
    int moduleid;
    int namelen = strlen(modulename);
    int imagelen = strlen(modulebuf);

    if (64 <= namelen) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "ibvDscudaLoadModule:modulename too long (%d byte).\n", namelen);;
        exit(1);
    }
    if ((1024*1024) <= imagelen) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "ibvDscudaLoadModule:modulebuf too long (%d byte).\n", imagelen);;
        exit(1);
    }


    int spktsize = sizeof(IbvDscudaLoadModuleInvokeHdr) + imagelen + 1;
    spkt->method = RCMethodDscudaLoadModule;
    spkt->ipaddr = ipaddr;
    spkt->pid = pid;
    strncpy(spkt->modulename, modulename, 64);
    strncpy((char *)&spkt->moduleimage, modulebuf, (1024*1024));
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "spktsize:%d\n", spktsize);;


    rpkt->method = RCMethodNone;
    wait_ready_to_rdma(conn);
    kickoff_rdma(conn, spktsize);
    while (!rpkt->method) {

    }


    err = rpkt->err;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "ibvDscudaLoadModule err : %d\n", err);;
    moduleid = rpkt->moduleid;

    return moduleid;
}






static void
ibvDscudaLaunchKernel(int moduleid, int kid, char *kname,
                     int *gdim, int *bdim, RCsize smemsize, RCstream stream,
                     int narg, IbvArg *arg, int vdevid, int raidid)
{
    cudaError_t err = cudaSuccess;
    IbvConnection *conn = (IbvConnection *)Cmid[vdevid][raidid]->context;
    IbvDscudaLaunchKernelInvokeHdr *spkt = (IbvDscudaLaunchKernelInvokeHdr *)conn->rdma_local_region;
    IbvDscudaLaunchKernelReturnHdr *rpkt = (IbvDscudaLaunchKernelReturnHdr *)conn->rdma_remote_region;
    int k;


    int spktsize = sizeof(IbvDscudaLaunchKernelInvokeHdr) + sizeof(IbvArg) * narg;
    spkt->method = RCMethodDscudaLaunchKernel;
    spkt->moduleid = moduleid;
    spkt->kernelid = kid;
    strncpy(spkt->kernelname, kname, 64);
    for (k = 0; k < 3; k++) {
        spkt->gdim[k] = gdim[k];
        spkt->bdim[k] = bdim[k];
    }
    spkt->smemsize = smemsize;
    spkt->stream = stream;
    spkt->narg = narg;
    memcpy((char *)&spkt->args, arg, sizeof(IbvArg) * narg);
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "spktsize:%d\n", spktsize);;


    rpkt->method = RCMethodNone;
    wait_ready_to_rdma(conn);
    kickoff_rdma(conn, spktsize);
    while (!rpkt->method) {

    }


    err = rpkt->err;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "ibvDscudaLaunchKernel err : %d\n", err);;
}

void
ibvDscudaLaunchKernelWrapper(int *moduleid, int kid, char *kname,
                            int *gdim, int *bdim, RCsize smemsize, RCstream stream,
                            int narg, IbvArg *arg)
{
    RCmappedMem *mem;
    RCstreamArray *st;

    st = RCstreamArrayQuery((cudaStream_t)stream);
    if (!st) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid stream : 0x%08llx\n", stream);;
        exit(1);
    }

    mem = RCmappedMemListTop;
    while (mem) {
        cudaMemcpy(mem->pDevice, mem->pHost, mem->size, cudaMemcpyHostToDevice);
        mem = mem->next;
    }

    Vdev_t *vdev = Vdev + Vdevid;
    for (int i = 0; i < vdev->nredundancy; i++) {
        ibvDscudaLaunchKernel(moduleid[i], kid, kname,
                             gdim, bdim, smemsize, (RCstream)st->s[i],
                             narg, arg, Vdevid, i);
    }

    mem = RCmappedMemListTop;
    while (mem) {
        cudaMemcpy(mem->pHost, mem->pDevice, mem->size, cudaMemcpyDeviceToHost);
        mem = mem->next;
    }
}





void
dscudaLaunchKernelWrapper(int *moduleid, int kid, char *kname,
                         RCdim3 gdim, RCdim3 bdim, RCsize smemsize, RCstream stream,
                         RCargs args)
{
    RCmappedMem *mem;
    RCstreamArray *st;

    st = RCstreamArrayQuery((cudaStream_t)stream);
    if (!st) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid stream : 0x%08llx\n", stream);;
        exit(1);
    }

    mem = RCmappedMemListTop;
    while (mem) {
        cudaMemcpy(mem->pDevice, mem->pHost, mem->size, cudaMemcpyHostToDevice);
        mem = mem->next;
    }

    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        void *rp = dscudalaunchkernelid_1(moduleid[i], kid, kname,
                                         gdim, bdim, smemsize, (RCstream)st->s[i],
                                         args, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
    }

    mem = RCmappedMemListTop;
    while (mem) {
        cudaMemcpy(mem->pHost, mem->pDevice, mem->size, cudaMemcpyDeviceToHost);
        mem = mem->next;
    }
}







static void
RCcuarrayArrayRegister(cudaArray **cuarrays)
{
    RCcuarrayArray *ca = (RCcuarrayArray *)malloc(sizeof(RCcuarrayArray));
    if (!ca) {
        perror("RCcuarrayArrayRegister");
    }
    for (int i = 0; i < 4; i++) {
        ca->ap[i] = cuarrays[i];
    }
    ca->prev = RCcuarrayArrayListTail;
    ca->next = ((void *)0);
    if (!RCcuarrayArrayListTop) {
        RCcuarrayArrayListTop = ca;
    }
    else {
        RCcuarrayArrayListTail->next = ca;
    }
    RCcuarrayArrayListTail = ca;
}

static void
RCcuarrayArrayUnregister(cudaArray *cuarray0)
{
    RCcuarrayArray *ca = RCcuarrayArrayQuery(cuarray0);
    if (!ca) return;

    if (ca->prev) {
        ca->prev->next = ca->next;
    }
    else {
        RCcuarrayArrayListTop = ca->next;
        if (ca->next) {
            ca->next->prev = ((void *)0);
        }
    }
    if (!ca->next) {
        RCcuarrayArrayListTail = ca->prev;
    }
    free(ca);
}

static RCcuarrayArray *
RCcuarrayArrayQuery(cudaArray *cuarray0)
{
    RCcuarrayArray *ca = RCcuarrayArrayListTop;
    while (ca) {
        if (ca->ap[0] == cuarray0) {
            return ca;
        }
        ca = ca->next;
    }
    return ((void *)0);
}

cudaError_t
cudaMallocArray(struct cudaArray **array, const struct cudaChannelFormatDesc *desc,
                size_t width, size_t height, unsigned int flags)
{
    cudaError_t err = cudaSuccess;
    dscudaMallocArrayResult *rp;
    RCchanneldesc descbuf;
    cudaArray *ca[4];

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMallocArray(0x%08llx, 0x%08llx, %d, %d, 0x%08x)...", (unsigned long)array, desc, width, height, flags);
                                                          ;


    descbuf.x = desc->x;
    descbuf.y = desc->y;
    descbuf.z = desc->z;
    descbuf.w = desc->w;
    descbuf.f = desc->f;

    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudamallocarrayid_1(descbuf, width, height, flags, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
        ca[i] = (cudaArray *)rp->array;
    }

    *array = ca[0];
    RCcuarrayArrayRegister(ca);
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done. *array:0x%08llx\n", *array);;

    return err;
}

cudaError_t
cudaFreeArray(struct cudaArray *array)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;
    RCcuarrayArray *ca;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaFreeArray(0x%08llx)...", (unsigned long)array);;
    ca = RCcuarrayArrayQuery(array);
    if (!ca) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid cudaArray : 0x%08llx\n", array);;
        exit(1);
    }
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudafreearrayid_1((RCadr)ca->ap[i], Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    RCcuarrayArrayUnregister(ca->ap[0]);
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    return err;
}

cudaError_t
cudaMemcpyToArray(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src,
                  size_t count, enum cudaMemcpyKind kind)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *h2drp, *d2drp;
    RCbuf srcbuf;
    RCcuarrayArray *ca;
    Vdev_t *vdev;
    RCServer_t *sp;

    initClient();

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemcpyToArray(0x%08llx, %d, %d, 0x%08llx, %d, %s)...", (unsigned long)dst, wOffset, hOffset, (unsigned long)src, count, dscudaMemcpyKindName(kind));
                                                                                                     ;
    ca = RCcuarrayArrayQuery(dst);
    if (!ca) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid cudaArray : 0x%08llx\n", dst);;
        exit(1);
    }
    switch (kind) {
      case cudaMemcpyHostToDevice:
        srcbuf.RCbuf_len = count;
        srcbuf.RCbuf_val = (char *)src;

        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            h2drp = dscudamemcpytoarrayh2did_1((RCadr)ca->ap[i], wOffset, hOffset, srcbuf, count, Clnt[Vdevid][sp->id]);
            checkResult(h2drp, sp);
            if (h2drp->err != cudaSuccess) {
                err = (cudaError_t)h2drp->err;
            }
        }
        break;
      case cudaMemcpyDeviceToDevice:
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            d2drp = dscudamemcpytoarrayd2did_1((RCadr)ca->ap[i], wOffset, hOffset, (RCadr)src, count, Clnt[Vdevid][sp->id]);
            checkResult(d2drp, sp);
            if (d2drp->err != cudaSuccess) {
                err = (cudaError_t)d2drp->err;
            }
        }
        break;
      default:
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "Unsupported value for cudaMemcpyKind : %s\n", dscudaMemcpyKindName(kind));;
        exit(1);
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
dscudaMemcpyToSymbolWrapper(int *moduleid, const char *symbol, const void *src,
                           size_t count, size_t offset, enum cudaMemcpyKind kind)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;
    RCbuf srcbuf;
    RCServer_t *sp;
    Vdev_t *vdev;

    initClient();

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "dscudaMemcpyToSymbolWrapper(%d, 0x%08llx, 0x%08llx, %d, %d, %s)" "symbol:%s  ...", moduleid, (unsigned long)symbol, (unsigned long)src, count, offset, dscudaMemcpyKindName(kind), symbol);


                                                           ;

    switch (kind) {
      case cudaMemcpyHostToDevice:
        srcbuf.RCbuf_len = count;
        srcbuf.RCbuf_val = (char *)src;
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            rp = dscudamemcpytosymbolh2did_1(moduleid[i], (char *)symbol, srcbuf, count, offset, Clnt[Vdevid][sp->id]);
            checkResult(rp, sp);
            if (rp->err != cudaSuccess) {
                err = (cudaError_t)rp->err;
            }
        }
        break;
      case cudaMemcpyDeviceToDevice:
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            rp = dscudamemcpytosymbold2did_1(moduleid[i], (char *)symbol, (RCadr)src, count, offset, Clnt[Vdevid][sp->id]);
            checkResult(rp, sp);
            if (rp->err != cudaSuccess) {
                err = (cudaError_t)rp->err;
            }
        }
        break;
      default:
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "Unsupported value for cudaMemcpyKind : %s\n", dscudaMemcpyKindName(kind));;
        exit(1);
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
dscudaMemcpyFromSymbolWrapper(int *moduleid, void *dst, const char *symbol,
                             size_t count, size_t offset,
                             enum cudaMemcpyKind kind)
{
    cudaError_t err = cudaSuccess;
    dscudaMemcpyFromSymbolD2HResult *d2hrp;
    dscudaResult *d2drp;
    Vdev_t *vdev;
    RCServer_t *sp;

    initClient();

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "dscudaMemcpyFromSymbolWrapper(0x%08llx, 0x%08llx, 0x%08llx, %d, %d, %s)" "symbol:%s  ...", moduleid, (unsigned long)dst, (unsigned long)symbol, count, offset, dscudaMemcpyKindName(kind), symbol);


                                                           ;

    switch (kind) {
      case cudaMemcpyDeviceToDevice:
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            d2drp = dscudamemcpyfromsymbold2did_1(moduleid[i], (RCadr)dst, (char *)symbol, count, offset, Clnt[Vdevid][sp->id]);
            checkResult(d2drp, sp);
            if (d2drp->err != cudaSuccess) {
                err = (cudaError_t)d2drp->err;
            }
        }
        break;
      case cudaMemcpyDeviceToHost:
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            d2hrp = dscudamemcpyfromsymbold2hid_1(moduleid[i], (char *)symbol, count, offset, Clnt[Vdevid][sp->id]);
            checkResult(d2hrp, sp);
            if (d2hrp->err != cudaSuccess) {
                err = (cudaError_t)d2hrp->err;
            }
            if (i == 0) {
                memcpy(dst, d2hrp->buf.RCbuf_val, d2hrp->buf.RCbuf_len);
            }
            else if (bcmp(dst, d2hrp->buf.RCbuf_val, d2hrp->buf.RCbuf_len) != 0) {
                if (errorHandler) {
                    errorHandler(errorHandlerArg);
                }
            }
            else {
                if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemcpyFromSymbol() data copied from device%d matched with that from device0.\n", i);;
            }
        }
        break;
      default:
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "Unsupported value for cudaMemcpyKind : %s\n", dscudaMemcpyKindName(kind));;
        exit(1);
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}


static cudaError_t
ibvDscudaMemcpyToSymbolAsyncH2D(int moduleid, char *symbol, const void *src,
                               size_t count, size_t offset, RCstream stream, int vdevid, int raidid)
{
    cudaError_t err = cudaSuccess;
    IbvConnection *conn = (IbvConnection *)Cmid[vdevid][raidid]->context;
    IbvDscudaMemcpyToSymbolAsyncH2DInvokeHdr *spkt = (IbvDscudaMemcpyToSymbolAsyncH2DInvokeHdr *)conn->rdma_local_region;
    IbvDscudaMemcpyToSymbolAsyncH2DReturnHdr *rpkt = (IbvDscudaMemcpyToSymbolAsyncH2DReturnHdr *)conn->rdma_remote_region;

    int snamelen = strlen(symbol);
    if (64 <= snamelen) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "ibvDscudaMemcpyToSymbolAsyncH2D:symbol name too long (%d byte).\n", snamelen);;
        exit(1);
    }


    int spktsize = sizeof(IbvDscudaMemcpyToSymbolAsyncH2DInvokeHdr) + count;
    spkt->method = RCMethodDscudaMemcpyToSymbolAsyncH2D;
    spkt->moduleid = moduleid;
    strncpy(spkt->symbol, symbol, 64);
    memcpy((char *)&spkt->src, src, count);
    spkt->count = count;
    spkt->offset = offset;
    spkt->stream = stream;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "spktsize:%d\n", spktsize);;


    rpkt->method = RCMethodNone;
    wait_ready_to_rdma(conn);
    kickoff_rdma(conn, spktsize);
    while (!rpkt->method) {

    }


    err = rpkt->err;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "ibvDscudaMemcpyToSymbolAsyncH2D err : %d\n", err);;
    return err;
}

static cudaError_t
ibvDscudaMemcpyToSymbolAsyncD2D(int moduleid, char *symbol, const void *src,
                               size_t count, size_t offset, RCstream stream, int vdevid, int raidid)
{
    cudaError_t err = cudaSuccess;
    IbvConnection *conn = (IbvConnection *)Cmid[vdevid][raidid]->context;
    IbvDscudaMemcpyToSymbolAsyncD2DInvokeHdr *spkt = (IbvDscudaMemcpyToSymbolAsyncD2DInvokeHdr *)conn->rdma_local_region;
    IbvDscudaMemcpyToSymbolAsyncD2DReturnHdr *rpkt = (IbvDscudaMemcpyToSymbolAsyncD2DReturnHdr *)conn->rdma_remote_region;

    int snamelen = strlen(symbol);
    if (64 <= snamelen) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "ibvDscudaMemcpyToSymbolAsyncD2D:symbol name too long (%d byte).\n", snamelen);;
        exit(1);
    }


    int spktsize = sizeof(IbvDscudaMemcpyToSymbolAsyncD2DInvokeHdr);
    spkt->method = RCMethodDscudaMemcpyToSymbolAsyncD2D;
    spkt->moduleid = moduleid;
    strncpy(spkt->symbol, symbol, 64);
    spkt->srcadr = (RCadr)src;
    spkt->count = count;
    spkt->offset = offset;
    spkt->stream = stream;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "spktsize:%d\n", spktsize);;


    rpkt->method = RCMethodNone;
    wait_ready_to_rdma(conn);
    kickoff_rdma(conn, spktsize);
    while (!rpkt->method) {

    }


    err = rpkt->err;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "ibvDscudaMemcpyToSymbolAsyncD2D err : %d\n", err);;
    return err;
}

cudaError_t
dscudaMemcpyToSymbolAsyncWrapper(int *moduleid, const char *symbol, const void *src,
    size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;
    RCbuf srcbuf;
    RCServer_t *sp;
    Vdev_t *vdev;
    RCstreamArray *st;

    initClient();

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "sym:%s\n", symbol);;

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "dscudaMemcpyToSymbolAsyncWrapper(%d, 0x%08lx, 0x%08lx, %d, %d, %s, 0x%08lx) " "symbol:%s  ...", moduleid, (unsigned long)symbol, (unsigned long)src, count, offset, dscudaMemcpyKindName(kind), (unsigned long)stream, symbol);


                                                                                  ;
    st = RCstreamArrayQuery(stream);
    if (!st) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid stream : 0x%08llx\n", stream);;
        exit(1);
    }
    switch (kind) {
      case cudaMemcpyHostToDevice:
        srcbuf.RCbuf_len = count;
        srcbuf.RCbuf_val = (char *)src;
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            if (UseIbv) {
                err = ibvDscudaMemcpyToSymbolAsyncH2D(moduleid[i], (char *)symbol, src, count, offset, (RCstream)st->s[i],
                                                     Vdevid, i);
            }
            else {
                rp = dscudamemcpytosymbolasynch2did_1(moduleid[i], (char *)symbol, srcbuf, count, offset, (RCstream)st->s[i],
                                                     Clnt[Vdevid][sp->id]);
                checkResult(rp, sp);
                err = (cudaError_t)rp->err;
            }
        }
        break;
      case cudaMemcpyDeviceToDevice:
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            if (UseIbv) {
                err = ibvDscudaMemcpyToSymbolAsyncD2D(moduleid[i], (char *)symbol, src, count, offset, (RCstream)st->s[i],
                                                     Vdevid, i);
            }
            else {
                rp = dscudamemcpytosymbolasyncd2did_1(moduleid[i], (char *)symbol, (RCadr)src, count, offset, (RCstream)st->s[i],
                                                     Clnt[Vdevid][sp->id]);
                checkResult(rp, sp);
                err = (cudaError_t)rp->err;
            }
        }
        break;
      default:
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "Unsupported value for cudaMemcpyKind : %s\n", dscudaMemcpyKindName(kind));;
        exit(1);
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}


static cudaError_t
ibvDscudaMemcpyFromSymbolAsyncD2H(int moduleid, void *dstbuf, char *symbol,
                               size_t count, size_t offset, RCstream stream, int vdevid, int raidid)
{
    cudaError_t err = cudaSuccess;
    IbvConnection *conn = (IbvConnection *)Cmid[vdevid][raidid]->context;
    IbvDscudaMemcpyFromSymbolAsyncD2HInvokeHdr *spkt = (IbvDscudaMemcpyFromSymbolAsyncD2HInvokeHdr *)conn->rdma_local_region;
    IbvDscudaMemcpyFromSymbolAsyncD2HReturnHdr *rpkt = (IbvDscudaMemcpyFromSymbolAsyncD2HReturnHdr *)conn->rdma_remote_region;

    int snamelen = strlen(symbol);
    if (64 <= snamelen) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "ibvDscudaMemcpyFromSymbolAsyncD2H:symbol name too long (%d byte).\n", snamelen);;
        exit(1);
    }


    int spktsize = sizeof(IbvDscudaMemcpyFromSymbolAsyncD2HInvokeHdr);
    spkt->method = RCMethodDscudaMemcpyFromSymbolAsyncD2H;
    spkt->moduleid = moduleid;
    strncpy(spkt->symbol, symbol, 64);
    spkt->count = count;
    spkt->offset = offset;
    spkt->stream = stream;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "spktsize:%d\n", spktsize);;


    rpkt->method = RCMethodNone;
    wait_ready_to_rdma(conn);
    kickoff_rdma(conn, spktsize);
    while (!rpkt->method) {

    }


    err = rpkt->err;
    memcpy(dstbuf, (char *)&rpkt->dst, count);

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "ibvDscudaMemcpyFromSymbolAsyncD2H err : %d\n", err);;
    return err;
}

static cudaError_t
ibvDscudaMemcpyFromSymbolAsyncD2D(int moduleid, void *dstadr, char *symbol,
                               size_t count, size_t offset, RCstream stream, int vdevid, int raidid)
{
    cudaError_t err = cudaSuccess;
    IbvConnection *conn = (IbvConnection *)Cmid[vdevid][raidid]->context;
    IbvDscudaMemcpyFromSymbolAsyncD2DInvokeHdr *spkt = (IbvDscudaMemcpyFromSymbolAsyncD2DInvokeHdr *)conn->rdma_local_region;
    IbvDscudaMemcpyFromSymbolAsyncD2DReturnHdr *rpkt = (IbvDscudaMemcpyFromSymbolAsyncD2DReturnHdr *)conn->rdma_remote_region;

    int snamelen = strlen(symbol);
    if (64 <= snamelen) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "ibvDscudaMemcpyFromSymbolAsyncD2D:symbol name too long (%d byte).\n", snamelen);;
        exit(1);
    }


    int spktsize = sizeof(IbvDscudaMemcpyFromSymbolAsyncD2DInvokeHdr);
    spkt->method = RCMethodDscudaMemcpyFromSymbolAsyncD2D;
    spkt->moduleid = moduleid;
    spkt->dstadr = (RCadr)dstadr;
    strncpy(spkt->symbol, symbol, 64);
    spkt->count = count;
    spkt->offset = offset;
    spkt->stream = stream;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "spktsize:%d\n", spktsize);;


    rpkt->method = RCMethodNone;
    wait_ready_to_rdma(conn);
    kickoff_rdma(conn, spktsize);
    while (!rpkt->method) {

    }


    err = rpkt->err;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "ibvDscudaMemcpyFromSymbolAsyncD2D err : %d\n", err);;
    return err;
}

cudaError_t
dscudaMemcpyFromSymbolAsyncWrapper(int *moduleid, void *dst, const char *symbol,
      size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream)
{
    cudaError_t err = cudaSuccess;
    dscudaMemcpyFromSymbolAsyncD2HResult *d2hrp;
    dscudaResult *d2drp;
    Vdev_t *vdev;
    RCServer_t *sp;
    RCstreamArray *st;

    initClient();

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "dscudaMemcpyFromSymbolAsyncWrapper(%d, 0x%08lx, 0x%08lx, %d, %d, %s, 0x%08lx)" " symbol:%s  ...", moduleid, (unsigned long)dst, (unsigned long)symbol, count, offset, dscudaMemcpyKindName(kind), (unsigned long)stream, symbol);


                                                                                  ;
    st = RCstreamArrayQuery(stream);
    if (!st) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid stream : 0x%08llx\n", stream);;
        exit(1);
    }
    switch (kind) {
      case cudaMemcpyDeviceToDevice:
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            if (UseIbv) {
                err = ibvDscudaMemcpyFromSymbolAsyncD2D(moduleid[i], dst, (char *)symbol, count, offset, (RCstream)st->s[i],
                                                       Vdevid, i);
            }
            else {
                d2drp = dscudamemcpyfromsymbolasyncd2did_1(moduleid[i], (RCadr)dst, (char *)symbol, count, offset,
                                                          (RCstream)st->s[i], Clnt[Vdevid][sp->id]);
                checkResult(d2drp, sp);
                err = (cudaError_t)d2drp->err;
            }
        }
        break;
      case cudaMemcpyDeviceToHost:
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            void *dstbuf;
            if (UseIbv) {
                dstbuf = calloc(1, count);
                if (!dstbuf) {
                    if (0 <= dscudaWarnLevel()) fprintf(stderr, "dscudaMemcpyFromSymbolAsyncWrapper:calloc() failed.\n");;
                    exit(1);
                }
                err = ibvDscudaMemcpyFromSymbolAsyncD2H(moduleid[i], dstbuf, (char *)symbol, count, offset, (RCstream)st->s[i],
                                                       Vdevid, i);
            }
            else {
                d2hrp = dscudamemcpyfromsymbolasyncd2hid_1(moduleid[i], (char *)symbol, count, offset,
                                                          (RCstream)st->s[i], Clnt[Vdevid][sp->id]);
                checkResult(d2hrp, sp);
                err = (cudaError_t)d2hrp->err;
                dstbuf = d2hrp->buf.RCbuf_val;
            }
            if (i == 0) {
                memcpy(dst, dstbuf, count);
            }
            else if (bcmp(dst, dstbuf, count) != 0) {
                if (errorHandler) {
                    errorHandler(errorHandlerArg);
                }
            }
            else {
                if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemcpyFromSymbol() data copied from device%d matched with that from device0.\n", i);;
            }
        }
        break;
      default:
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "Unsupported value for cudaMemcpyKind : %s\n", dscudaMemcpyKindName(kind));;
        exit(1);
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}


cudaError_t
cudaMemset(void *devPtr, int value, size_t count)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemset()...");;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudamemsetid_1((RCadr)devPtr, value, count, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height)
{
    cudaError_t err = cudaSuccess;
    dscudaMallocPitchResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMallocPitch(0x%08llx, 0x%08llx, %d, %d)...", (unsigned long)devPtr, pitch, width, height);
                                                     ;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudamallocpitchid_1(width, height, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }

    *devPtr = (void*)rp->devPtr;
    *pitch = rp->pitch;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done. *devPtr:0x%08llx  *pitch:%d\n", *devPtr, *pitch);;

    return err;
}

cudaError_t
cudaMemcpy2DToArray(struct cudaArray *dst, size_t wOffset, size_t hOffset,
                    const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind)
{
    cudaError_t err = cudaSuccess;
    dscudaMemcpy2DToArrayD2HResult *d2hrp;
    dscudaResult *h2drp, *d2drp;
    RCbuf srcbuf;
    RCcuarrayArray *ca;
    Vdev_t *vdev;
    RCServer_t *sp;

    initClient();

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemcpy2DToArray(0x%08llx, %d, %d, 0x%08llx, %d, %d, %d, %s)...", (unsigned long)dst, wOffset, hOffset, (unsigned long)src, spitch, width, height, dscudaMemcpyKindName(kind));

                                                                               ;
    ca = RCcuarrayArrayQuery(dst);
    if (!ca) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid cudaArray : 0x%08llx\n", dst);;
        exit(1);
    }
    switch (kind) {
      case cudaMemcpyDeviceToHost:
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            d2hrp = dscudamemcpy2dtoarrayd2hid_1(wOffset, hOffset,
                                                (RCadr)src, spitch, width, height, Clnt[Vdevid][sp->id]);
            checkResult(d2hrp, sp);
            if (d2hrp->err != cudaSuccess) {
                err = (cudaError_t)d2hrp->err;
            }
            if (i == 0) {
                memcpy(dst, d2hrp->buf.RCbuf_val, d2hrp->buf.RCbuf_len);
            }
            else if (bcmp(dst, d2hrp->buf.RCbuf_val, d2hrp->buf.RCbuf_len) != 0) {
                if (errorHandler) {
                    errorHandler(errorHandlerArg);
                }
            }
            else {
                if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemcpy2DToArray() data copied from device%d matched with that from device0.\n", i);;
            }
        }
        break;
      case cudaMemcpyHostToDevice:
        srcbuf.RCbuf_len = spitch * height;
        srcbuf.RCbuf_val = (char *)src;
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            h2drp = dscudamemcpy2dtoarrayh2did_1((RCadr)ca->ap[i], wOffset, hOffset,
                                                srcbuf, spitch, width, height, Clnt[Vdevid][sp->id]);
            checkResult(h2drp, sp);
            if (h2drp->err != cudaSuccess) {
                err = (cudaError_t)h2drp->err;
            }
        }
        break;
      case cudaMemcpyDeviceToDevice:
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            d2drp = dscudamemcpy2dtoarrayd2did_1((RCadr)ca->ap[i], wOffset, hOffset,
                                                (RCadr)src, spitch, width, height, Clnt[Vdevid][sp->id]);
            checkResult(d2drp, sp);
            if (d2drp->err != cudaSuccess) {
                err = (cudaError_t)d2drp->err;
            }
        }
        break;
      default:
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "Unsupported value for cudaMemcpyKind : %s\n", dscudaMemcpyKindName(kind));;
        exit(1);
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
cudaMemcpy2D(void *dst, size_t dpitch,
             const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind)
{
    cudaError_t err = cudaSuccess;
    dscudaMemcpy2DD2HResult *d2hrp;
    dscudaResult *h2drp, *d2drp;
    RCbuf srcbuf;
    Vdev_t *vdev;
    RCServer_t *sp;

    initClient();

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemcpy2D(0x%08llx, %d, 0x%08llx, %d, %d, %d, %s)...", (unsigned long)dst, dpitch, (unsigned long)src, spitch, width, height, dscudaMemcpyKindName(kind));

                                                                               ;

    switch (kind) {
      case cudaMemcpyDeviceToHost:
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            d2hrp = dscudamemcpy2dd2hid_1(dpitch,
                                         (RCadr)src, spitch, width, height, Clnt[Vdevid][sp->id]);
            checkResult(d2hrp, sp);
            if (d2hrp->err != cudaSuccess) {
                err = (cudaError_t)d2hrp->err;
            }
            if (i == 0) {
                memcpy(dst, d2hrp->buf.RCbuf_val, d2hrp->buf.RCbuf_len);
            }
            else if (bcmp(dst, d2hrp->buf.RCbuf_val, d2hrp->buf.RCbuf_len) != 0) {
                if (errorHandler) {
                    errorHandler(errorHandlerArg);
                }
            }
            else {
                if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemcpy() data copied from device%d matched with that from device0.\n", i);;
            }
        }
        break;
      case cudaMemcpyHostToDevice:
        srcbuf.RCbuf_len = spitch * height;
        srcbuf.RCbuf_val = (char *)src;
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            h2drp = dscudamemcpy2dh2did_1((RCadr)dst, dpitch,
                                         srcbuf, spitch, width, height, Clnt[Vdevid][sp->id]);
            checkResult(h2drp, sp);
            if (h2drp->err != cudaSuccess) {
                err = (cudaError_t)h2drp->err;
            }
        }
        break;
      case cudaMemcpyDeviceToDevice:
        vdev = Vdev + Vdevid;
        sp = vdev->server;
        for (int i = 0; i < vdev->nredundancy; i++, sp++) {
            d2drp = dscudamemcpy2dd2did_1((RCadr)dst, dpitch,
                                         (RCadr)src, spitch, width, height, Clnt[Vdevid][sp->id]);
            checkResult(d2drp, sp);
            if (d2drp->err != cudaSuccess) {
                err = (cudaError_t)d2drp->err;
            }
        }
        break;
      default:
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "Unsupported value for cudaMemcpyKind : %s\n", dscudaMemcpyKindName(kind));;
        exit(1);
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaMemset2D(0x%08llx, %d, %d, %d, %d)...", (unsigned long)devPtr, pitch, value, width, height);
                                                            ;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudamemset2did_1((RCadr)devPtr, pitch, value, width, height, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    return err;
}

cudaError_t
cudaMallocHost(void **ptr, size_t size)
{
# 2706 "libdscuda.cu"
    *ptr = malloc(size);
    if (*ptr) {
        return cudaSuccess;
    }
    else {
        return cudaErrorMemoryAllocation;
    }

}

cudaError_t
cudaHostAlloc(void **pHost, size_t size, unsigned int flags)
{
# 2743 "libdscuda.cu"
    cudaError_t err = cudaSuccess;
    void *devmem;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaHostAlloc(0x%08llx, %d, 0x%08x)...", (unsigned long)pHost, size, flags);;

    *pHost = malloc(size);
    if (!*pHost) return cudaErrorMemoryAllocation;
    if (!(flags & 0x02)) {
        if (3 <= dscudaWarnLevel()) fprintf(stderr, "done. *pHost:0x%08llx\n", *pHost);;
        return cudaSuccess;
    }


    err = cudaMalloc(&devmem, size);
    if (err == cudaSuccess) {
        RCmappedMemRegister(*pHost, devmem, size);
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done. host mem:0x%08llx  device mem:0x%08llx\n", *pHost, devmem);;

    return err;

}

cudaError_t
cudaFreeHost(void *ptr)
{
# 2788 "libdscuda.cu"
    cudaError_t err = cudaSuccess;
    RCmappedMem *mem = RCmappedMemQuery(ptr);
    free(ptr);
    if (mem) {
        err = cudaFree(mem->pDevice);
        RCmappedMemUnregister(ptr);
        return err;
    }
    else {
        return cudaSuccess;
    }

}


cudaError_t
cudaHostGetDevicePointer(void **pDevice, void*pHost, unsigned int flags)
{
# 2827 "libdscuda.cu"
    RCmappedMem *mem = RCmappedMemQuery(pHost);
    if (!mem) return cudaErrorInvalidValue;
    *pDevice = mem->pDevice;
    return cudaSuccess;

}

cudaError_t
cudaHostGetFlags(unsigned int *pFlags, void *pHost)
{
    cudaError_t err = cudaSuccess;
    dscudaHostGetFlagsResult *rp;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaHostGetFlags(0x%08x 0x%08llx)...", (unsigned long)pFlags, (unsigned long)pHost);
                                                     ;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudahostgetflagsid_1((RCadr)pHost, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    *pFlags = rp->flags;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done. flags:0x%08x\n", *pFlags);;
    return err;

}

cudaError_t
cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)
{
# 2927 "libdscuda.cu"
    return cudaMemcpy(dst, src, count, kind);

}
# 2941 "libdscuda.cu"
static void
RCstreamArrayRegister(cudaStream_t *streams)
{
    RCstreamArray *st = (RCstreamArray *)malloc(sizeof(RCstreamArray));
    if (!st) {
        perror("RCstreamArrayRegister");
    }
    for (int i = 0; i < 4; i++) {
        st->s[i] = streams[i];
    }
    st->prev = RCstreamArrayListTail;
    st->next = ((void *)0);
    if (!RCstreamArrayListTop) {
        RCstreamArrayListTop = st;
    }
    else {
        RCstreamArrayListTail->next = st;
    }
    RCstreamArrayListTail = st;
}
# 2974 "libdscuda.cu"
static void
RCstreamArrayUnregister(cudaStream_t stream0)
{
    RCstreamArray *st = RCstreamArrayQuery(stream0);
    if (!st) return;

    if (st->prev) {
        st->prev->next = st->next;
    }
    else {
        RCstreamArrayListTop = st->next;
        if (st->next) {
            st->next->prev = ((void *)0);
        }
    }
    if (!st->next) {
        RCstreamArrayListTail = st->prev;
    }
    free(st);

}

static RCstreamArray *
RCstreamArrayQuery(cudaStream_t stream0)
{
    static RCstreamArray default_stream = { 0,};

    if (stream0 == 0) {
        return &default_stream;
    }

    RCstreamArray *st = RCstreamArrayListTop;
    while (st) {
        if (st->s[0] == stream0) {
            return st;
        }
        st = st->next;
    }
    return ((void *)0);
}

cudaError_t
cudaStreamCreate(cudaStream_t *pStream)
{
# 3042 "libdscuda.cu"
    *pStream = 0;
    return cudaSuccess;

}

cudaError_t
cudaStreamDestroy(cudaStream_t stream)
{
# 3075 "libdscuda.cu"
    return cudaSuccess;

}

cudaError_t
cudaStreamSynchronize(cudaStream_t stream)
{
# 3106 "libdscuda.cu"
    return cudaSuccess;

}

cudaError_t
cudaStreamQuery(cudaStream_t stream)
{
# 3137 "libdscuda.cu"
    return cudaSuccess;

}
# 3151 "libdscuda.cu"
static void
RCeventArrayRegister(cudaEvent_t *events)
{
    RCeventArray *ev = (RCeventArray *)malloc(sizeof(RCeventArray));
    if (!ev) {
        perror("RCeventArrayRegister");
    }
    for (int i = 0; i < 4; i++) {
        ev->e[i] = events[i];
    }
    ev->prev = RCeventArrayListTail;
    ev->next = ((void *)0);
    if (!RCeventArrayListTop) {
        RCeventArrayListTop = ev;
    }
    else {
        RCeventArrayListTail->next = ev;
    }
    RCeventArrayListTail = ev;
}

static void
RCeventArrayUnregister(cudaEvent_t event0)
{
    RCeventArray *ev = RCeventArrayQuery(event0);
    if (!ev) return;

    if (ev->prev) {
        ev->prev->next = ev->next;
    }
    else {
        RCeventArrayListTop = ev->next;
        if (ev->next) {
            ev->next->prev = ((void *)0);
        }
    }
    if (!ev->next) {
        RCeventArrayListTail = ev->prev;
    }
    free(ev);
}

static RCeventArray *
RCeventArrayQuery(cudaEvent_t event0)
{
    RCeventArray *ev = RCeventArrayListTop;
    while (ev) {
        if (ev->e[0] == event0) {
            return ev;
        }
        ev = ev->next;
    }
    return ((void *)0);
}

cudaError_t
ibvCudaEventCreate(cudaEvent_t *event)
{
    static cudaEvent_t e;
    *event = e;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "a dummy call to cudaEventCreate()\n");;
    return cudaSuccess;
}

cudaError_t
rpcCudaEventCreate(cudaEvent_t *event)
{
    cudaError_t err = cudaSuccess;
    dscudaEventCreateResult *rp;
    cudaEvent_t ev[4];

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaEventCreate(0x%08llx)...", (unsigned long)event);;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudaeventcreateid_1(Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
        ev[i] = (cudaEvent_t)rp->event;
    }
    *event = ev[0];
    RCeventArrayRegister(ev);
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done. *event:0x%08llx\n", *event);;

    return err;
}

cudaError_t
ibvCudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags)
{
    static cudaEvent_t e;
    *event = e;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "a dummy call to cudaEventCreateWithFlags()\n");;
    return cudaSuccess;
}

cudaError_t
rpcCudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags)
{
    cudaError_t err = cudaSuccess;
    dscudaEventCreateResult *rp;
    cudaEvent_t ev[4];

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaEventCreateWithFlags(0x%08llx, 0x%08x)...", (unsigned long)event, flags);;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudaeventcreatewithflagsid_1(flags, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
        ev[i] = (cudaEvent_t)rp->event;
    }
    *event = ev[0];
    RCeventArrayRegister(ev);
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done. *event:0x%08llx\n", *event);;

    return err;
}

cudaError_t
ibvCudaEventDestroy(cudaEvent_t event)
{
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "a dummy call to cudaEventDestroy()\n");;
    return cudaSuccess;
}

cudaError_t
rpcCudaEventDestroy(cudaEvent_t event)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;
    RCeventArray *ev;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaEventDestroy(0x%08llx)...", (unsigned long)event);;
    ev = RCeventArrayQuery(event);
    if (!ev) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid event : 0x%08llx\n", event);;
        exit(1);
    }
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudaeventdestroyid_1((RCadr)ev->e[i], Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    RCeventArrayUnregister(ev->e[0]);
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    return err;
}

cudaError_t
ibvCudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end)
{
    *ms = 123.0;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "a dummy call to cudaEventElapsedTime()\n");;
    return cudaSuccess;
}

cudaError_t
rpcCudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end)
{
    cudaError_t err = cudaSuccess;
    dscudaEventElapsedTimeResult *rp;
    RCeventArray *es, *ee;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaEventElapsedTime(0x%08llx, 0x%08llx, 0x%08llx)...", (unsigned long)ms, (unsigned long)start, (unsigned long)end);
                                                                     ;
    es = RCeventArrayQuery(start);
    if (!es) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid start event : 0x%08llx\n", start);;
        exit(1);
    }
    ee = RCeventArrayQuery(end);
    if (!ee) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid end event : 0x%08llx\n", end);;
        exit(1);
    }
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudaeventelapsedtimeid_1((RCadr)es->e[i], (RCadr)ee->e[i], Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }

    *ms = rp->ms;
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    return err;
}

cudaError_t
ibvCudaEventRecord(cudaEvent_t event, cudaStream_t stream)
{
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "a dummy call to cudaEventRecord()\n");;
    return cudaSuccess;
}

cudaError_t
rpcCudaEventRecord(cudaEvent_t event, cudaStream_t stream)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;
    RCstreamArray *st;
    RCeventArray *ev;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaEventRecord(0x%08llx, 0x%08llx)...", (unsigned long)event, (unsigned long)stream);;
    st = RCstreamArrayQuery(stream);
    if (!st) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid stream : 0x%08llx\n", stream);;
        exit(1);
    }
    ev = RCeventArrayQuery(event);
    if (!ev) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid event : 0x%08llx\n", event);;
        exit(1);
    }
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudaeventrecordid_1((RCadr)ev->e[i], (RCadr)st->s[i], Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    return err;
}

cudaError_t
ibvCudaEventSynchronize(cudaEvent_t event)
{
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "a dummy call to cudaEventSynchronize()\n");;
    return cudaSuccess;
}

cudaError_t
rpcCudaEventSynchronize(cudaEvent_t event)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;
    RCeventArray *ev;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaEventSynchronize(0x%08llx)...", (unsigned long)event);;
    ev = RCeventArrayQuery(event);
    if (!ev) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid event : 0x%08llx\n", event);;
        exit(1);
    }
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudaeventsynchronizeid_1((RCadr)ev->e[i], Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    return err;
}

cudaError_t
ibvCudaEventQuery(cudaEvent_t event)
{
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "a dummy call to cudaEventQuery()\n");;
    return cudaSuccess;
}

cudaError_t
rpcCudaEventQuery(cudaEvent_t event)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;
    RCeventArray *ev;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaEventQuery(0x%08llx)...", (unsigned long)event);;
    ev = RCeventArrayQuery(event);
    if (!ev) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid event : 0x%08llx\n", event);;
        exit(1);
    }
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudaeventqueryid_1((RCadr)ev->e[i], Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    return err;
}

cudaError_t
cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;
    RCstreamArray *st;
    RCeventArray *ev;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaStreamWaitEvent(0x%08llx, 0x%08llx, 0x%08x)...", (unsigned long)stream, (unsigned long)event, flags);
                                                            ;
    st = RCstreamArrayQuery(stream);
    if (!st) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid stream : 0x%08llx\n", stream);;
        exit(1);
    }
    ev = RCeventArrayQuery(event);
    if (!ev) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid event : 0x%08llx\n", event);;
        exit(1);
    }
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudastreamwaiteventid_1((RCadr)st->s[i], (RCadr)ev->e[i], flags, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    return err;
}





cudaChannelFormatDesc
cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f)
{
    dscudaCreateChannelDescResult *rp;
    cudaChannelFormatDesc desc;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaCreateChannelDesc()...");;
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudacreatechanneldescid_1(x, y, z, w, f, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    desc.x = rp->x;
    desc.y = rp->y;
    desc.z = rp->z;
    desc.w = rp->w;
    desc.f = (enum cudaChannelFormatKind)rp->f;

    return desc;
}

cudaError_t
cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, const struct cudaArray *array)
{
    cudaError_t err = cudaSuccess;
    dscudaGetChannelDescResult *rp;
    RCcuarrayArray *ca;

    initClient();
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "cudaGetChannelDesc()...");;
    ca = RCcuarrayArrayQuery((cudaArray *)array);
    if (!ca) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid cudaArray : 0x%08llx\n", array);;
        exit(1);
    }
    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudagetchanneldescid_1((RCadr)ca->ap[i], Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;

    desc->x = rp->x;
    desc->y = rp->y;
    desc->z = rp->z;
    desc->w = rp->w;
    desc->f = (enum cudaChannelFormatKind)rp->f;

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    return err;
}

static void
setTextureParams(RCtexture *texbufp, const struct textureReference *tex, const struct cudaChannelFormatDesc *desc)
{
    texbufp->normalized = tex->normalized;
    texbufp->filterMode = tex->filterMode;
    texbufp->addressMode[0] = tex->addressMode[0];
    texbufp->addressMode[1] = tex->addressMode[1];
    texbufp->addressMode[2] = tex->addressMode[2];
    if (desc) {
        texbufp->x = desc->x;
        texbufp->y = desc->y;
        texbufp->z = desc->z;
        texbufp->w = desc->w;
        texbufp->f = desc->f;
    }
    else {
        texbufp->x = tex->channelDesc.x;
        texbufp->y = tex->channelDesc.y;
        texbufp->z = tex->channelDesc.z;
        texbufp->w = tex->channelDesc.w;
        texbufp->f = tex->channelDesc.f;
    }
}

cudaError_t
dscudaBindTextureWrapper(int *moduleid, char *texname,
                        size_t *offset,
                        const struct textureReference *tex,
                        const void *devPtr,
                        const struct cudaChannelFormatDesc *desc,
                        size_t size)
{
    cudaError_t err = cudaSuccess;
    dscudaBindTextureResult *rp;
    RCtexture texbuf;

    initClient();

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "dscudaBindTextureWrapper(0x%08llx, %s, 0x%08llx, 0x%08llx, 0x%08llx, 0x%08llx, %d)...", moduleid, texname, offset, tex, devPtr, desc, size);

                                         ;

    setTextureParams(&texbuf, tex, desc);

    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudabindtextureid_1(moduleid[i], texname,
                                  (RCadr)devPtr, size, (RCtexture)texbuf, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }

    if (offset) {
        *offset = rp->offset;
    }

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    return err;
}

cudaError_t
dscudaBindTexture2DWrapper(int *moduleid, char *texname,
                          size_t *offset,
                          const struct textureReference *tex,
                          const void *devPtr,
                          const struct cudaChannelFormatDesc *desc,
                          size_t width, size_t height, size_t pitch)
{
    cudaError_t err = cudaSuccess;
    dscudaBindTexture2DResult *rp;
    RCtexture texbuf;

    initClient();

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "dscudaBindTexture2DWrapper(0x%08llx, %s, 0x%08llx, 0x%08llx, 0x%08llx, 0x%08llx, %d, %d, %d)...", moduleid, texname, offset, tex, devPtr, desc, width, height, pitch);

                                                         ;

    setTextureParams(&texbuf, tex, desc);

    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudabindtexture2did_1(moduleid[i], texname,
                                    (RCadr)devPtr, width, height, pitch, (RCtexture)texbuf, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }

    if (offset) {
        *offset = rp->offset;
    }

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    return err;
}

cudaError_t
dscudaBindTextureToArrayWrapper(int *moduleid, char *texname,
                               const struct textureReference *tex,
                               const struct cudaArray *array,
                               const struct cudaChannelFormatDesc *desc)
{
    cudaError_t err = cudaSuccess;
    dscudaResult *rp;
    RCtexture texbuf;
    RCcuarrayArray *ca;

    initClient();

    if (3 <= dscudaWarnLevel()) fprintf(stderr, "dscudaBindTextureToArrayWrapper(0x%08llx, %s, 0x%08llx, 0x%08llx)...", moduleid, texname, (unsigned long)array, (unsigned long)desc);
                                                                      ;

    setTextureParams(&texbuf, tex, desc);

    ca = RCcuarrayArrayQuery((cudaArray *)array);
    if (!ca) {
        if (0 <= dscudaWarnLevel()) fprintf(stderr, "invalid cudaArray : 0x%08llx\n", array);;
        exit(1);
    }

    Vdev_t *vdev = Vdev + Vdevid;
    RCServer_t *sp = vdev->server;
    for (int i = 0; i < vdev->nredundancy; i++, sp++) {
        rp = dscudabindtexturetoarrayid_1(moduleid[i], texname, (RCadr)ca->ap[i], (RCtexture)texbuf, Clnt[Vdevid][sp->id]);
        checkResult(rp, sp);
        if (rp->err != cudaSuccess) {
            err = (cudaError_t)rp->err;
        }
    }
    if (3 <= dscudaWarnLevel()) fprintf(stderr, "done.\n");;
    return err;
}

cudaError_t
cudaUnbindTexture(const struct textureReference * texref)
{
    cudaError_t err = cudaSuccess;

    if (4 <= dscudaWarnLevel()) fprintf(stderr, "Current implementation of cudaUnbindTexture() does nothing " "but returning cudaSuccess.\n");
                                        ;

    err = cudaSuccess;

    return err;
}

int
dscudaRemoteCallType(void)
{
    int rctype = RC_REMOTECALL_TYPE_RPC;

    if (UseIbv) {
        rctype = RC_REMOTECALL_TYPE_IBV;
    }

    return rctype;
}
